RenderContext { version: "0.4.0", root: "/Users/beckmanl/Documents/code/mdbook-latex/tests/book", book: Book { sections: [Chapter(Chapter { name: "The Rust Programming Language", content: "# The Rust Programming Language\n\n*by Steve Klabnik and Carol Nichols, with contributions from the Rust Community*\n\nThis version of the text assumes you’re using Rust 1.41.0 or later with\n`edition=\"2018\"` in *Cargo.toml* of all projects to use Rust 2018 Edition\nidioms. See the [“Installation” section of Chapter 1][install]<!-- ignore -->\nto install or update Rust, and see the new [Appendix E][editions]<!-- ignore\n--> for information on editions.\n\nThe 2018 Edition of the Rust language includes a number of improvements that\nmake Rust more ergonomic and easier to learn. This iteration of the book\ncontains a number of changes to reflect those improvements:\n\n- Chapter 7, “Managing Growing Projects with Packages, Crates, and Modules,”\n  has been mostly rewritten. The module system and the way paths work in the\n  2018 Edition were made more consistent.\n- Chapter 10 has new sections titled “Traits as Parameters” and “Returning\n  Types that Implement Traits” that explain the new `impl Trait` syntax.\n- Chapter 11 has a new section titled “Using `Result<T, E>` in Tests” that\n  shows how to write tests that use the `?` operator.\n- The “Advanced Lifetimes” section in Chapter 19 was removed because compiler\n  improvements have made the constructs in that section even rarer.\n- The previous Appendix D, “Macros,” has been expanded to include procedural\n  macros and was moved to the “Macros” section in Chapter 19.\n- Appendix A, “Keywords,” also explains the new raw identifiers feature that\n  enables code written in the 2015 Edition and the 2018 Edition to interoperate.\n- Appendix D is now titled “Useful Development Tools” and covers recently\n  released tools that help you write Rust code.\n- We fixed a number of small errors and imprecise wording throughout the book.\n  Thank you to the readers who reported them!\n\nNote that any code in earlier iterations of *The Rust Programming Language*\nthat compiled will continue to compile without `edition=\"2018\"` in the\nproject’s *Cargo.toml*, even as you update the Rust compiler version you’re\nusing. That’s Rust’s backward compatibility guarantees at work!\n\nThe HTML format is available online at\n[https://doc.rust-lang.org/stable/book/](https://doc.rust-lang.org/stable/book/)\nand offline with installations of Rust made with `rustup`; run `rustup docs\n--book` to open.\n\nThis text is available in [paperback and ebook format from No Starch\nPress][nsprust].\n\n[install]: ch01-01-installation.html\n[editions]: appendix-05-editions.html\n[nsprust]: https://nostarch.com/rust\n", number: None, sub_items: [], path: "title-page.md", parent_names: [] }), Chapter(Chapter { name: "Foreword", content: "# Foreword\n\nIt wasn’t always so clear, but the Rust programming language is fundamentally\nabout *empowerment*: no matter what kind of code you are writing now, Rust\nempowers you to reach farther, to program with confidence in a wider variety of\ndomains than you did before.\n\nTake, for example, “systems-level” work that deals with low-level details of\nmemory management, data representation, and concurrency. Traditionally, this\nrealm of programming is seen as arcane, accessible only to a select few who\nhave devoted the necessary years learning to avoid its infamous pitfalls. And\neven those who practice it do so with caution, lest their code be open to\nexploits, crashes, or corruption.\n\nRust breaks down these barriers by eliminating the old pitfalls and providing a\nfriendly, polished set of tools to help you along the way. Programmers who need\nto “dip down” into lower-level control can do so with Rust, without taking on\nthe customary risk of crashes or security holes, and without having to learn\nthe fine points of a fickle toolchain. Better yet, the language is designed to\nguide you naturally towards reliable code that is efficient in terms of speed\nand memory usage.\n\nProgrammers who are already working with low-level code can use Rust to raise\ntheir ambitions. For example, introducing parallelism in Rust is a relatively\nlow-risk operation: the compiler will catch the classical mistakes for you. And\nyou can tackle more aggressive optimizations in your code with the confidence\nthat you won’t accidentally introduce crashes or vulnerabilities.\n\nBut Rust isn’t limited to low-level systems programming. It’s expressive and\nergonomic enough to make CLI apps, web servers, and many other kinds of code\nquite pleasant to write — you’ll find simple examples of both later in the\nbook. Working with Rust allows you to build skills that transfer from one\ndomain to another; you can learn Rust by writing a web app, then apply those\nsame skills to target your Raspberry Pi.\n\nThis book fully embraces the potential of Rust to empower its users. It’s a\nfriendly and approachable text intended to help you level up not just your\nknowledge of Rust, but also your reach and confidence as a programmer in\ngeneral. So dive in, get ready to learn—and welcome to the Rust community!\n\n— Nicholas Matsakis and Aaron Turon\n", number: None, sub_items: [], path: "foreword.md", parent_names: [] }), Chapter(Chapter { name: "Introduction", content: "# Introduction\n\n> Note: This edition of the book is the same as [The Rust Programming\n> Language][nsprust] available in print and ebook format from [No Starch\n> Press][nsp].\n\n[nsprust]: https://nostarch.com/rust\n[nsp]: https://nostarch.com/\n\nWelcome to *The Rust Programming Language*, an introductory book about Rust.\nThe Rust programming language helps you write faster, more reliable software.\nHigh-level ergonomics and low-level control are often at odds in programming\nlanguage design; Rust challenges that conflict. Through balancing powerful\ntechnical capacity and a great developer experience, Rust gives you the option\nto control low-level details (such as memory usage) without all the hassle\ntraditionally associated with such control.\n\n## Who Rust Is For\n\nRust is ideal for many people for a variety of reasons. Let’s look at a few of\nthe most important groups.\n\n### Teams of Developers\n\nRust is proving to be a productive tool for collaborating among large teams of\ndevelopers with varying levels of systems programming knowledge. Low-level code\nis prone to a variety of subtle bugs, which in most other languages can be\ncaught only through extensive testing and careful code review by experienced\ndevelopers. In Rust, the compiler plays a gatekeeper role by refusing to\ncompile code with these elusive bugs, including concurrency bugs. By working\nalongside the compiler, the team can spend their time focusing on the program’s\nlogic rather than chasing down bugs.\n\nRust also brings contemporary developer tools to the systems programming world:\n\n* Cargo, the included dependency manager and build tool, makes adding,\n  compiling, and managing dependencies painless and consistent across the Rust\n  ecosystem.\n* Rustfmt ensures a consistent coding style across developers.\n* The Rust Language Server powers Integrated Development Environment (IDE)\n  integration for code completion and inline error messages.\n\nBy using these and other tools in the Rust ecosystem, developers can be\nproductive while writing systems-level code.\n\n### Students\n\nRust is for students and those who are interested in learning about systems\nconcepts. Using Rust, many people have learned about topics like operating\nsystems development. The community is very welcoming and happy to answer\nstudent questions. Through efforts such as this book, the Rust teams want to\nmake systems concepts more accessible to more people, especially those new to\nprogramming.\n\n### Companies\n\nHundreds of companies, large and small, use Rust in production for a variety of\ntasks. Those tasks include command line tools, web services, DevOps tooling,\nembedded devices, audio and video analysis and transcoding, cryptocurrencies,\nbioinformatics, search engines, Internet of Things applications, machine\nlearning, and even major parts of the Firefox web browser.\n\n### Open Source Developers\n\nRust is for people who want to build the Rust programming language, community,\ndeveloper tools, and libraries. We’d love to have you contribute to the Rust\nlanguage.\n\n### People Who Value Speed and Stability\n\nRust is for people who crave speed and stability in a language. By speed, we\nmean the speed of the programs that you can create with Rust and the speed at\nwhich Rust lets you write them. The Rust compiler’s checks ensure stability\nthrough feature additions and refactoring. This is in contrast to the brittle\nlegacy code in languages without these checks, which developers are often\nafraid to modify. By striving for zero-cost abstractions, higher-level features\nthat compile to lower-level code as fast as code written manually, Rust\nendeavors to make safe code be fast code as well.\n\nThe Rust language hopes to support many other users as well; those mentioned\nhere are merely some of the biggest stakeholders. Overall, Rust’s greatest\nambition is to eliminate the trade-offs that programmers have accepted for\ndecades by providing safety *and* productivity, speed *and* ergonomics. Give\nRust a try and see if its choices work for you.\n\n## Who This Book Is For\n\nThis book assumes that you’ve written code in another programming language but\ndoesn’t make any assumptions about which one. We’ve tried to make the material\nbroadly accessible to those from a wide variety of programming backgrounds. We\ndon’t spend a lot of time talking about what programming *is* or how to think\nabout it. If you’re entirely new to programming, you would be better served by\nreading a book that specifically provides an introduction to programming.\n\n## How to Use This Book\n\nIn general, this book assumes that you’re reading it in sequence from front to\nback. Later chapters build on concepts in earlier chapters, and earlier\nchapters might not delve into details on a topic; we typically revisit the\ntopic in a later chapter.\n\nYou’ll find two kinds of chapters in this book: concept chapters and project\nchapters. In concept chapters, you’ll learn about an aspect of Rust. In project\nchapters, we’ll build small programs together, applying what you’ve learned so\nfar. Chapters 2, 12, and 20 are project chapters; the rest are concept chapters.\n\nChapter 1 explains how to install Rust, how to write a “Hello, world!” program,\nand how to use Cargo, Rust’s package manager and build tool. Chapter 2 is a\nhands-on introduction to the Rust language. Here we cover concepts at a high\nlevel, and later chapters will provide additional detail. If you want to get\nyour hands dirty right away, Chapter 2 is the place for that. At first, you\nmight even want to skip Chapter 3, which covers Rust features similar to those\nof other programming languages, and head straight to Chapter 4 to learn about\nRust’s ownership system. However, if you’re a particularly meticulous learner\nwho prefers to learn every detail before moving on to the next, you might want\nto skip Chapter 2 and go straight to Chapter 3, returning to Chapter 2 when\nyou’d like to work on a project applying the details you’ve learned.\n\nChapter 5 discusses structs and methods, and Chapter 6 covers enums, `match`\nexpressions, and the `if let` control flow construct. You’ll use structs and\nenums to make custom types in Rust.\n\nIn Chapter 7, you’ll learn about Rust’s module system and about privacy rules\nfor organizing your code and its public Application Programming Interface\n(API). Chapter 8 discusses some common collection data structures that the\nstandard library provides, such as vectors, strings, and hash maps. Chapter 9\nexplores Rust’s error-handling philosophy and techniques.\n\nChapter 10 digs into generics, traits, and lifetimes, which give you the power\nto define code that applies to multiple types. Chapter 11 is all about testing,\nwhich even with Rust’s safety guarantees is necessary to ensure your program’s\nlogic is correct. In Chapter 12, we’ll build our own implementation of a subset\nof functionality from the `grep` command line tool that searches for text\nwithin files. For this, we’ll use many of the concepts we discussed in the\nprevious chapters.\n\nChapter 13 explores closures and iterators: features of Rust that come from\nfunctional programming languages. In Chapter 14, we’ll examine Cargo in more\ndepth and talk about best practices for sharing your libraries with others.\nChapter 15 discusses smart pointers that the standard library provides and the\ntraits that enable their functionality.\n\nIn Chapter 16, we’ll walk through different models of concurrent programming\nand talk about how Rust helps you to program in multiple threads fearlessly.\nChapter 17 looks at how Rust idioms compare to object-oriented programming\nprinciples you might be familiar with.\n\nChapter 18 is a reference on patterns and pattern matching, which are powerful\nways of expressing ideas throughout Rust programs. Chapter 19 contains a\nsmorgasbord of advanced topics of interest, including unsafe Rust, macros, and\nmore about lifetimes, traits, types, functions, and closures.\n\nIn Chapter 20, we’ll complete a project in which we’ll implement a low-level\nmultithreaded web server!\n\nFinally, some appendixes contain useful information about the language in a\nmore reference-like format. Appendix A covers Rust’s keywords, Appendix B\ncovers Rust’s operators and symbols, Appendix C covers derivable traits\nprovided by the standard library, Appendix D covers some useful development\ntools, and Appendix E explains Rust editions.\n\nThere is no wrong way to read this book: if you want to skip ahead, go for it!\nYou might have to jump back to earlier chapters if you experience any\nconfusion. But do whatever works for you.\n\n<span id=\"ferris\"></span>\n\nAn important part of the process of learning Rust is learning how to read the\nerror messages the compiler displays: these will guide you toward working code.\nAs such, we’ll provide many examples that don’t compile along with the error\nmessage the compiler will show you in each situation. Know that if you enter\nand run a random example, it may not compile! Make sure you read the\nsurrounding text to see whether the example you’re trying to run is meant to\nerror. Ferris will also help you distinguish code that isn’t meant to work:\n\n| Ferris                                                                 | Meaning                                          |\n|------------------------------------------------------------------------|--------------------------------------------------|\n| <img src=\"img/ferris/does_not_compile.svg\" class=\"ferris-explain\"/>    | This code does not compile!                      |\n| <img src=\"img/ferris/panics.svg\" class=\"ferris-explain\"/>              | This code panics!                                |\n| <img src=\"img/ferris/unsafe.svg\" class=\"ferris-explain\"/>              | This code block contains unsafe code.            |\n| <img src=\"img/ferris/not_desired_behavior.svg\" class=\"ferris-explain\"/>| This code does not produce the desired behavior. |\n\nIn most situations, we’ll lead you to the correct version of any code that\ndoesn’t compile.\n\n## Source Code\n\nThe source files from which this book is generated can be found on\n[GitHub][book].\n\n[book]: https://github.com/rust-lang/book/tree/master/src\n", number: None, sub_items: [], path: "ch00-00-introduction.md", parent_names: [] }), Chapter(Chapter { name: "Getting Started", content: "# Getting Started\n\nLet’s start your Rust journey! There’s a lot to learn, but every journey starts\nsomewhere. In this chapter, we’ll discuss:\n\n* Installing Rust on Linux, macOS, and Windows\n* Writing a program that prints `Hello, world!`\n* Using `cargo`, Rust’s package manager and build system\n", number: Some(SectionNumber([1])), sub_items: [Chapter(Chapter { name: "Installation", content: "## Installation\n\nThe first step is to install Rust. We’ll download Rust through `rustup`, a\ncommand line tool for managing Rust versions and associated tools. You’ll need\nan internet connection for the download.\n\n> Note: If you prefer not to use `rustup` for some reason, please see [the Rust\n> installation page](https://www.rust-lang.org/tools/install) for other options.\n\nThe following steps install the latest stable version of the Rust compiler.\nRust’s stability guarantees ensure that all the examples in the book that\ncompile will continue to compile with newer Rust versions. The output might\ndiffer slightly between versions, because Rust often improves error messages\nand warnings. In other words, any newer, stable version of Rust you install\nusing these steps should work as expected with the content of this book.\n\n> ### Command Line Notation\n>\n> In this chapter and throughout the book, we’ll show some commands used in the\n> terminal. Lines that you should enter in a terminal all start with `$`. You\n> don’t need to type in the `$` character; it indicates the start of each\n> command. Lines that don’t start with `$` typically show the output of the\n> previous command. Additionally, PowerShell-specific examples will use `>`\n> rather than `$`.\n\n### Installing `rustup` on Linux or macOS\n\nIf you’re using Linux or macOS, open a terminal and enter the following command:\n\n```text\n$ curl --proto \'=https\' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n```\n\nThe command downloads a script and starts the installation of the `rustup`\ntool, which installs the latest stable version of Rust. You might be prompted\nfor your password. If the install is successful, the following line will appear:\n\n```text\nRust is installed now. Great!\n```\n\nAdditionally, you’ll need a linker of some kind. It’s likely one is already\ninstalled, but when you try to compile a Rust program and get errors indicating\nthat a linker could not execute, that means a linker isn’t installed on your\nsystem and you’ll need to install one manually. C compilers usually come with\nthe correct linker. Check your platform’s documentation for how to install a C\ncompiler. Also, some common Rust packages depend on C code and will need a C\ncompiler. Therefore, it might be worth installing one now.\n\n### Installing `rustup` on Windows\n\nOn Windows, go to [https://www.rust-lang.org/tools/install][install] and follow\nthe instructions for installing Rust. At some point in the installation, you’ll\nreceive a message explaining that you’ll also need the C++ build tools for\nVisual Studio 2013 or later. The easiest way to acquire the build tools is to\ninstall [Build Tools for Visual Studio 2019][visualstudio]. The tools are in\nthe Other Tools and Frameworks section.\n\n[install]: https://www.rust-lang.org/tools/install\n[visualstudio]: https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2019\n\nThe rest of this book uses commands that work in both *cmd.exe* and PowerShell.\nIf there are specific differences, we’ll explain which to use.\n\n### Updating and Uninstalling\n\nAfter you’ve installed Rust via `rustup`, updating to the latest version is\neasy. From your shell, run the following update script:\n\n```text\n$ rustup update\n```\n\nTo uninstall Rust and `rustup`, run the following uninstall script from your\nshell:\n\n```text\n$ rustup self uninstall\n```\n\n### Troubleshooting\n\nTo check whether you have Rust installed correctly, open a shell and enter this\nline:\n\n```text\n$ rustc --version\n```\n\nYou should see the version number, commit hash, and commit date for the latest\nstable version that has been released in the following format:\n\n```text\nrustc x.y.z (abcabcabc yyyy-mm-dd)\n```\n\nIf you see this information, you have installed Rust successfully! If you don’t\nsee this information and you’re on Windows, check that Rust is in your `%PATH%`\nsystem variable. If that’s all correct and Rust still isn’t working, there are\na number of places you can get help. The easiest is the #beginners channel on\n[the official Rust Discord][discord]. There, you can chat with other Rustaceans\n(a silly nickname we call ourselves) who can help you out. Other great\nresources include [the Users forum][users] and [Stack Overflow][stackoverflow].\n\n[discord]: https://discord.gg/rust-lang\n[users]: https://users.rust-lang.org/\n[stackoverflow]: https://stackoverflow.com/questions/tagged/rust\n\n### Local Documentation\n\nThe installation of Rust also includes a copy of the documentation locally, so\nyou can read it offline. Run `rustup doc` to open the local documentation in\nyour browser.\n\nAny time a type or function is provided by the standard library and you’re not\nsure what it does or how to use it, use the application programming interface\n(API) documentation to find out!\n", number: Some(SectionNumber([1, 1])), sub_items: [], path: "ch01-01-installation.md", parent_names: ["Getting Started"] }), Chapter(Chapter { name: "Hello, World!", content: "## Hello, World!\n\nNow that you’ve installed Rust, let’s write your first Rust program. It’s\ntraditional when learning a new language to write a little program that prints\nthe text `Hello, world!` to the screen, so we’ll do the same here!\n\n> Note: This book assumes basic familiarity with the command line. Rust makes\n> no specific demands about your editing or tooling or where your code lives, so\n> if you prefer to use an integrated development environment (IDE) instead of\n> the command line, feel free to use your favorite IDE. Many IDEs now have some\n> degree of Rust support; check the IDE’s documentation for details. Recently,\n> the Rust team has been focusing on enabling great IDE support, and progress\n> has been made rapidly on that front!\n\n### Creating a Project Directory\n\nYou’ll start by making a directory to store your Rust code. It doesn’t matter\nto Rust where your code lives, but for the exercises and projects in this book,\nwe suggest making a *projects* directory in your home directory and keeping all\nyour projects there.\n\nOpen a terminal and enter the following commands to make a *projects* directory\nand a directory for the “Hello, world!” project within the *projects* directory.\n\nFor Linux, macOS, and PowerShell on Windows, enter this:\n\n```text\n$ mkdir ~/projects\n$ cd ~/projects\n$ mkdir hello_world\n$ cd hello_world\n```\n\nFor Windows CMD, enter this:\n\n```cmd\n> mkdir \"%USERPROFILE%\\projects\"\n> cd /d \"%USERPROFILE%\\projects\"\n> mkdir hello_world\n> cd hello_world\n```\n\n### Writing and Running a Rust Program\n\nNext, make a new source file and call it *main.rs*. Rust files always end with\nthe *.rs* extension. If you’re using more than one word in your filename, use\nan underscore to separate them. For example, use *hello_world.rs* rather than\n*helloworld.rs*.\n\nNow open the *main.rs* file you just created and enter the code in Listing 1-1.\n\n<span class=\"filename\">Filename: main.rs</span>\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\n<span class=\"caption\">Listing 1-1: A program that prints `Hello, world!`</span>\n\nSave the file and go back to your terminal window. On Linux or macOS, enter\nthe following commands to compile and run the file:\n\n```text\n$ rustc main.rs\n$ ./main\nHello, world!\n```\n\nOn Windows, enter the command `.\\main.exe` instead of `./main`:\n\n```powershell\n> rustc main.rs\n> .\\main.exe\nHello, world!\n```\n\nRegardless of your operating system, the string `Hello, world!` should print to\nthe terminal. If you don’t see this output, refer back to the\n[“Troubleshooting”][troubleshooting]<!-- ignore --> part of the Installation\nsection for ways to get help.\n\nIf `Hello, world!` did print, congratulations! You’ve officially written a Rust\nprogram. That makes you a Rust programmer—welcome!\n\n### Anatomy of a Rust Program\n\nLet’s review in detail what just happened in your “Hello, world!” program.\nHere’s the first piece of the puzzle:\n\n```rust\nfn main() {\n\n}\n```\n\nThese lines define a function in Rust. The `main` function is special: it is\nalways the first code that runs in every executable Rust program. The first\nline declares a function named `main` that has no parameters and returns\nnothing. If there were parameters, they would go inside the parentheses, `()`.\n\nAlso, note that the function body is wrapped in curly brackets, `{}`. Rust\nrequires these around all function bodies. It’s good style to place the opening\ncurly bracket on the same line as the function declaration, adding one space in\nbetween.\n\nAt the time of this writing, an automatic formatter tool called `rustfmt` is\nunder development. If you want to stick to a standard style across Rust\nprojects, `rustfmt` will format your code in a particular style. The Rust team\nplans to eventually include this tool with the standard Rust distribution, like\n`rustc`. So depending on when you read this book, it might already be installed\non your computer! Check the online documentation for more details.\n\nInside the `main` function is the following code:\n\n```rust\n    println!(\"Hello, world!\");\n```\n\nThis line does all the work in this little program: it prints text to the\nscreen. There are four important details to notice here. First, Rust style is\nto indent with four spaces, not a tab.\n\nSecond, `println!` calls a Rust macro. If it called a function instead, it\nwould be entered as `println` (without the `!`). We’ll discuss Rust macros in\nmore detail in Chapter 19. For now, you just need to know that using a `!`\nmeans that you’re calling a macro instead of a normal function.\n\nThird, you see the `\"Hello, world!\"` string. We pass this string as an argument\nto `println!`, and the string is printed to the screen.\n\nFourth, we end the line with a semicolon (`;`), which indicates that this\nexpression is over and the next one is ready to begin. Most lines of Rust code\nend with a semicolon.\n\n### Compiling and Running Are Separate Steps\n\nYou’ve just run a newly created program, so let’s examine each step in the\nprocess.\n\nBefore running a Rust program, you must compile it using the Rust compiler by\nentering the `rustc` command and passing it the name of your source file, like\nthis:\n\n```text\n$ rustc main.rs\n```\n\nIf you have a C or C++ background, you’ll notice that this is similar to `gcc`\nor `clang`. After compiling successfully, Rust outputs a binary executable.\n\nOn Linux, macOS, and PowerShell on Windows, you can see the executable by\nentering the `ls` command in your shell. On Linux and macOS, you’ll see two\nfiles. With PowerShell on Windows, you’ll see the same three files that you\nwould see using CMD.\n\n```text\n$ ls\nmain  main.rs\n```\n\nWith CMD on Windows, you would enter the following:\n\n```cmd\n> dir /B %= the /B option says to only show the file names =%\nmain.exe\nmain.pdb\nmain.rs\n```\n\nThis shows the source code file with the *.rs* extension, the executable file\n(*main.exe* on Windows, but *main* on all other platforms), and, when using\nWindows, a file containing debugging information with the *.pdb* extension.\nFrom here, you run the *main* or *main.exe* file, like this:\n\n```text\n$ ./main # or .\\main.exe on Windows\n```\n\nIf *main.rs* was your “Hello, world!” program, this line would print `Hello,\nworld!` to your terminal.\n\nIf you’re more familiar with a dynamic language, such as Ruby, Python, or\nJavaScript, you might not be used to compiling and running a program as\nseparate steps. Rust is an *ahead-of-time compiled* language, meaning you can\ncompile a program and give the executable to someone else, and they can run it\neven without having Rust installed. If you give someone a *.rb*, *.py*, or\n*.js* file, they need to have a Ruby, Python, or JavaScript implementation\ninstalled (respectively). But in those languages, you only need one command to\ncompile and run your program. Everything is a trade-off in language design.\n\nJust compiling with `rustc` is fine for simple programs, but as your project\ngrows, you’ll want to manage all the options and make it easy to share your\ncode. Next, we’ll introduce you to the Cargo tool, which will help you write\nreal-world Rust programs.\n\n[troubleshooting]: ch01-01-installation.html#troubleshooting\n", number: Some(SectionNumber([1, 2])), sub_items: [], path: "ch01-02-hello-world.md", parent_names: ["Getting Started"] }), Chapter(Chapter { name: "Hello, Cargo!", content: "## Hello, Cargo!\n\nCargo is Rust’s build system and package manager. Most Rustaceans use this tool\nto manage their Rust projects because Cargo handles a lot of tasks for you,\nsuch as building your code, downloading the libraries your code depends on, and\nbuilding those libraries. (We call libraries your code needs *dependencies*.)\n\nThe simplest Rust programs, like the one we’ve written so far, don’t have any\ndependencies. So if we had built the “Hello, world!” project with Cargo, it\nwould only use the part of Cargo that handles building your code. As you write\nmore complex Rust programs, you’ll add dependencies, and if you start a project\nusing Cargo, adding dependencies will be much easier to do.\n\nBecause the vast majority of Rust projects use Cargo, the rest of this book\nassumes that you’re using Cargo too. Cargo comes installed with Rust if you\nused the official installers discussed in the\n[“Installation”][installation]<!-- ignore --> section. If you installed Rust\nthrough some other means, check whether Cargo is installed by entering the\nfollowing into your terminal:\n\n```text\n$ cargo --version\n```\n\nIf you see a version number, you have it! If you see an error, such as `command\nnot found`, look at the documentation for your method of installation to\ndetermine how to install Cargo separately.\n\n### Creating a Project with Cargo\n\nLet’s create a new project using Cargo and look at how it differs from our\noriginal “Hello, world!” project. Navigate back to your *projects* directory (or\nwherever you decided to store your code). Then, on any operating system, run\nthe following:\n\n```text\n$ cargo new hello_cargo\n$ cd hello_cargo\n```\n\nThe first command creates a new directory called *hello_cargo*. We’ve named\nour project *hello_cargo*, and Cargo creates its files in a directory of the\nsame name.\n\nGo into the *hello_cargo* directory and list the files. You’ll see that Cargo\nhas generated two files and one directory for us: a *Cargo.toml* file and a\n*src* directory with a *main.rs* file inside.\n\nIt has also initialized a new Git repository along with a *.gitignore* file.\nGit files won’t be generated if you run `cargo new` within an existing Git\nrepository; you can override this behavior by using `cargo new --vcs=git`.\n\n> Note: Git is a common version control system. You can change `cargo new` to\n> use a different version control system or no version control system by using\n> the `--vcs` flag. Run `cargo new --help` to see the available options.\n\nOpen *Cargo.toml* in your text editor of choice. It should look similar to the\ncode in Listing 1-2.\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[package]\nname = \"hello_cargo\"\nversion = \"0.1.0\"\nauthors = [\"Your Name <you@example.com>\"]\nedition = \"2018\"\n\n[dependencies]\n```\n\n<span class=\"caption\">Listing 1-2: Contents of *Cargo.toml* generated by `cargo\nnew`</span>\n\nThis file is in the [*TOML*][toml]<!-- ignore --> (*Tom’s Obvious, Minimal\nLanguage*) format, which is Cargo’s configuration format.\n\n[toml]: https://github.com/toml-lang/toml\n\nThe first line, `[package]`, is a section heading that indicates that the\nfollowing statements are configuring a package. As we add more information to\nthis file, we’ll add other sections.\n\nThe next four lines set the configuration information Cargo needs to compile\nyour program: the name, the version, who wrote it, and the edition of Rust to\nuse. Cargo gets your name and email information from your environment, so if\nthat information is not correct, fix the information now and then save the\nfile. We’ll talk about the `edition` key in Appendix E.\n\nThe last line, `[dependencies]`, is the start of a section for you to list any\nof your project’s dependencies. In Rust, packages of code are referred to as\n*crates*. We won’t need any other crates for this project, but we will in the\nfirst project in Chapter 2, so we’ll use this dependencies section then.\n\nNow open *src/main.rs* and take a look:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nCargo has generated a “Hello, world!” program for you, just like the one we\nwrote in Listing 1-1! So far, the differences between our previous project and\nthe project Cargo generates are that Cargo placed the code in the *src*\ndirectory, and we have a *Cargo.toml* configuration file in the top directory.\n\nCargo expects your source files to live inside the *src* directory. The\ntop-level project directory is just for README files, license information,\nconfiguration files, and anything else not related to your code. Using Cargo\nhelps you organize your projects. There’s a place for everything, and\neverything is in its place.\n\nIf you started a project that doesn’t use Cargo, as we did with the “Hello,\nworld!” project, you can convert it to a project that does use Cargo. Move the\nproject code into the *src* directory and create an appropriate *Cargo.toml*\nfile.\n\n### Building and Running a Cargo Project\n\nNow let’s look at what’s different when we build and run the “Hello, world!”\nprogram with Cargo! From your *hello_cargo* directory, build your project by\nentering the following command:\n\n```text\n$ cargo build\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.85 secs\n```\n\nThis command creates an executable file in *target/debug/hello_cargo* (or\n*target\\debug\\hello_cargo.exe* on Windows) rather than in your current\ndirectory. You can run the executable with this command:\n\n```text\n$ ./target/debug/hello_cargo # or .\\target\\debug\\hello_cargo.exe on Windows\nHello, world!\n```\n\nIf all goes well, `Hello, world!` should print to the terminal. Running `cargo\nbuild` for the first time also causes Cargo to create a new file at the top\nlevel: *Cargo.lock*. This file keeps track of the exact versions of\ndependencies in your project. This project doesn’t have dependencies, so the\nfile is a bit sparse. You won’t ever need to change this file manually; Cargo\nmanages its contents for you.\n\nWe just built a project with `cargo build` and ran it with\n`./target/debug/hello_cargo`, but we can also use `cargo run` to compile the\ncode and then run the resulting executable all in one command:\n\n```text\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n```\n\nNotice that this time we didn’t see output indicating that Cargo was compiling\n`hello_cargo`. Cargo figured out that the files hadn’t changed, so it just ran\nthe binary. If you had modified your source code, Cargo would have rebuilt the\nproject before running it, and you would have seen this output:\n\n```text\n$ cargo run\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.33 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n```\n\nCargo also provides a command called `cargo check`. This command quickly checks\nyour code to make sure it compiles but doesn’t produce an executable:\n\n```text\n$ cargo check\n   Checking hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n```\n\nWhy would you not want an executable? Often, `cargo check` is much faster than\n`cargo build`, because it skips the step of producing an executable. If you’re\ncontinually checking your work while writing the code, using `cargo check` will\nspeed up the process! As such, many Rustaceans run `cargo check` periodically\nas they write their program to make sure it compiles. Then they run `cargo\nbuild` when they’re ready to use the executable.\n\nLet’s recap what we’ve learned so far about Cargo:\n\n* We can build a project using `cargo build` or `cargo check`.\n* We can build and run a project in one step using `cargo run`.\n* Instead of saving the result of the build in the same directory as our code,\n  Cargo stores it in the *target/debug* directory.\n\nAn additional advantage of using Cargo is that the commands are the same no\nmatter which operating system you’re working on. So, at this point, we’ll no\nlonger provide specific instructions for Linux and macOS versus Windows.\n\n### Building for Release\n\nWhen your project is finally ready for release, you can use `cargo build\n--release` to compile it with optimizations. This command will create an\nexecutable in *target/release* instead of *target/debug*. The optimizations\nmake your Rust code run faster, but turning them on lengthens the time it takes\nfor your program to compile. This is why there are two different profiles: one\nfor development, when you want to rebuild quickly and often, and another for\nbuilding the final program you’ll give to a user that won’t be rebuilt\nrepeatedly and that will run as fast as possible. If you’re benchmarking your\ncode’s running time, be sure to run `cargo build --release` and benchmark with\nthe executable in *target/release*.\n\n### Cargo as Convention\n\nWith simple projects, Cargo doesn’t provide a lot of value over just using\n`rustc`, but it will prove its worth as your programs become more intricate.\nWith complex projects composed of multiple crates, it’s much easier to let\nCargo coordinate the build.\n\nEven though the `hello_cargo` project is simple, it now uses much of the real\ntooling you’ll use in the rest of your Rust career. In fact, to work on any\nexisting projects, you can use the following commands to check out the code\nusing Git, change to that project’s directory, and build:\n\n```text\n$ git clone someurl.com/someproject\n$ cd someproject\n$ cargo build\n```\n\nFor more information about Cargo, check out [its documentation].\n\n[its documentation]: https://doc.rust-lang.org/cargo/\n\n## Summary\n\nYou’re already off to a great start on your Rust journey! In this chapter,\nyou’ve learned how to:\n\n* Install the latest stable version of Rust using `rustup`\n* Update to a newer Rust version\n* Open locally installed documentation\n* Write and run a “Hello, world!” program using `rustc` directly\n* Create and run a new project using the conventions of Cargo\n\nThis is a great time to build a more substantial program to get used to reading\nand writing Rust code. So, in Chapter 2, we’ll build a guessing game program.\nIf you would rather start by learning how common programming concepts work in\nRust, see Chapter 3 and then return to Chapter 2.\n\n[installation]: ch01-01-installation.html#installation\n", number: Some(SectionNumber([1, 3])), sub_items: [], path: "ch01-03-hello-cargo.md", parent_names: ["Getting Started"] })], path: "ch01-00-getting-started.md", parent_names: [] }), Chapter(Chapter { name: "Programming a Guessing Game", content: "# Programming a Guessing Game\n\nLet’s jump into Rust by working through a hands-on project together! This\nchapter introduces you to a few common Rust concepts by showing you how to use\nthem in a real program. You’ll learn about `let`, `match`, methods, associated\nfunctions, using external crates, and more! The following chapters will explore\nthese ideas in more detail. In this chapter, you’ll practice the fundamentals.\n\nWe’ll implement a classic beginner programming problem: a guessing game. Here’s\nhow it works: the program will generate a random integer between 1 and 100. It\nwill then prompt the player to enter a guess. After a guess is entered, the\nprogram will indicate whether the guess is too low or too high. If the guess is\ncorrect, the game will print a congratulatory message and exit.\n\n## Setting Up a New Project\n\nTo set up a new project, go to the *projects* directory that you created in\nChapter 1 and make a new project using Cargo, like so:\n\n```text\n$ cargo new guessing_game\n$ cd guessing_game\n```\n\nThe first command, `cargo new`, takes the name of the project (`guessing_game`)\nas the first argument. The second command changes to the new project’s\ndirectory.\n\nLook at the generated *Cargo.toml* file:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[package]\nname = \"guessing_game\"\nversion = \"0.1.0\"\nauthors = [\"Your Name <you@example.com>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n```\n\nIf the author information that Cargo obtained from your environment is not\ncorrect, fix that in the file and save it again.\n\nAs you saw in Chapter 1, `cargo new` generates a “Hello, world!” program for\nyou. Check out the *src/main.rs* file:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nNow let’s compile this “Hello, world!” program and run it in the same step\nusing the `cargo run` command:\n\n```text\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nHello, world!\n```\n\nThe `run` command comes in handy when you need to rapidly iterate on a project,\nas we’ll do in this game, quickly testing each iteration before moving on to\nthe next one.\n\nReopen the *src/main.rs* file. You’ll be writing all the code in this file.\n\n## Processing a Guess\n\nThe first part of the guessing game program will ask for user input, process\nthat input, and check that the input is in the expected form. To start, we’ll\nallow the player to input a guess. Enter the code in Listing 2-1 into\n*src/main.rs*.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\n<span class=\"caption\">Listing 2-1: Code that gets a guess from the user and\nprints it</span>\n\nThis code contains a lot of information, so let’s go over it line by line. To\nobtain user input and then print the result as output, we need to bring the\n`io` (input/output) library into scope. The `io` library comes from the\nstandard library (which is known as `std`):\n\n```rust,ignore\nuse std::io;\n# \n# fn main() {\n#     println!(\"Guess the number!\");\n# \n#     println!(\"Please input your guess.\");\n# \n#     let mut guess = String::new();\n# \n#     io::stdin()\n#         .read_line(&mut guess)\n#         .expect(\"Failed to read line\");\n# \n#     println!(\"You guessed: {}\", guess);\n# }\n```\n\nBy default, Rust brings only a few types into the scope of every program in\n[the *prelude*][prelude]<!-- ignore -->. If a type you want to use isn’t in the\nprelude, you have to bring that type into scope explicitly with a `use`\nstatement. Using the `std::io` library provides you with a number of useful\nfeatures, including the ability to accept user input.\n\n[prelude]: ../std/prelude/index.html\n\nAs you saw in Chapter 1, the `main` function is the entry point into the\nprogram:\n\n```rust,ignore\n# use std::io;\n# \nfn main() {\n#     println!(\"Guess the number!\");\n# \n#     println!(\"Please input your guess.\");\n# \n#     let mut guess = String::new();\n# \n#     io::stdin()\n#         .read_line(&mut guess)\n#         .expect(\"Failed to read line\");\n# \n#     println!(\"You guessed: {}\", guess);\n# }\n```\n\nThe `fn` syntax declares a new function, the parentheses, `()`, indicate there\nare no parameters, and the curly bracket, `{`, starts the body of the function.\n\nAs you also learned in Chapter 1, `println!` is a macro that prints a string to\nthe screen:\n\n```rust,ignore\n# use std::io;\n# \n# fn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n# \n#     let mut guess = String::new();\n# \n#     io::stdin()\n#         .read_line(&mut guess)\n#         .expect(\"Failed to read line\");\n# \n#     println!(\"You guessed: {}\", guess);\n# }\n```\n\nThis code is printing a prompt stating what the game is and requesting input\nfrom the user.\n\n### Storing Values with Variables\n\nNext, we’ll create a place to store the user input, like this:\n\n```rust,ignore\n# use std::io;\n# \n# fn main() {\n#     println!(\"Guess the number!\");\n# \n#     println!(\"Please input your guess.\");\n# \n    let mut guess = String::new();\n# \n#     io::stdin()\n#         .read_line(&mut guess)\n#         .expect(\"Failed to read line\");\n# \n#     println!(\"You guessed: {}\", guess);\n# }\n```\n\nNow the program is getting interesting! There’s a lot going on in this little\nline. Notice that this is a `let` statement, which is used to create a\n*variable*. Here’s another example:\n\n```rust,ignore\nlet foo = bar;\n```\n\nThis line creates a new variable named `foo` and binds it to the value of the\n`bar` variable. In Rust, variables are immutable by default. We’ll be\ndiscussing this concept in detail in the [“Variables and\nMutability”][variables-and-mutability]<!-- ignore --> section in Chapter 3.\nThe following example shows how to use `mut` before the variable name to make\na variable mutable:\n\n```rust,ignore\nlet foo = 5; // immutable\nlet mut bar = 5; // mutable\n```\n\n> Note: The `//` syntax starts a comment that continues until the end of the\n> line. Rust ignores everything in comments, which are discussed in more detail\n> in Chapter 3.\n\nLet’s return to the guessing game program. You now know that `let mut guess`\nwill introduce a mutable variable named `guess`. On the other side of the equal\nsign (`=`) is the value that `guess` is bound to, which is the result of\ncalling `String::new`, a function that returns a new instance of a `String`.\n[`String`][string]<!-- ignore --> is a string type provided by the standard\nlibrary that is a growable, UTF-8 encoded bit of text.\n\n[string]: ../std/string/struct.String.html\n\nThe `::` syntax in the `::new` line indicates that `new` is an *associated\nfunction* of the `String` type. An associated function is implemented on a type,\nin this case `String`, rather than on a particular instance of a `String`. Some\nlanguages call this a *static method*.\n\nThis `new` function creates a new, empty string. You’ll find a `new` function\non many types, because it’s a common name for a function that makes a new value\nof some kind.\n\nTo summarize, the `let mut guess = String::new();` line has created a mutable\nvariable that is currently bound to a new, empty instance of a `String`. Whew!\n\nRecall that we included the input/output functionality from the standard\nlibrary with `use std::io;` on the first line of the program. Now we’ll call\nthe `stdin` function from the `io` module:\n\n```rust,ignore\n# use std::io;\n# \n# fn main() {\n#     println!(\"Guess the number!\");\n# \n#     println!(\"Please input your guess.\");\n# \n#     let mut guess = String::new();\n# \n    io::stdin()\n        .read_line(&mut guess)\n#         .expect(\"Failed to read line\");\n# \n#     println!(\"You guessed: {}\", guess);\n# }\n```\n\nIf we hadn’t put the `use std::io` line at the beginning of the program, we\ncould have written this function call as `std::io::stdin`. The `stdin` function\nreturns an instance of [`std::io::Stdin`][iostdin]<!-- ignore -->, which is a\ntype that represents a handle to the standard input for your terminal.\n\n[iostdin]: ../std/io/struct.Stdin.html\n\nThe next part of the code, `.read_line(&mut guess)`, calls the\n[`read_line`][read_line]<!-- ignore --> method on the standard input handle to\nget input from the user. We’re also passing one argument to `read_line`: `&mut\nguess`.\n\n[read_line]: ../std/io/struct.Stdin.html#method.read_line\n\nThe job of `read_line` is to take whatever the user types into standard input\nand place that into a string, so it takes that string as an argument. The\nstring argument needs to be mutable so the method can change the string’s\ncontent by adding the user input.\n\nThe `&` indicates that this argument is a *reference*, which gives you a way to\nlet multiple parts of your code access one piece of data without needing to\ncopy that data into memory multiple times. References are a complex feature,\nand one of Rust’s major advantages is how safe and easy it is to use\nreferences. You don’t need to know a lot of those details to finish this\nprogram. For now, all you need to know is that like variables, references are\nimmutable by default. Hence, you need to write `&mut guess` rather than\n`&guess` to make it mutable. (Chapter 4 will explain references more\nthoroughly.)\n\n### Handling Potential Failure with the `Result` Type\n\nWe’re still working on this line of code. Although we’re now discussing a third\nline of text, it’s still part of a single logical line of code. The next part\nis this method:\n\n```rust,ignore\n# use std::io;\n# \n# fn main() {\n#     println!(\"Guess the number!\");\n# \n#     println!(\"Please input your guess.\");\n# \n#     let mut guess = String::new();\n# \n#     io::stdin()\n#         .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n# \n#     println!(\"You guessed: {}\", guess);\n# }\n```\n\nWhen you call a method with the `.foo()` syntax, it’s often wise to introduce a\nnewline and other whitespace to help break up long lines. We could have\nwritten this code as:\n\n```rust,ignore\nio::stdin().read_line(&mut guess).expect(\"Failed to read line\");\n```\n\nHowever, one long line is difficult to read, so it’s best to divide it. Now\nlet’s discuss what this line does.\n\nAs mentioned earlier, `read_line` puts what the user types into the string\nwe’re passing it, but it also returns a value—in this case, an\n[`io::Result`][ioresult]<!-- ignore -->. Rust has a number of types named\n`Result` in its standard library: a generic [`Result`][result]<!-- ignore -->\nas well as specific versions for submodules, such as `io::Result`.\n\n[ioresult]: ../std/io/type.Result.html\n[result]: ../std/result/enum.Result.html\n\nThe `Result` types are [*enumerations*][enums]<!-- ignore -->, often referred\nto as *enums*. An enumeration is a type that can have a fixed set of values,\nand those values are called the enum’s *variants*. Chapter 6 will cover enums\nin more detail.\n\n[enums]: ch06-00-enums.html\n\nFor `Result`, the variants are `Ok` or `Err`. The `Ok` variant indicates the\noperation was successful, and inside `Ok` is the successfully generated value.\nThe `Err` variant means the operation failed, and `Err` contains information\nabout how or why the operation failed.\n\nThe purpose of these `Result` types is to encode error-handling information.\nValues of the `Result` type, like values of any type, have methods defined on\nthem. An instance of `io::Result` has an [`expect` method][expect]<!-- ignore\n--> that you can call. If this instance of `io::Result` is an `Err` value,\n`expect` will cause the program to crash and display the message that you\npassed as an argument to `expect`. If the `read_line` method returns an `Err`,\nit would likely be the result of an error coming from the underlying operating\nsystem. If this instance of `io::Result` is an `Ok` value, `expect` will take\nthe return value that `Ok` is holding and return just that value to you so you\ncan use it. In this case, that value is the number of bytes in what the user\nentered into standard input.\n\n[expect]: ../std/result/enum.Result.html#method.expect\n\nIf you don’t call `expect`, the program will compile, but you’ll get a warning:\n\n```text\n$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nwarning: unused `std::result::Result` that must be used\n  --> src/main.rs:10:5\n   |\n10 |     io::stdin().read_line(&mut guess);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_must_use)]` on by default\n   = note: this `Result` may be an `Err` variant, which should be handled\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.59s\n```\n\nRust warns that you haven’t used the `Result` value returned from `read_line`,\nindicating that the program hasn’t handled a possible error.\n\nThe right way to suppress the warning is to actually write error handling, but\nbecause you just want to crash this program when a problem occurs, you can use\n`expect`. You’ll learn about recovering from errors in Chapter 9.\n\n### Printing Values with `println!` Placeholders\n\nAside from the closing curly bracket, there’s only one more line to discuss in\nthe code added so far, which is the following:\n\n```rust,ignore\n# use std::io;\n# \n# fn main() {\n#     println!(\"Guess the number!\");\n# \n#     println!(\"Please input your guess.\");\n# \n#     let mut guess = String::new();\n# \n#     io::stdin()\n#         .read_line(&mut guess)\n#         .expect(\"Failed to read line\");\n# \n    println!(\"You guessed: {}\", guess);\n# }\n```\n\nThis line prints the string we saved the user’s input in. The set of curly\nbrackets, `{}`, is a placeholder: think of `{}` as little crab pincers that\nhold a value in place. You can print more than one value using curly brackets:\nthe first set of curly brackets holds the first value listed after the format\nstring, the second set holds the second value, and so on. Printing multiple\nvalues in one call to `println!` would look like this:\n\n```rust\nlet x = 5;\nlet y = 10;\n\nprintln!(\"x = {} and y = {}\", x, y);\n```\n\nThis code would print `x = 5 and y = 10`.\n\n### Testing the First Part\n\nLet’s test the first part of the guessing game. Run it using `cargo run`:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-01/\ncargo clean\ncargo run\ninput 6 -->\n\n```text\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.44s\n     Running `target/debug/guessing_game`\nGuess the number!\nPlease input your guess.\n6\nYou guessed: 6\n```\n\nAt this point, the first part of the game is done: we’re getting input from the\nkeyboard and then printing it.\n\n## Generating a Secret Number\n\nNext, we need to generate a secret number that the user will try to guess. The\nsecret number should be different every time so the game is fun to play more\nthan once. Let’s use a random number between 1 and 100 so the game isn’t too\ndifficult. Rust doesn’t yet include random number functionality in its standard\nlibrary. However, the Rust team does provide a [`rand` crate][randcrate].\n\n[randcrate]: https://crates.io/crates/rand\n\n### Using a Crate to Get More Functionality\n\nRemember that a crate is a collection of Rust source code files.\nThe project we’ve been building is a *binary crate*, which is an executable.\nThe `rand` crate is a *library crate*, which contains code intended to be\nused in other programs.\n\nCargo’s use of external crates is where it really shines. Before we can write\ncode that uses `rand`, we need to modify the *Cargo.toml* file to include the\n`rand` crate as a dependency. Open that file now and add the following line to\nthe bottom beneath the `[dependencies]` section header that Cargo created for\nyou:\n\n<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch07-04-bringing-paths-into-scope-with-the-use-keyword.md\n* ch14-03-cargo-workspaces.md\n-->\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[dependencies]\nrand = \"0.5.5\"\n```\n\nIn the *Cargo.toml* file, everything that follows a header is part of a section\nthat continues until another section starts. The `[dependencies]` section is\nwhere you tell Cargo which external crates your project depends on and which\nversions of those crates you require. In this case, we’ll specify the `rand`\ncrate with the semantic version specifier `0.5.5`. Cargo understands [Semantic\nVersioning][semver]<!-- ignore --> (sometimes called *SemVer*), which is a\nstandard for writing version numbers. The number `0.5.5` is actually shorthand\nfor `^0.5.5`, which means “any version that has a public API compatible with\nversion 0.5.5.”\n\n[semver]: http://semver.org\n\nNow, without changing any of the code, let’s build the project, as shown in\nListing 2-2.\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ncargo clean\ncargo build -->\n\n```text\n$ cargo build\n    Updating crates.io index\n  Downloaded rand v0.5.5\n  Downloaded libc v0.2.62\n  Downloaded rand_core v0.2.2\n  Downloaded rand_core v0.3.1\n  Downloaded rand_core v0.4.2\n   Compiling rand_core v0.4.2\n   Compiling libc v0.2.62\n   Compiling rand_core v0.3.1\n   Compiling rand_core v0.2.2\n   Compiling rand v0.5.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n```\n\n<span class=\"caption\">Listing 2-2: The output from running `cargo build` after\nadding the rand crate as a dependency</span>\n\nYou may see different version numbers (but they will all be compatible with\nthe code, thanks to SemVer!), and the lines may be in a different order.\n\nNow that we have an external dependency, Cargo fetches the latest versions of\neverything from the *registry*, which is a copy of data from\n[Crates.io][cratesio]. Crates.io is where people in the Rust ecosystem post\ntheir open source Rust projects for others to use.\n\n[cratesio]: https://crates.io/\n\nAfter updating the registry, Cargo checks the `[dependencies]` section and\ndownloads any crates you don’t have yet. In this case, although we only listed\n`rand` as a dependency, Cargo also grabbed `libc` and `rand_core`, because\n`rand` depends on those to work. After downloading the crates, Rust compiles\nthem and then compiles the project with the dependencies available.\n\nIf you immediately run `cargo build` again without making any changes, you\nwon’t get any output aside from the `Finished` line. Cargo knows it has already\ndownloaded and compiled the dependencies, and you haven’t changed anything\nabout them in your *Cargo.toml* file. Cargo also knows that you haven’t changed\nanything about your code, so it doesn’t recompile that either. With nothing to\ndo, it simply exits.\n\nIf you open up the *src/main.rs* file, make a trivial change, and then save it\nand build again, you’ll only see two lines of output:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ntouch src/main.rs\ncargo build -->\n\n```text\n$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs\n```\n\nThese lines show Cargo only updates the build with your tiny change to the\n*src/main.rs* file. Your dependencies haven’t changed, so Cargo knows it can\nreuse what it has already downloaded and compiled for those. It just rebuilds\nyour part of the code.\n\n#### Ensuring Reproducible Builds with the *Cargo.lock* File\n\nCargo has a mechanism that ensures you can rebuild the same artifact every time\nyou or anyone else builds your code: Cargo will use only the versions of the\ndependencies you specified until you indicate otherwise. For example, what\nhappens if next week version 0.5.6 of the `rand` crate comes out and\ncontains an important bug fix but also contains a regression that will break\nyour code?\n\nThe answer to this problem is the *Cargo.lock* file, which was created the\nfirst time you ran `cargo build` and is now in your *guessing_game* directory.\nWhen you build a project for the first time, Cargo figures out all the\nversions of the dependencies that fit the criteria and then writes them to\nthe *Cargo.lock* file. When you build your project in the future, Cargo will\nsee that the *Cargo.lock* file exists and use the versions specified there\nrather than doing all the work of figuring out versions again. This lets you\nhave a reproducible build automatically. In other words, your project will\nremain at `0.5.5` until you explicitly upgrade, thanks to the *Cargo.lock*\nfile.\n\n#### Updating a Crate to Get a New Version\n\nWhen you *do* want to update a crate, Cargo provides another command, `update`,\nwhich will ignore the *Cargo.lock* file and figure out all the latest versions\nthat fit your specifications in *Cargo.toml*. If that works, Cargo will write\nthose versions to the *Cargo.lock* file.\n\nBut by default, Cargo will only look for versions greater than `0.5.5` and less\nthan `0.6.0`. If the `rand` crate has released two new versions, `0.5.6` and\n`0.6.0`, you would see the following if you ran `cargo update`:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ncargo update\nassuming there is a new 0.5.x version of rand; otherwise use another update\nas a guide to creating the hypothetical output shown here -->\n\n```text\n$ cargo update\n    Updating crates.io index\n    Updating rand v0.5.5 -> v0.5.6\n```\n\nAt this point, you would also notice a change in your *Cargo.lock* file noting\nthat the version of the `rand` crate you are now using is `0.5.6`.\n\nIf you wanted to use `rand` version `0.6.0` or any version in the `0.6.x`\nseries, you’d have to update the *Cargo.toml* file to look like this instead:\n\n```toml\n[dependencies]\nrand = \"0.6.0\"\n```\n\nThe next time you run `cargo build`, Cargo will update the registry of crates\navailable and reevaluate your `rand` requirements according to the new version\nyou have specified.\n\nThere’s a lot more to say about [Cargo][doccargo]<!-- ignore --> and [its\necosystem][doccratesio]<!-- ignore --> which we’ll discuss in Chapter 14, but\nfor now, that’s all you need to know. Cargo makes it very easy to reuse\nlibraries, so Rustaceans are able to write smaller projects that are assembled\nfrom a number of packages.\n\n[doccargo]: http://doc.crates.io\n[doccratesio]: http://doc.crates.io/crates-io.html\n\n### Generating a Random Number\n\nNow that you’ve added the `rand` crate to *Cargo.toml*, let’s start using\n`rand`. The next step is to update *src/main.rs*, as shown in Listing 2-3.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\nuse std::io;\nuse rand::Rng;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1, 101);\n\n    println!(\"The secret number is: {}\", secret_number);\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\n<span class=\"caption\">Listing 2-3: Adding code to generate a random\nnumber</span>\n\nFirst, we add a `use` line: `use rand::Rng`. The `Rng` trait defines\nmethods that random number generators implement, and this trait must be in\nscope for us to use those methods. Chapter 10 will cover traits in detail.\n\nNext, we’re adding two lines in the middle. The `rand::thread_rng` function\nwill give us the particular random number generator that we’re going to use:\none that is local to the current thread of execution and seeded by the\noperating system. Then we call the `gen_range` method on the random number\ngenerator. This method is defined by the `Rng` trait that we brought into\nscope with the `use rand::Rng` statement. The `gen_range` method takes two\nnumbers as arguments and generates a random number between them. It’s inclusive\non the lower bound but exclusive on the upper bound, so we need to specify `1`\nand `101` to request a number between 1 and 100.\n\n> Note: You won’t just know which traits to use and which methods and functions\n> to call from a crate. Instructions for using a crate are in each crate’s\n> documentation. Another neat feature of Cargo is that you can run the `cargo\n> doc --open` command, which will build documentation provided by all of your\n> dependencies locally and open it in your browser. If you’re interested in\n> other functionality in the `rand` crate, for example, run `cargo doc --open`\n> and click `rand` in the sidebar on the left.\n\nThe second line that we added to the middle of the code prints the secret\nnumber. This is useful while we’re developing the program to be able to test\nit, but we’ll delete it from the final version. It’s not much of a game if the\nprogram prints the answer as soon as it starts!\n\nTry running the program a few times:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-03/\ncargo run\n4\ncargo run\n5\n-->\n\n```text\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 7\nPlease input your guess.\n4\nYou guessed: 4\n\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.02s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 83\nPlease input your guess.\n5\nYou guessed: 5\n```\n\nYou should get different random numbers, and they should all be numbers between\n1 and 100. Great job!\n\n## Comparing the Guess to the Secret Number\n\nNow that we have user input and a random number, we can compare them. That step\nis shown in Listing 2-4. Note that this code won’t compile quite yet, as we\nwill explain.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    // --snip--\n#     println!(\"Guess the number!\");\n# \n#     let secret_number = rand::thread_rng().gen_range(1, 101);\n# \n#     println!(\"The secret number is: {}\", secret_number);\n# \n#     println!(\"Please input your guess.\");\n# \n#     let mut guess = String::new();\n# \n#     io::stdin()\n#         .read_line(&mut guess)\n#         .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!(\"Too small!\"),\n        Ordering::Greater => println!(\"Too big!\"),\n        Ordering::Equal => println!(\"You win!\"),\n    }\n}\n```\n\n<span class=\"caption\">Listing 2-4: Handling the possible return values of\ncomparing two numbers</span>\n\nThe first new bit here is another `use` statement, bringing a type called\n`std::cmp::Ordering` into scope from the standard library. Like `Result`,\n`Ordering` is another enum, but the variants for `Ordering` are `Less`,\n`Greater`, and `Equal`. These are the three outcomes that are possible when you\ncompare two values.\n\nThen we add five new lines at the bottom that use the `Ordering` type. The\n`cmp` method compares two values and can be called on anything that can be\ncompared. It takes a reference to whatever you want to compare with: here it’s\ncomparing the `guess` to the `secret_number`. Then it returns a variant of the\n`Ordering` enum we brought into scope with the `use` statement. We use a\n[`match`][match]<!-- ignore --> expression to decide what to do next based on\nwhich variant of `Ordering` was returned from the call to `cmp` with the values\nin `guess` and `secret_number`.\n\n[match]: ch06-02-match.html\n\nA `match` expression is made up of *arms*. An arm consists of a *pattern* and\nthe code that should be run if the value given to the beginning of the `match`\nexpression fits that arm’s pattern. Rust takes the value given to `match` and\nlooks through each arm’s pattern in turn. The `match` construct and patterns\nare powerful features in Rust that let you express a variety of situations your\ncode might encounter and make sure that you handle them all. These features\nwill be covered in detail in Chapter 6 and Chapter 18, respectively.\n\nLet’s walk through an example of what would happen with the `match` expression\nused here. Say that the user has guessed 50 and the randomly generated secret\nnumber this time is 38. When the code compares 50 to 38, the `cmp` method will\nreturn `Ordering::Greater`, because 50 is greater than 38. The `match`\nexpression gets the `Ordering::Greater` value and starts checking each arm’s\npattern. It looks at the first arm’s pattern, `Ordering::Less`, and sees that\nthe value `Ordering::Greater` does not match `Ordering::Less`, so it ignores\nthe code in that arm and moves to the next arm. The next arm’s pattern,\n`Ordering::Greater`, *does* match `Ordering::Greater`! The associated code in\nthat arm will execute and print `Too big!` to the screen. The `match`\nexpression ends because it has no need to look at the last arm in this scenario.\n\nHowever, the code in Listing 2-4 won’t compile yet. Let’s try it:\n\n```text\n$ cargo build\n   Compiling libc v0.2.51\n   Compiling rand_core v0.4.0\n   Compiling rand_core v0.3.1\n   Compiling rand v0.5.6\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nerror[E0308]: mismatched types\n  --> src/main.rs:22:21\n   |\n22 |     match guess.cmp(&secret_number) {\n   |                     ^^^^^^^^^^^^^^ expected struct `std::string::String`, found integer\n   |\n   = note: expected reference `&std::string::String`\n              found reference `&{integer}`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `guessing_game`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe core of the error states that there are *mismatched types*. Rust has a\nstrong, static type system. However, it also has type inference. When we wrote\n`let mut guess = String::new()`, Rust was able to infer that `guess` should be\na `String` and didn’t make us write the type. The `secret_number`, on the other\nhand, is a number type. A few number types can have a value between 1 and 100:\n`i32`, a 32-bit number; `u32`, an unsigned 32-bit number; `i64`, a 64-bit\nnumber; as well as others. Rust defaults to an `i32`, which is the type of\n`secret_number` unless you add type information elsewhere that would cause Rust\nto infer a different numerical type. The reason for the error is that Rust\ncannot compare a string and a number type.\n\nUltimately, we want to convert the `String` the program reads as input into a\nreal number type so we can compare it numerically to the secret number. We can\ndo that by adding another line to the `main` function body:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use rand::Rng;\n# use std::cmp::Ordering;\n# use std::io;\n# \n# fn main() {\n#     println!(\"Guess the number!\");\n# \n#     let secret_number = rand::thread_rng().gen_range(1, 101);\n# \n#     println!(\"The secret number is: {}\", secret_number);\n# \n#     println!(\"Please input your guess.\");\n# \n    // --snip--\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n\n    println!(\"You guessed: {}\", guess);\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!(\"Too small!\"),\n        Ordering::Greater => println!(\"Too big!\"),\n        Ordering::Equal => println!(\"You win!\"),\n    }\n}\n```\n\nThe line is:\n\n```rust,ignore\nlet guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n```\n\nWe create a variable named `guess`. But wait, doesn’t the program already have\na variable named `guess`? It does, but Rust allows us to *shadow* the previous\nvalue of `guess` with a new one. This feature is often used in situations in\nwhich you want to convert a value from one type to another type. Shadowing lets\nus reuse the `guess` variable name rather than forcing us to create two unique\nvariables, such as `guess_str` and `guess` for example. (Chapter 3 covers\nshadowing in more detail.)\n\nWe bind `guess` to the expression `guess.trim().parse()`. The `guess` in the\nexpression refers to the original `guess` that was a `String` with the input in\nit. The `trim` method on a `String` instance will eliminate any whitespace at\nthe beginning and end. Although `u32` can contain only numerical characters,\nthe user must press <span class=\"keystroke\">enter</span> to satisfy\n`read_line`. When the user presses <span class=\"keystroke\">enter</span>, a\nnewline character is added to the string. For example, if the user types <span\nclass=\"keystroke\">5</span> and presses <span class=\"keystroke\">enter</span>,\n`guess` looks like this: `5\\n`. The `\\n` represents “newline,” the result of\npressing <span class=\"keystroke\">enter</span>. The `trim` method eliminates\n`\\n`, resulting in just `5`.\n\nThe [`parse` method on strings][parse]<!-- ignore --> parses a string into some\nkind of number. Because this method can parse a variety of number types, we\nneed to tell Rust the exact number type we want by using `let guess: u32`. The\ncolon (`:`) after `guess` tells Rust we’ll annotate the variable’s type. Rust\nhas a few built-in number types; the `u32` seen here is an unsigned, 32-bit\ninteger. It’s a good default choice for a small positive number. You’ll learn\nabout other number types in Chapter 3. Additionally, the `u32` annotation in\nthis example program and the comparison with `secret_number` means that Rust\nwill infer that `secret_number` should be a `u32` as well. So now the\ncomparison will be between two values of the same type!\n\n[parse]: ../std/primitive.str.html#method.parse\n\nThe call to `parse` could easily cause an error. If, for example, the string\ncontained `A👍%`, there would be no way to convert that to a number. Because it\nmight fail, the `parse` method returns a `Result` type, much as the `read_line`\nmethod does (discussed earlier in [“Handling Potential Failure with the\n`Result` Type”](#handling-potential-failure-with-the-result-type)<!-- ignore\n-->). We’ll treat this `Result` the same way by using the `expect` method\nagain. If `parse` returns an `Err` `Result` variant because it couldn’t create\na number from the string, the `expect` call will crash the game and print the\nmessage we give it. If `parse` can successfully convert the string to a number,\nit will return the `Ok` variant of `Result`, and `expect` will return the\nnumber that we want from the `Ok` value.\n\nLet’s run the program now!\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/no-listing-03-convert-string-to-number/\ncargo run\n  76\n-->\n\n```text\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 58\nPlease input your guess.\n  76\nYou guessed: 76\nToo big!\n```\n\nNice! Even though spaces were added before the guess, the program still figured\nout that the user guessed 76. Run the program a few times to verify the\ndifferent behavior with different kinds of input: guess the number correctly,\nguess a number that is too high, and guess a number that is too low.\n\nWe have most of the game working now, but the user can make only one guess.\nLet’s change that by adding a loop!\n\n## Allowing Multiple Guesses with Looping\n\nThe `loop` keyword creates an infinite loop. We’ll add that now to give users\nmore chances at guessing the number:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use rand::Rng;\n# use std::cmp::Ordering;\n# use std::io;\n# \n# fn main() {\n#     println!(\"Guess the number!\");\n# \n#     let secret_number = rand::thread_rng().gen_range(1, 101);\n# \n    // --snip--\n\n    println!(\"The secret number is: {}\", secret_number);\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        // --snip--\n\n# \n#         let mut guess = String::new();\n# \n#         io::stdin()\n#             .read_line(&mut guess)\n#             .expect(\"Failed to read line\");\n# \n#         let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n# \n#         println!(\"You guessed: {}\", guess);\n# \n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => println!(\"You win!\"),\n        }\n    }\n}\n```\n\nAs you can see, we’ve moved everything into a loop from the guess input prompt\nonward. Be sure to indent the lines inside the loop another four spaces each\nand run the program again. Notice that there is a new problem because the\nprogram is doing exactly what we told it to do: ask for another guess forever!\nIt doesn’t seem like the user can quit!\n\nThe user could always interrupt the program by using the keyboard shortcut <span\nclass=\"keystroke\">ctrl-c</span>. But there’s another way to escape this\ninsatiable monster, as mentioned in the `parse` discussion in [“Comparing the\nGuess to the Secret Number”](#comparing-the-guess-to-the-secret-number)<!--\nignore -->: if the user enters a non-number answer, the program will crash. The\nuser can take advantage of that in order to quit, as shown here:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/no-listing-04-looping/\ncargo run\n(too small guess)\n(too big guess)\n(correct guess)\nquit\n-->\n\n```text\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 59\nPlease input your guess.\n45\nYou guessed: 45\nToo small!\nPlease input your guess.\n60\nYou guessed: 60\nToo big!\nPlease input your guess.\n59\nYou guessed: 59\nYou win!\nPlease input your guess.\nquit\nthread \'main\' panicked at \'Please type a number!: ParseIntError { kind: InvalidDigit }\', src/libcore/result.rs:999:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n```\n\nTyping `quit` actually quits the game, but so will any other non-number input.\nHowever, this is suboptimal to say the least. We want the game to automatically\nstop when the correct number is guessed.\n\n### Quitting After a Correct Guess\n\nLet’s program the game to quit when the user wins by adding a `break` statement:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use rand::Rng;\n# use std::cmp::Ordering;\n# use std::io;\n# \n# fn main() {\n#     println!(\"Guess the number!\");\n# \n#     let secret_number = rand::thread_rng().gen_range(1, 101);\n# \n#     println!(\"The secret number is: {}\", secret_number);\n# \n#     loop {\n#         println!(\"Please input your guess.\");\n# \n#         let mut guess = String::new();\n# \n#         io::stdin()\n#             .read_line(&mut guess)\n#             .expect(\"Failed to read line\");\n# \n#         let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n# \n#         println!(\"You guessed: {}\", guess);\n# \n        // --snip--\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\nAdding the `break` line after `You win!` makes the program exit the loop when\nthe user guesses the secret number correctly. Exiting the loop also means\nexiting the program, because the loop is the last part of `main`.\n\n### Handling Invalid Input\n\nTo further refine the game’s behavior, rather than crashing the program when\nthe user inputs a non-number, let’s make the game ignore a non-number so the\nuser can continue guessing. We can do that by altering the line where `guess`\nis converted from a `String` to a `u32`, as shown in Listing 2-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use rand::Rng;\n# use std::cmp::Ordering;\n# use std::io;\n# \n# fn main() {\n#     println!(\"Guess the number!\");\n# \n#     let secret_number = rand::thread_rng().gen_range(1, 101);\n# \n#     println!(\"The secret number is: {}\", secret_number);\n# \n#     loop {\n#         println!(\"Please input your guess.\");\n# \n#         let mut guess = String::new();\n# \n        // --snip--\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!(\"You guessed: {}\", guess);\n\n        // --snip--\n# \n#         match guess.cmp(&secret_number) {\n#             Ordering::Less => println!(\"Too small!\"),\n#             Ordering::Greater => println!(\"Too big!\"),\n#             Ordering::Equal => {\n#                 println!(\"You win!\");\n#                 break;\n#             }\n#         }\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 2-5: Ignoring a non-number guess and asking for\nanother guess instead of crashing the program</span>\n\nSwitching from an `expect` call to a `match` expression is how you generally\nmove from crashing on an error to handling the error. Remember that `parse`\nreturns a `Result` type and `Result` is an enum that has the variants `Ok` or\n`Err`. We’re using a `match` expression here, as we did with the `Ordering`\nresult of the `cmp` method.\n\nIf `parse` is able to successfully turn the string into a number, it will\nreturn an `Ok` value that contains the resulting number. That `Ok` value will\nmatch the first arm’s pattern, and the `match` expression will just return the\n`num` value that `parse` produced and put inside the `Ok` value. That number\nwill end up right where we want it in the new `guess` variable we’re creating.\n\nIf `parse` is *not* able to turn the string into a number, it will return an\n`Err` value that contains more information about the error. The `Err` value\ndoes not match the `Ok(num)` pattern in the first `match` arm, but it does\nmatch the `Err(_)` pattern in the second arm. The underscore, `_`, is a\ncatchall value; in this example, we’re saying we want to match all `Err`\nvalues, no matter what information they have inside them. So the program will\nexecute the second arm’s code, `continue`, which tells the program to go to the\nnext iteration of the `loop` and ask for another guess. So, effectively, the\nprogram ignores all errors that `parse` might encounter!\n\nNow everything in the program should work as expected. Let’s try it:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-05/\ncargo run\n(too small guess)\n(too big guess)\nfoo\n(correct guess)\n-->\n\n```text\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 61\nPlease input your guess.\n10\nYou guessed: 10\nToo small!\nPlease input your guess.\n99\nYou guessed: 99\nToo big!\nPlease input your guess.\nfoo\nPlease input your guess.\n61\nYou guessed: 61\nYou win!\n```\n\nAwesome! With one tiny final tweak, we will finish the guessing game. Recall\nthat the program is still printing the secret number. That worked well for\ntesting, but it ruins the game. Let’s delete the `println!` that outputs the\nsecret number. Listing 2-6 shows the final code.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1, 101);\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!(\"You guessed: {}\", guess);\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\n<span class=\"caption\">Listing 2-6: Complete guessing game code</span>\n\n## Summary\n\nAt this point, you’ve successfully built the guessing game. Congratulations!\n\nThis project was a hands-on way to introduce you to many new Rust concepts:\n`let`, `match`, methods, associated functions, the use of external crates, and\nmore. In the next few chapters, you’ll learn about these concepts in more\ndetail. Chapter 3 covers concepts that most programming languages have, such as\nvariables, data types, and functions, and shows how to use them in Rust.\nChapter 4 explores ownership, a feature that makes Rust different from other\nlanguages. Chapter 5 discusses structs and method syntax, and Chapter 6\nexplains how enums work.\n\n[variables-and-mutability]:\nch03-01-variables-and-mutability.html#variables-and-mutability\n", number: Some(SectionNumber([2])), sub_items: [], path: "ch02-00-guessing-game-tutorial.md", parent_names: [] }), Chapter(Chapter { name: "Common Programming Concepts", content: "# Common Programming Concepts\n\nThis chapter covers concepts that appear in almost every programming language\nand how they work in Rust. Many programming languages have much in common at\ntheir core. None of the concepts presented in this chapter are unique to Rust,\nbut we’ll discuss them in the context of Rust and explain the conventions\naround using these concepts.\n\nSpecifically, you’ll learn about variables, basic types, functions, comments,\nand control flow. These foundations will be in every Rust program, and learning\nthem early will give you a strong core to start from.\n\n> #### Keywords\n>\n> The Rust language has a set of *keywords* that are reserved for use by\n> the language only, much as in other languages. Keep in mind that you cannot\n> use these words as names of variables or functions. Most of the keywords have\n> special meanings, and you’ll be using them to do various tasks in your Rust\n> programs; a few have no current functionality associated with them but have\n> been reserved for functionality that might be added to Rust in the future. You\n> can find a list of the keywords in [Appendix A][appendix_a].\n\n[appendix_a]: appendix-01-keywords.md\n", number: Some(SectionNumber([3])), sub_items: [Chapter(Chapter { name: "Variables and Mutability", content: "## Variables and Mutability\n\nAs mentioned in Chapter 2, by default variables are immutable. This is one of\nmany nudges Rust gives you to write your code in a way that takes advantage of\nthe safety and easy concurrency that Rust offers. However, you still have the\noption to make your variables mutable. Let’s explore how and why Rust\nencourages you to favor immutability and why sometimes you might want to opt\nout.\n\nWhen a variable is immutable, once a value is bound to a name, you can’t change\nthat value. To illustrate this, let’s generate a new project called *variables*\nin your *projects* directory by using `cargo new variables`.\n\nThen, in your new *variables* directory, open *src/main.rs* and replace its\ncode with the following code that won’t compile just yet:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn main() {\n    let x = 5;\n    println!(\"The value of x is: {}\", x);\n    x = 6;\n    println!(\"The value of x is: {}\", x);\n}\n```\n\nSave and run the program using `cargo run`. You should receive an error\nmessage, as shown in this output:\n\n```text\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\nerror[E0384]: cannot assign twice to immutable variable `x`\n --> src/main.rs:4:5\n  |\n2 |     let x = 5;\n  |         -\n  |         |\n  |         first assignment to `x`\n  |         help: make this binding mutable: `mut x`\n3 |     println!(\"The value of x is: {}\", x);\n4 |     x = 6;\n  |     ^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\nerror: could not compile `variables`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThis example shows how the compiler helps you find errors in your programs.\nEven though compiler errors can be frustrating, they only mean your program\nisn’t safely doing what you want it to do yet; they do *not* mean that you’re\nnot a good programmer! Experienced Rustaceans still get compiler errors.\n\nThe error message indicates that the cause of the error is that you `cannot\nassign twice to immutable variable x`, because you tried to assign a second\nvalue to the immutable `x` variable.\n\nIt’s important that we get compile-time errors when we attempt to change a\nvalue that we previously designated as immutable because this very situation\ncan lead to bugs. If one part of our code operates on the assumption that a\nvalue will never change and another part of our code changes that value, it’s\npossible that the first part of the code won’t do what it was designed to do.\nThe cause of this kind of bug can be difficult to track down after the fact,\nespecially when the second piece of code changes the value only *sometimes*.\n\nIn Rust, the compiler guarantees that when you state that a value won’t change,\nit really won’t change. That means that when you’re reading and writing code,\nyou don’t have to keep track of how and where a value might change. Your code\nis thus easier to reason through.\n\nBut mutability can be very useful. Variables are immutable only by default; as\nyou did in Chapter 2, you can make them mutable by adding `mut` in front of the\nvariable name. In addition to allowing this value to change, `mut` conveys\nintent to future readers of the code by indicating that other parts of the code\nwill be changing this variable’s value.\n\nFor example, let’s change *src/main.rs* to the following:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let mut x = 5;\n    println!(\"The value of x is: {}\", x);\n    x = 6;\n    println!(\"The value of x is: {}\", x);\n}\n```\n\nWhen we run the program now, we get this:\n\n```text\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/variables`\nThe value of x is: 5\nThe value of x is: 6\n```\n\nWe’re allowed to change the value that `x` binds to from `5` to `6` when `mut`\nis used. In some cases, you’ll want to make a variable mutable because it makes\nthe code more convenient to write than if it had only immutable variables.\n\nThere are multiple trade-offs to consider in addition to the prevention of\nbugs. For example, in cases where you’re using large data structures, mutating\nan instance in place may be faster than copying and returning newly allocated\ninstances. With smaller data structures, creating new instances and writing in\na more functional programming style may be easier to think through, so lower\nperformance might be a worthwhile penalty for gaining that clarity.\n\n### Differences Between Variables and Constants\n\nBeing unable to change the value of a variable might have reminded you of\nanother programming concept that most other languages have: *constants*. Like\nimmutable variables, constants are values that are bound to a name and are not\nallowed to change, but there are a few differences between constants and\nvariables.\n\nFirst, you aren’t allowed to use `mut` with constants. Constants aren’t just\nimmutable by default—they’re always immutable.\n\nYou declare constants using the `const` keyword instead of the `let` keyword,\nand the type of the value *must* be annotated. We’re about to cover types and\ntype annotations in the next section, [“Data Types,”][data-types]<!-- ignore\n--> so don’t worry about the details right now. Just know that you must always\nannotate the type.\n\nConstants can be declared in any scope, including the global scope, which makes\nthem useful for values that many parts of code need to know about.\n\nThe last difference is that constants may be set only to a constant expression,\nnot the result of a function call or any other value that could only be\ncomputed at runtime.\n\nHere’s an example of a constant declaration where the constant’s name is\n`MAX_POINTS` and its value is set to 100,000. (Rust’s naming convention for\nconstants is to use all uppercase with underscores between words, and\nunderscores can be inserted in numeric literals to improve readability):\n\n```rust\nconst MAX_POINTS: u32 = 100_000;\n```\n\nConstants are valid for the entire time a program runs, within the scope they\nwere declared in, making them a useful choice for values in your application\ndomain that multiple parts of the program might need to know about, such as the\nmaximum number of points any player of a game is allowed to earn or the speed\nof light.\n\nNaming hardcoded values used throughout your program as constants is useful in\nconveying the meaning of that value to future maintainers of the code. It also\nhelps to have only one place in your code you would need to change if the\nhardcoded value needed to be updated in the future.\n\n### Shadowing\n\nAs you saw in the guessing game tutorial in the [“Comparing the Guess to the\nSecret Number”][comparing-the-guess-to-the-secret-number]<!-- ignore -->\nsection in Chapter 2, you can declare a new variable with the same name as a\nprevious variable, and the new variable shadows the previous variable.\nRustaceans say that the first variable is *shadowed* by the second, which means\nthat the second variable’s value is what appears when the variable is used. We\ncan shadow a variable by using the same variable’s name and repeating the use\nof the `let` keyword as follows:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x = 5;\n\n    let x = x + 1;\n\n    let x = x * 2;\n\n    println!(\"The value of x is: {}\", x);\n}\n```\n\nThis program first binds `x` to a value of `5`. Then it shadows `x` by\nrepeating `let x =`, taking the original value and adding `1` so the value of\n`x` is then `6`. The third `let` statement also shadows `x`, multiplying the\nprevious value by `2` to give `x` a final value of `12`. When we run this\nprogram, it will output the following:\n\n```text\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/variables`\nThe value of x is: 12\n```\n\nShadowing is different from marking a variable as `mut`, because we’ll get a\ncompile-time error if we accidentally try to reassign to this variable without\nusing the `let` keyword. By using `let`, we can perform a few transformations\non a value but have the variable be immutable after those transformations have\nbeen completed.\n\nThe other difference between `mut` and shadowing is that because we’re\neffectively creating a new variable when we use the `let` keyword again, we can\nchange the type of the value but reuse the same name. For example, say our\nprogram asks a user to show how many spaces they want between some text by\ninputting space characters, but we really want to store that input as a number:\n\n```rust\n# fn main() {\n    let spaces = \"   \";\n    let spaces = spaces.len();\n# }\n```\n\nThis construct is allowed because the first `spaces` variable is a string type\nand the second `spaces` variable, which is a brand-new variable that happens to\nhave the same name as the first one, is a number type. Shadowing thus spares us\nfrom having to come up with different names, such as `spaces_str` and\n`spaces_num`; instead, we can reuse the simpler `spaces` name. However, if we\ntry to use `mut` for this, as shown here, we’ll get a compile-time error:\n\n```rust,ignore,does_not_compile\n# fn main() {\n    let mut spaces = \"   \";\n    spaces = spaces.len();\n# }\n```\n\nThe error says we’re not allowed to mutate a variable’s type:\n\n```text\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\nerror[E0308]: mismatched types\n --> src/main.rs:3:14\n  |\n3 |     spaces = spaces.len();\n  |              ^^^^^^^^^^^^ expected `&str`, found `usize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `variables`.\n\nTo learn more, run the command again with --verbose.\n```\n\nNow that we’ve explored how variables work, let’s look at more data types they\ncan have.\n\n[comparing-the-guess-to-the-secret-number]:\nch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[data-types]: ch03-02-data-types.html#data-types\n", number: Some(SectionNumber([3, 1])), sub_items: [], path: "ch03-01-variables-and-mutability.md", parent_names: ["Common Programming Concepts"] }), Chapter(Chapter { name: "Data Types", content: "## Data Types\n\nEvery value in Rust is of a certain *data type*, which tells Rust what kind of\ndata is being specified so it knows how to work with that data. We’ll look at\ntwo data type subsets: scalar and compound.\n\nKeep in mind that Rust is a *statically typed* language, which means that it\nmust know the types of all variables at compile time. The compiler can usually\ninfer what type we want to use based on the value and how we use it. In cases\nwhen many types are possible, such as when we converted a `String` to a numeric\ntype using `parse` in the [“Comparing the Guess to the Secret\nNumber”][comparing-the-guess-to-the-secret-number]<!-- ignore --> section in\nChapter 2, we must add a type annotation, like this:\n\n```rust\nlet guess: u32 = \"42\".parse().expect(\"Not a number!\");\n```\n\nIf we don’t add the type annotation here, Rust will display the following\nerror, which means the compiler needs more information from us to know which\ntype we want to use:\n\n```text\n$ cargo build\n   Compiling no_type_annotations v0.1.0 (file:///projects/no_type_annotations)\nerror[E0282]: type annotations needed\n --> src/main.rs:2:9\n  |\n2 |     let guess = \"42\".parse().expect(\"Not a number!\");\n  |         ^^^^^ consider giving `guess` a type\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\nerror: could not compile `no_type_annotations`.\n\nTo learn more, run the command again with --verbose.\n```\n\nYou’ll see different type annotations for other data types.\n\n### Scalar Types\n\nA *scalar* type represents a single value. Rust has four primary scalar types:\nintegers, floating-point numbers, Booleans, and characters. You may recognize\nthese from other programming languages. Let’s jump into how they work in Rust.\n\n#### Integer Types\n\nAn *integer* is a number without a fractional component. We used one integer\ntype in Chapter 2, the `u32` type. This type declaration indicates that the\nvalue it’s associated with should be an unsigned integer (signed integer types\nstart with `i`, instead of `u`) that takes up 32 bits of space. Table 3-1 shows\nthe built-in integer types in Rust. Each variant in the Signed and Unsigned\ncolumns (for example, `i16`) can be used to declare the type of an integer\nvalue.\n\n<span class=\"caption\">Table 3-1: Integer Types in Rust</span>\n\n| Length  | Signed  | Unsigned |\n|---------|---------|----------|\n| 8-bit   | `i8`    | `u8`     |\n| 16-bit  | `i16`   | `u16`    |\n| 32-bit  | `i32`   | `u32`    |\n| 64-bit  | `i64`   | `u64`    |\n| 128-bit | `i128`  | `u128`   |\n| arch    | `isize` | `usize`  |\n\nEach variant can be either signed or unsigned and has an explicit size.\n*Signed* and *unsigned* refer to whether it’s possible for the number to be\nnegative or positive—in other words, whether the number needs to have a sign\nwith it (signed) or whether it will only ever be positive and can therefore be\nrepresented without a sign (unsigned). It’s like writing numbers on paper: when\nthe sign matters, a number is shown with a plus sign or a minus sign; however,\nwhen it’s safe to assume the number is positive, it’s shown with no sign.\nSigned numbers are stored using [two’s complement](https://en.wikipedia.org/wiki/Two%27s_complement) representation.\n\nEach signed variant can store numbers from -(2<sup>n - 1</sup>) to 2<sup>n -\n1</sup> - 1 inclusive, where *n* is the number of bits that variant uses. So an\n`i8` can store numbers from -(2<sup>7</sup>) to 2<sup>7</sup> - 1, which equals\n-128 to 127. Unsigned variants can store numbers from 0 to 2<sup>n</sup> - 1,\nso a `u8` can store numbers from 0 to 2<sup>8</sup> - 1, which equals 0 to 255.\n\nAdditionally, the `isize` and `usize` types depend on the kind of computer your\nprogram is running on: 64 bits if you’re on a 64-bit architecture and 32 bits\nif you’re on a 32-bit architecture.\n\nYou can write integer literals in any of the forms shown in Table 3-2. Note\nthat all number literals except the byte literal allow a type suffix, such as\n`57u8`, and `_` as a visual separator, such as `1_000`.\n\n<span class=\"caption\">Table 3-2: Integer Literals in Rust</span>\n\n| Number literals  | Example       |\n|------------------|---------------|\n| Decimal          | `98_222`      |\n| Hex              | `0xff`        |\n| Octal            | `0o77`        |\n| Binary           | `0b1111_0000` |\n| Byte (`u8` only) | `b\'A\'`        |\n\nSo how do you know which type of integer to use? If you’re unsure, Rust’s\ndefaults are generally good choices, and integer types default to `i32`: this\ntype is generally the fastest, even on 64-bit systems. The primary situation in\nwhich you’d use `isize` or `usize` is when indexing some sort of collection.\n\n> ##### Integer Overflow\n>\n> Let’s say you have a variable of type `u8` that can hold values between 0 and 255.\n> If you try to change the variable to a value outside of that range, such\n> as 256, *integer overflow* will occur. Rust has some interesting rules\n> involving this behavior. When you’re compiling in debug mode, Rust includes\n> checks for integer overflow that cause your program to *panic* at runtime if\n> this behavior occurs. Rust uses the term panicking when a program exits with\n> an error; we’ll discuss panics in more depth in the [“Unrecoverable Errors\n> with `panic!`”][unrecoverable-errors-with-panic]<!-- ignore --> section in\n> Chapter 9.\n>\n> When you’re compiling in release mode with the `--release` flag, Rust does\n> *not* include checks for integer overflow that cause panics. Instead, if\n> overflow occurs, Rust performs *two’s complement wrapping*. In short, values\n> greater than the maximum value the type can hold “wrap around” to the minimum\n> of the values the type can hold. In the case of a `u8`, 256 becomes 0, 257\n> becomes 1, and so on. The program won’t panic, but the variable will have a\n> value that probably isn’t what you were expecting it to have. Relying on\n> integer overflow’s wrapping behavior is considered an error. If you want to\n> wrap explicitly, you can use the standard library type [`Wrapping`][wrapping].\n\n#### Floating-Point Types\n\nRust also has two primitive types for *floating-point numbers*, which are\nnumbers with decimal points. Rust’s floating-point types are `f32` and `f64`,\nwhich are 32 bits and 64 bits in size, respectively. The default type is `f64`\nbecause on modern CPUs it’s roughly the same speed as `f32` but is capable of\nmore precision.\n\nHere’s an example that shows floating-point numbers in action:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x = 2.0; // f64\n\n    let y: f32 = 3.0; // f32\n}\n```\n\nFloating-point numbers are represented according to the IEEE-754 standard. The\n`f32` type is a single-precision float, and `f64` has double precision.\n\n#### Numeric Operations\n\nRust supports the basic mathematical operations you’d expect for all of the\nnumber types: addition, subtraction, multiplication, division, and remainder.\nThe following code shows how you’d use each one in a `let` statement:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    // addition\n    let sum = 5 + 10;\n\n    // subtraction\n    let difference = 95.5 - 4.3;\n\n    // multiplication\n    let product = 4 * 30;\n\n    // division\n    let quotient = 56.7 / 32.2;\n\n    // remainder\n    let remainder = 43 % 5;\n}\n```\n\nEach expression in these statements uses a mathematical operator and evaluates\nto a single value, which is then bound to a variable. Appendix B contains a\nlist of all operators that Rust provides.\n\n#### The Boolean Type\n\nAs in most other programming languages, a Boolean type in Rust has two possible\nvalues: `true` and `false`. Booleans are one byte in size. The Boolean type in\nRust is specified using `bool`. For example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let t = true;\n\n    let f: bool = false; // with explicit type annotation\n}\n```\n\nThe main way to use Boolean values is through conditionals, such as an `if`\nexpression. We’ll cover how `if` expressions work in Rust in the [“Control\nFlow”][control-flow]<!-- ignore --> section.\n\n#### The Character Type\n\nSo far we’ve worked only with numbers, but Rust supports letters too. Rust’s\n`char` type is the language’s most primitive alphabetic type, and the following\ncode shows one way to use it. (Note that `char` literals are specified with\nsingle quotes, as opposed to string literals, which use double quotes.)\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let c = \'z\';\n    let z = \'ℤ\';\n    let heart_eyed_cat = \'😻\';\n}\n```\n\nRust’s `char` type is four bytes in size and represents a Unicode Scalar Value,\nwhich means it can represent a lot more than just ASCII. Accented letters;\nChinese, Japanese, and Korean characters; emoji; and zero-width spaces are all\nvalid `char` values in Rust. Unicode Scalar Values range from `U+0000` to\n`U+D7FF` and `U+E000` to `U+10FFFF` inclusive. However, a “character” isn’t\nreally a concept in Unicode, so your human intuition for what a “character” is\nmay not match up with what a `char` is in Rust. We’ll discuss this topic in\ndetail in [“Storing UTF-8 Encoded Text with Strings”][strings]<!-- ignore -->\nin Chapter 8.\n\n### Compound Types\n\n*Compound types* can group multiple values into one type. Rust has two\nprimitive compound types: tuples and arrays.\n\n#### The Tuple Type\n\nA tuple is a general way of grouping together a number of values with a variety\nof types into one compound type. Tuples have a fixed length: once declared,\nthey cannot grow or shrink in size.\n\nWe create a tuple by writing a comma-separated list of values inside\nparentheses. Each position in the tuple has a type, and the types of the\ndifferent values in the tuple don’t have to be the same. We’ve added optional\ntype annotations in this example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let tup: (i32, f64, u8) = (500, 6.4, 1);\n}\n```\n\nThe variable `tup` binds to the entire tuple, because a tuple is considered a\nsingle compound element. To get the individual values out of a tuple, we can\nuse pattern matching to destructure a tuple value, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let tup = (500, 6.4, 1);\n\n    let (x, y, z) = tup;\n\n    println!(\"The value of y is: {}\", y);\n}\n```\n\nThis program first creates a tuple and binds it to the variable `tup`. It then\nuses a pattern with `let` to take `tup` and turn it into three separate\nvariables, `x`, `y`, and `z`. This is called *destructuring*, because it breaks\nthe single tuple into three parts. Finally, the program prints the value of\n`y`, which is `6.4`.\n\nIn addition to destructuring through pattern matching, we can access a tuple\nelement directly by using a period (`.`) followed by the index of the value we\nwant to access. For example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x: (i32, f64, u8) = (500, 6.4, 1);\n\n    let five_hundred = x.0;\n\n    let six_point_four = x.1;\n\n    let one = x.2;\n}\n```\n\nThis program creates a tuple, `x`, and then makes new variables for each\nelement by using their respective indices. As with most programming languages,\nthe first index in a tuple is 0.\n\n#### The Array Type\n\nAnother way to have a collection of multiple values is with an *array*. Unlike\na tuple, every element of an array must have the same type. Arrays in Rust are\ndifferent from arrays in some other languages because arrays in Rust have a\nfixed length, like tuples.\n\nIn Rust, the values going into an array are written as a comma-separated list\ninside square brackets:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n}\n```\n\nArrays are useful when you want your data allocated on the stack rather than\nthe heap (we will discuss the stack and the heap more in Chapter 4) or when\nyou want to ensure you always have a fixed number of elements. An array isn’t\nas flexible as the vector type, though. A vector is a similar collection type\nprovided by the standard library that *is* allowed to grow or shrink in size.\nIf you’re unsure whether to use an array or a vector, you should probably use a\nvector. Chapter 8 discusses vectors in more detail.\n\nAn example of when you might want to use an array rather than a vector is in a\nprogram that needs to know the names of the months of the year. It’s very\nunlikely that such a program will need to add or remove months, so you can use\nan array because you know it will always contain 12 elements:\n\n```rust\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n              \"August\", \"September\", \"October\", \"November\", \"December\"];\n```\n\nYou would write an array’s type by using square brackets, and within the\nbrackets include the type of each element, a semicolon, and then the number of\nelements in the array, like so:\n\n```rust\nlet a: [i32; 5] = [1, 2, 3, 4, 5];\n```\n\nHere, `i32` is the type of each element. After the semicolon, the number `5`\nindicates the array contains five elements.\n\nWriting an array’s type this way looks similar to an alternative syntax for\ninitializing an array: if you want to create an array that contains the same\nvalue for each element, you can specify the initial value, followed by a\nsemicolon, and then the length of the array in square brackets, as shown here:\n\n```rust\nlet a = [3; 5];\n```\n\nThe array named `a` will contain `5` elements that will all be set to the value\n`3` initially. This is the same as writing `let a = [3, 3, 3, 3, 3];` but in a\nmore concise way.\n\n##### Accessing Array Elements\n\nAn array is a single chunk of memory allocated on the stack. You can access\nelements of an array using indexing, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n\n    let first = a[0];\n    let second = a[1];\n}\n```\n\nIn this example, the variable named `first` will get the value `1`, because\nthat is the value at index `[0]` in the array. The variable named `second` will\nget the value `2` from index `[1]` in the array.\n\n##### Invalid Array Element Access\n\nWhat happens if you try to access an element of an array that is past the end\nof the array? Say you change the example to the following code, which will\ncompile but exit with an error when it runs:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,panics\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n    let index = 10;\n\n    let element = a[index];\n\n    println!(\"The value of element is: {}\", element);\n}\n```\n\nRunning this code using `cargo run` produces the following result:\n\n```text\n$ cargo run\n   Compiling arrays v0.1.0 (file:///projects/arrays)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/arrays`\nthread \'main\' panicked at \'index out of bounds: the len is 5 but the index is 10\', src/main.rs:5:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n```\n\nThe compilation didn’t produce any errors, but the program resulted in a\n*runtime* error and didn’t exit successfully. When you attempt to access an\nelement using indexing, Rust will check that the index you’ve specified is less\nthan the array length. If the index is greater than or equal to the array\nlength, Rust will panic.\n\nThis is the first example of Rust’s safety principles in action. In many\nlow-level languages, this kind of check is not done, and when you provide an\nincorrect index, invalid memory can be accessed. Rust protects you against this\nkind of error by immediately exiting instead of allowing the memory access and\ncontinuing. Chapter 9 discusses more of Rust’s error handling.\n\n[comparing-the-guess-to-the-secret-number]:\nch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[control-flow]: ch03-05-control-flow.html#control-flow\n[strings]: ch08-02-strings.html#storing-utf-8-encoded-text-with-strings\n[unrecoverable-errors-with-panic]: ch09-01-unrecoverable-errors-with-panic.html\n[wrapping]: ../std/num/struct.Wrapping.html\n", number: Some(SectionNumber([3, 2])), sub_items: [], path: "ch03-02-data-types.md", parent_names: ["Common Programming Concepts"] }), Chapter(Chapter { name: "Functions", content: "## Functions\n\nFunctions are pervasive in Rust code. You’ve already seen one of the most\nimportant functions in the language: the `main` function, which is the entry\npoint of many programs. You’ve also seen the `fn` keyword, which allows you to\ndeclare new functions.\n\nRust code uses *snake case* as the conventional style for function and variable\nnames. In snake case, all letters are lowercase and underscores separate words.\nHere’s a program that contains an example function definition:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n\n    another_function();\n}\n\nfn another_function() {\n    println!(\"Another function.\");\n}\n```\n\nFunction definitions in Rust start with `fn` and have a set of parentheses\nafter the function name. The curly brackets tell the compiler where the\nfunction body begins and ends.\n\nWe can call any function we’ve defined by entering its name followed by a set\nof parentheses. Because `another_function` is defined in the program, it can be\ncalled from inside the `main` function. Note that we defined `another_function`\n*after* the `main` function in the source code; we could have defined it before\nas well. Rust doesn’t care where you define your functions, only that they’re\ndefined somewhere.\n\nLet’s start a new binary project named *functions* to explore functions\nfurther. Place the `another_function` example in *src/main.rs* and run it. You\nshould see the following output:\n\n```text\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.28s\n     Running `target/debug/functions`\nHello, world!\nAnother function.\n```\n\nThe lines execute in the order in which they appear in the `main` function.\nFirst, the “Hello, world!” message prints, and then `another_function` is\ncalled and its message is printed.\n\n### Function Parameters\n\nFunctions can also be defined to have *parameters*, which are special variables\nthat are part of a function’s signature. When a function has parameters, you\ncan provide it with concrete values for those parameters. Technically, the\nconcrete values are called *arguments*, but in casual conversation, people tend\nto use the words *parameter* and *argument* interchangeably for either the\nvariables in a function’s definition or the concrete values passed in when you\ncall a function.\n\nThe following rewritten version of `another_function` shows what parameters\nlook like in Rust:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    another_function(5);\n}\n\nfn another_function(x: i32) {\n    println!(\"The value of x is: {}\", x);\n}\n```\n\nTry running this program; you should get the following output:\n\n```text\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.21s\n     Running `target/debug/functions`\nThe value of x is: 5\n```\n\nThe declaration of `another_function` has one parameter named `x`. The type of\n`x` is specified as `i32`. When `5` is passed to `another_function`, the\n`println!` macro puts `5` where the pair of curly brackets were in the format\nstring.\n\nIn function signatures, you *must* declare the type of each parameter. This is\na deliberate decision in Rust’s design: requiring type annotations in function\ndefinitions means the compiler almost never needs you to use them elsewhere in\nthe code to figure out what you mean.\n\nWhen you want a function to have multiple parameters, separate the parameter\ndeclarations with commas, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    another_function(5, 6);\n}\n\nfn another_function(x: i32, y: i32) {\n    println!(\"The value of x is: {}\", x);\n    println!(\"The value of y is: {}\", y);\n}\n```\n\nThis example creates a function with two parameters, both of which are `i32`\ntypes. The function then prints the values in both of its parameters. Note that\nfunction parameters don’t all need to be the same type, they just happen to be\nin this example.\n\nLet’s try running this code. Replace the program currently in your *functions*\nproject’s *src/main.rs* file with the preceding example and run it using `cargo\nrun`:\n\n```text\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/functions`\nThe value of x is: 5\nThe value of y is: 6\n```\n\nBecause we called the function with `5` as the value for  `x` and `6` is passed\nas the value for `y`, the two strings are printed with these values.\n\n### Function Bodies Contain Statements and Expressions\n\nFunction bodies are made up of a series of statements optionally ending in an\nexpression. So far, we’ve only covered functions without an ending expression,\nbut you have seen an expression as part of a statement. Because Rust is an\nexpression-based language, this is an important distinction to understand.\nOther languages don’t have the same distinctions, so let’s look at what\nstatements and expressions are and how their differences affect the bodies of\nfunctions.\n\nWe’ve actually already used statements and expressions. *Statements* are\ninstructions that perform some action and do not return a value. *Expressions*\nevaluate to a resulting value. Let’s look at some examples.\n\nCreating a variable and assigning a value to it with the `let` keyword is a\nstatement. In Listing 3-1, `let y = 6;` is a statement.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let y = 6;\n}\n```\n\n<span class=\"caption\">Listing 3-1: A `main` function declaration containing one statement</span>\n\nFunction definitions are also statements; the entire preceding example is a\nstatement in itself.\n\nStatements do not return values. Therefore, you can’t assign a `let` statement\nto another variable, as the following code tries to do; you’ll get an error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn main() {\n    let x = (let y = 6);\n}\n```\n\nWhen you run this program, the error you’ll get looks like this:\n```text\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\nerror: expected expression, found statement (`let`)\n --> src/main.rs:2:14\n  |\n2 |     let x = (let y = 6);\n  |              ^^^\n  |\n  = note: variable declaration using `let` is a statement\n```\n\nThe `let y = 6` statement does not return a value, so there isn’t anything for\n`x` to bind to. This is different from what happens in other languages, such as\nC and Ruby, where the assignment returns the value of the assignment. In those\nlanguages, you can write `x = y = 6` and have both `x` and `y` have the value\n`6`; that is not the case in Rust.\n\nExpressions evaluate to something and make up most of the rest of the code that\nyou’ll write in Rust. Consider a simple math operation, such as `5 + 6`, which\nis an expression that evaluates to the value `11`. Expressions can be part of\nstatements: in Listing 3-1, the `6` in the statement `let y = 6;` is an\nexpression that evaluates to the value `6`. Calling a function is an\nexpression. Calling a macro is an expression. The block that we use to create\nnew scopes, `{}`, is an expression, for example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x = 5;\n\n    let y = {\n        let x = 3;\n        x + 1\n    };\n\n    println!(\"The value of y is: {}\", y);\n}\n```\n\nThis expression:\n\n```rust,ignore\n{\n    let x = 3;\n    x + 1\n}\n```\n\nis a block that, in this case, evaluates to `4`. That value gets bound to `y`\nas part of the `let` statement. Note the `x + 1` line without a semicolon at\nthe end, which is unlike most of the lines you’ve seen so far. Expressions do\nnot include ending semicolons. If you add a semicolon to the end of an\nexpression, you turn it into a statement, which will then not return a value.\nKeep this in mind as you explore function return values and expressions next.\n\n### Functions with Return Values\n\nFunctions can return values to the code that calls them. We don’t name return\nvalues, but we do declare their type after an arrow (`->`). In Rust, the return\nvalue of the function is synonymous with the value of the final expression in\nthe block of the body of a function. You can return early from a function by\nusing the `return` keyword and specifying a value, but most functions return\nthe last expression implicitly. Here’s an example of a function that returns a\nvalue:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn five() -> i32 {\n    5\n}\n\nfn main() {\n    let x = five();\n\n    println!(\"The value of x is: {}\", x);\n}\n```\n\nThere are no function calls, macros, or even `let` statements in the `five`\nfunction—just the number `5` by itself. That’s a perfectly valid function in\nRust. Note that the function’s return type is specified too, as `-> i32`. Try\nrunning this code; the output should look like this:\n\n```text\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/functions`\nThe value of x is: 5\n```\n\nThe `5` in `five` is the function’s return value, which is why the return type\nis `i32`. Let’s examine this in more detail. There are two important bits:\nfirst, the line `let x = five();` shows that we’re using the return value of a\nfunction to initialize a variable. Because the function `five` returns a `5`,\nthat line is the same as the following:\n\n```rust\nlet x = 5;\n```\n\nSecond, the `five` function has no parameters and defines the type of the\nreturn value, but the body of the function is a lonely `5` with no semicolon\nbecause it’s an expression whose value we want to return.\n\nLet’s look at another example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x = plus_one(5);\n\n    println!(\"The value of x is: {}\", x);\n}\n\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\nRunning this code will print `The value of x is: 6`. But if we place a\nsemicolon at the end of the line containing `x + 1`, changing it from an\nexpression to a statement, we’ll get an error.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn main() {\n    let x = plus_one(5);\n\n    println!(\"The value of x is: {}\", x);\n}\n\nfn plus_one(x: i32) -> i32 {\n    x + 1;\n}\n```\n\nCompiling this code produces an error, as follows:\n\n```text\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\nerror[E0308]: mismatched types\n --> src/main.rs:7:24\n  |\n7 | fn plus_one(x: i32) -> i32 {\n  |    --------            ^^^ expected `i32`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n8 |     x + 1;\n  |          - help: consider removing this semicolon\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `functions`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe main error message, “mismatched types,” reveals the core issue with this\ncode. The definition of the function `plus_one` says that it will return an\n`i32`, but statements don’t evaluate to a value, which is expressed by `()`,\nan empty tuple. Therefore, nothing is returned, which contradicts the function\ndefinition and results in an error. In this output, Rust provides a message to\npossibly help rectify this issue: it suggests removing the semicolon, which\nwould fix the error.\n", number: Some(SectionNumber([3, 3])), sub_items: [], path: "ch03-03-how-functions-work.md", parent_names: ["Common Programming Concepts"] }), Chapter(Chapter { name: "Comments", content: "## Comments\n\nAll programmers strive to make their code easy to understand, but sometimes\nextra explanation is warranted. In these cases, programmers leave notes, or\n*comments*, in their source code that the compiler will ignore but people\nreading the source code may find useful.\n\nHere’s a simple comment:\n\n```rust\n// hello, world\n```\n\nIn Rust, the idiomatic comment style starts a comment with two slashes, and the\ncomment continues until the end of the line. For comments that extend beyond a\nsingle line, you’ll need to include `//` on each line, like this:\n\n```rust\n// So we’re doing something complicated here, long enough that we need\n// multiple lines of comments to do it! Whew! Hopefully, this comment will\n// explain what’s going on.\n```\n\nComments can also be placed at the end of lines containing code:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let lucky_number = 7; // I’m feeling lucky today\n}\n```\n\nBut you’ll more often see them used in this format, with the comment on a\nseparate line above the code it’s annotating:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    // I’m feeling lucky today\n    let lucky_number = 7;\n}\n```\n\nRust also has another kind of comment, documentation comments, which we’ll\ndiscuss in the “Publishing a Crate to Crates.io” section of Chapter 14.\n", number: Some(SectionNumber([3, 4])), sub_items: [], path: "ch03-04-comments.md", parent_names: ["Common Programming Concepts"] }), Chapter(Chapter { name: "Control Flow", content: "## Control Flow\n\nDeciding whether or not to run some code depending on if a condition is true\nand deciding to run some code repeatedly while a condition is true are basic\nbuilding blocks in most programming languages. The most common constructs that\nlet you control the flow of execution of Rust code are `if` expressions and\nloops.\n\n### `if` Expressions\n\nAn `if` expression allows you to branch your code depending on conditions. You\nprovide a condition and then state, “If this condition is met, run this block\nof code. If the condition is not met, do not run this block of code.”\n\nCreate a new project called *branches* in your *projects* directory to explore\nthe `if` expression. In the *src/main.rs* file, input the following:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let number = 3;\n\n    if number < 5 {\n        println!(\"condition was true\");\n    } else {\n        println!(\"condition was false\");\n    }\n}\n```\n\nAll `if` expressions start with the keyword `if`, which is followed by a\ncondition. In this case, the condition checks whether or not the variable\n`number` has a value less than 5. The block of code we want to execute if the\ncondition is true is placed immediately after the condition inside curly\nbrackets. Blocks of code associated with the conditions in `if` expressions are\nsometimes called *arms*, just like the arms in `match` expressions that we\ndiscussed in the [“Comparing the Guess to the Secret\nNumber”][comparing-the-guess-to-the-secret-number]<!-- ignore --> section of\nChapter 2.\n\nOptionally, we can also include an `else` expression, which we chose\nto do here, to give the program an alternative block of code to execute should\nthe condition evaluate to false. If you don’t provide an `else` expression and\nthe condition is false, the program will just skip the `if` block and move on\nto the next bit of code.\n\nTry running this code; you should see the following output:\n\n```text\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\ncondition was true\n```\n\nLet’s try changing the value of `number` to a value that makes the condition\n`false` to see what happens:\n\n```rust,ignore\n# fn main() {\n    let number = 7;\n# \n#     if number < 5 {\n#         println!(\"condition was true\");\n#     } else {\n#         println!(\"condition was false\");\n#     }\n# }\n```\n\nRun the program again, and look at the output:\n\n```text\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\ncondition was false\n```\n\nIt’s also worth noting that the condition in this code *must* be a `bool`. If\nthe condition isn’t a `bool`, we’ll get an error. For example, try running the\nfollowing code:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn main() {\n    let number = 3;\n\n    if number {\n        println!(\"number was three\");\n    }\n}\n```\n\nThe `if` condition evaluates to a value of `3` this time, and Rust throws an\nerror:\n\n```text\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\nerror[E0308]: mismatched types\n --> src/main.rs:4:8\n  |\n4 |     if number {\n  |        ^^^^^^ expected `bool`, found integer\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `branches`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe error indicates that Rust expected a `bool` but got an integer. Unlike\nlanguages such as Ruby and JavaScript, Rust will not automatically try to\nconvert non-Boolean types to a Boolean. You must be explicit and always provide\n`if` with a Boolean as its condition. If we want the `if` code block to run\nonly when a number is not equal to `0`, for example, we can change the `if`\nexpression to the following:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let number = 3;\n\n    if number != 0 {\n        println!(\"number was something other than zero\");\n    }\n}\n```\n\nRunning this code will print `number was something other than zero`.\n\n#### Handling Multiple Conditions with `else if`\n\nYou can have multiple conditions by combining `if` and `else` in an `else if`\nexpression. For example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let number = 6;\n\n    if number % 4 == 0 {\n        println!(\"number is divisible by 4\");\n    } else if number % 3 == 0 {\n        println!(\"number is divisible by 3\");\n    } else if number % 2 == 0 {\n        println!(\"number is divisible by 2\");\n    } else {\n        println!(\"number is not divisible by 4, 3, or 2\");\n    }\n}\n```\n\nThis program has four possible paths it can take. After running it, you should\nsee the following output:\n\n```text\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\nnumber is divisible by 3\n```\n\nWhen this program executes, it checks each `if` expression in turn and executes\nthe first body for which the condition holds true. Note that even though 6 is\ndivisible by 2, we don’t see the output `number is divisible by 2`, nor do we\nsee the `number is not divisible by 4, 3, or 2` text from the `else` block.\nThat’s because Rust only executes the block for the first true condition, and\nonce it finds one, it doesn’t even check the rest.\n\nUsing too many `else if` expressions can clutter your code, so if you have more\nthan one, you might want to refactor your code. Chapter 6 describes a powerful\nRust branching construct called `match` for these cases.\n\n#### Using `if` in a `let` Statement\n\nBecause `if` is an expression, we can use it on the right side of a `let`\nstatement, as in Listing 3-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let condition = true;\n    let number = if condition { 5 } else { 6 };\n\n    println!(\"The value of number is: {}\", number);\n}\n```\n\n<span class=\"caption\">Listing 3-2: Assigning the result of an `if` expression\nto a variable</span>\n\nThe `number` variable will be bound to a value based on the outcome of the `if`\nexpression. Run this code to see what happens:\n\n```text\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/branches`\nThe value of number is: 5\n```\n\nRemember that blocks of code evaluate to the last expression in them, and\nnumbers by themselves are also expressions. In this case, the value of the\nwhole `if` expression depends on which block of code executes. This means the\nvalues that have the potential to be results from each arm of the `if` must be\nthe same type; in Listing 3-2, the results of both the `if` arm and the `else`\narm were `i32` integers. If the types are mismatched, as in the following\nexample, we’ll get an error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn main() {\n    let condition = true;\n\n    let number = if condition { 5 } else { \"six\" };\n\n    println!(\"The value of number is: {}\", number);\n}\n```\n\nWhen we try to compile this code, we’ll get an error. The `if` and `else` arms\nhave value types that are incompatible, and Rust indicates exactly where to\nfind the problem in the program:\n\n```text\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\nerror[E0308]: if and else have incompatible types\n --> src/main.rs:4:44\n  |\n4 |     let number = if condition { 5 } else { \"six\" };\n  |                                 -          ^^^^^ expected integer, found `&str`\n  |                                 |\n  |                                 expected because of this\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `branches`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe expression in the `if` block evaluates to an integer, and the expression in\nthe `else` block evaluates to a string. This won’t work because variables must\nhave a single type. Rust needs to know at compile time what type the `number`\nvariable is, definitively, so it can verify at compile time that its type is\nvalid everywhere we use `number`. Rust wouldn’t be able to do that if the type\nof `number` was only determined at runtime; the compiler would be more complex\nand would make fewer guarantees about the code if it had to keep track of\nmultiple hypothetical types for any variable.\n\n### Repetition with Loops\n\nIt’s often useful to execute a block of code more than once. For this task,\nRust provides several *loops*. A loop runs through the code inside the loop\nbody to the end and then starts immediately back at the beginning. To\nexperiment with loops, let’s make a new project called *loops*.\n\nRust has three kinds of loops: `loop`, `while`, and `for`. Let’s try each one.\n\n#### Repeating Code with `loop`\n\nThe `loop` keyword tells Rust to execute a block of code over and over again\nforever or until you explicitly tell it to stop.\n\nAs an example, change the *src/main.rs* file in your *loops* directory to look\nlike this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\nfn main() {\n    loop {\n        println!(\"again!\");\n    }\n}\n```\n\nWhen we run this program, we’ll see `again!` printed over and over continuously\nuntil we stop the program manually. Most terminals support a keyboard shortcut,\n<span class=\"keystroke\">ctrl-c</span>, to interrupt a program that is stuck in\na continual loop. Give it a try:\n\n<!-- manual-regeneration\ncd listings/ch03-common-programming-concepts/no-listing-32-loop\ncargo run\nCTRL-C\n-->\n\n```text\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.29s\n     Running `target/debug/loops`\nagain!\nagain!\nagain!\nagain!\n^Cagain!\n```\n\nThe symbol `^C` represents where you pressed <span class=\"keystroke\">ctrl-c\n</span>. You may or may not see the word `again!` printed after the `^C`,\ndepending on where the code was in the loop when it received the interrupt\nsignal.\n\nFortunately, Rust provides another, more reliable way to break out of a loop.\nYou can place the `break` keyword within the loop to tell the program when to\nstop executing the loop. Recall that we did this in the guessing game in the\n[“Quitting After a Correct Guess”][quitting-after-a-correct-guess]<!-- ignore\n--> section of Chapter 2 to exit the program when the user won the game by\nguessing the correct number.\n\n#### Returning Values from Loops\n\nOne of the uses of a `loop` is to retry an operation you know might fail, such\nas checking whether a thread has completed its job. However, you might need to\npass the result of that operation to the rest of your code. To do this, you can\nadd the value you want returned after the `break` expression you use to stop\nthe loop; that value will be returned out of the loop so you can use it, as\nshown here:\n\n```rust\nfn main() {\n    let mut counter = 0;\n\n    let result = loop {\n        counter += 1;\n\n        if counter == 10 {\n            break counter * 2;\n        }\n    };\n\n    println!(\"The result is {}\", result);\n}\n```\n\nBefore the loop, we declare a variable named `counter` and initialize it to\n`0`. Then we declare a variable named `result` to hold the value returned from\nthe loop. On every iteration of the loop, we add `1` to the `counter` variable,\nand then check whether the counter is equal to `10`. When it is, we use the\n`break` keyword with the value `counter * 2`. After the loop, we use a\nsemicolon to end the statement that assigns the value to `result`. Finally, we\nprint the value in `result`, which in this case is 20.\n\n#### Conditional Loops with `while`\n\nIt’s often useful for a program to evaluate a condition within a loop. While\nthe condition is true, the loop runs. When the condition ceases to be true, the\nprogram calls `break`, stopping the loop. This loop type could be implemented\nusing a combination of `loop`, `if`, `else`, and `break`; you could try that\nnow in a program, if you’d like.\n\nHowever, this pattern is so common that Rust has a built-in language construct\nfor it, called a `while` loop. Listing 3-3 uses `while`: the program loops\nthree times, counting down each time, and then, after the loop, it prints\nanother message and exits.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let mut number = 3;\n\n    while number != 0 {\n        println!(\"{}!\", number);\n\n        number -= 1;\n    }\n\n    println!(\"LIFTOFF!!!\");\n}\n```\n\n<span class=\"caption\">Listing 3-3: Using a `while` loop to run code while a\ncondition holds true</span>\n\nThis construct eliminates a lot of nesting that would be necessary if you used\n`loop`, `if`, `else`, and `break`, and it’s clearer. While a condition holds\ntrue, the code runs; otherwise, it exits the loop.\n\n#### Looping Through a Collection with `for`\n\nYou could use the `while` construct to loop over the elements of a collection,\nsuch as an array. For example, let’s look at Listing 3-4.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n    let mut index = 0;\n\n    while index < 5 {\n        println!(\"the value is: {}\", a[index]);\n\n        index += 1;\n    }\n}\n```\n\n<span class=\"caption\">Listing 3-4: Looping through each element of a collection\nusing a `while` loop</span>\n\nHere, the code counts up through the elements in the array. It starts at index\n`0`, and then loops until it reaches the final index in the array (that is,\nwhen `index < 5` is no longer true). Running this code will print every element\nin the array:\n\n```text\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32s\n     Running `target/debug/loops`\nthe value is: 10\nthe value is: 20\nthe value is: 30\nthe value is: 40\nthe value is: 50\n```\n\nAll five array values appear in the terminal, as expected. Even though `index`\nwill reach a value of `5` at some point, the loop stops executing before trying\nto fetch a sixth value from the array.\n\nBut this approach is error prone; we could cause the program to panic if the\nindex length is incorrect. It’s also slow, because the compiler adds runtime\ncode to perform the conditional check on every element on every iteration\nthrough the loop.\n\nAs a more concise alternative, you can use a `for` loop and execute some code\nfor each item in a collection. A `for` loop looks like the code in Listing 3-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n\n    for element in a.iter() {\n        println!(\"the value is: {}\", element);\n    }\n}\n```\n\n<span class=\"caption\">Listing 3-5: Looping through each element of a collection\nusing a `for` loop</span>\n\nWhen we run this code, we’ll see the same output as in Listing 3-4. More\nimportantly, we’ve now increased the safety of the code and eliminated the\nchance of bugs that might result from going beyond the end of the array or not\ngoing far enough and missing some items.\n\nFor example, in the code in Listing 3-4, if you changed the definition of the\n`a` array to have four elements but forgot to update the condition to `while\nindex < 4`, the code would panic. Using the `for` loop, you wouldn’t need to\nremember to change any other code if you changed the number of values in the\narray.\n\nThe safety and conciseness of `for` loops make them the most commonly used loop\nconstruct in Rust. Even in situations in which you want to run some code a\ncertain number of times, as in the countdown example that used a `while` loop\nin Listing 3-3, most Rustaceans would use a `for` loop. The way to do that\nwould be to use a `Range`, which is a type provided by the standard library\nthat generates all numbers in sequence starting from one number and ending\nbefore another number.\n\nHere’s what the countdown would look like using a `for` loop and another method\nwe’ve not yet talked about, `rev`, to reverse the range:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    for number in (1..4).rev() {\n        println!(\"{}!\", number);\n    }\n    println!(\"LIFTOFF!!!\");\n}\n```\n\nThis code is a bit nicer, isn’t it?\n\n## Summary\n\nYou made it! That was a sizable chapter: you learned about variables, scalar\nand compound data types, functions, comments, `if` expressions, and loops! If\nyou want to practice with the concepts discussed in this chapter, try building\nprograms to do the following:\n\n* Convert temperatures between Fahrenheit and Celsius.\n* Generate the nth Fibonacci number.\n* Print the lyrics to the Christmas carol “The Twelve Days of Christmas,”\n  taking advantage of the repetition in the song.\n\nWhen you’re ready to move on, we’ll talk about a concept in Rust that *doesn’t*\ncommonly exist in other programming languages: ownership.\n\n[comparing-the-guess-to-the-secret-number]:\nch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[quitting-after-a-correct-guess]:\nch02-00-guessing-game-tutorial.html#quitting-after-a-correct-guess\n", number: Some(SectionNumber([3, 5])), sub_items: [], path: "ch03-05-control-flow.md", parent_names: ["Common Programming Concepts"] })], path: "ch03-00-common-programming-concepts.md", parent_names: [] }), Chapter(Chapter { name: "Understanding Ownership", content: "# Understanding Ownership\n\nOwnership is Rust’s most unique feature, and it enables Rust to make memory\nsafety guarantees without needing a garbage collector. Therefore, it’s\nimportant to understand how ownership works in Rust. In this chapter, we’ll\ntalk about ownership as well as several related features: borrowing, slices,\nand how Rust lays data out in memory.\n", number: Some(SectionNumber([4])), sub_items: [Chapter(Chapter { name: "What is Ownership?", content: "## What Is Ownership?\n\nRust’s central feature is *ownership*. Although the feature is straightforward\nto explain, it has deep implications for the rest of the language.\n\nAll programs have to manage the way they use a computer’s memory while running.\nSome languages have garbage collection that constantly looks for no longer used\nmemory as the program runs; in other languages, the programmer must explicitly\nallocate and free the memory. Rust uses a third approach: memory is managed\nthrough a system of ownership with a set of rules that the compiler checks at\ncompile time. None of the ownership features slow down your program while it’s\nrunning.\n\nBecause ownership is a new concept for many programmers, it does take some time\nto get used to. The good news is that the more experienced you become with Rust\nand the rules of the ownership system, the more you’ll be able to naturally\ndevelop code that is safe and efficient. Keep at it!\n\nWhen you understand ownership, you’ll have a solid foundation for understanding\nthe features that make Rust unique. In this chapter, you’ll learn ownership by\nworking through some examples that focus on a very common data structure:\nstrings.\n\n> ### The Stack and the Heap\n>\n> In many programming languages, you don’t have to think about the stack and\n> the heap very often. But in a systems programming language like Rust, whether\n> a value is on the stack or the heap has more of an effect on how the language\n> behaves and why you have to make certain decisions. Parts of ownership will\n> be described in relation to the stack and the heap later in this chapter, so\n> here is a brief explanation in preparation.\n>\n> Both the stack and the heap are parts of memory that are available to your\n> code to use at runtime, but they are structured in different ways. The stack\n> stores values in the order it gets them and removes the values in the\n> opposite order. This is referred to as *last in, first out*. Think of a stack\n> of plates: when you add more plates, you put them on top of the pile, and\n> when you need a plate, you take one off the top. Adding or removing plates\n> from the middle or bottom wouldn’t work as well! Adding data is called\n> *pushing onto the stack*, and removing data is called *popping off the stack*.\n>\n> All data stored on the stack must have a known, fixed size. Data with an\n> unknown size at compile time or a size that might change must be stored on\n> the heap instead. The heap is less organized: when you put data on the heap,\n> you request a certain amount of space. The memory allocator finds an empty\n> spot in the heap that is big enough, marks it as being in use, and returns a\n> *pointer*, which is the address of that location. This process is called\n> *allocating on the heap* and is sometimes abbreviated as just *allocating*.\n> Pushing values onto the stack is not considered allocating. Because the\n> pointer is a known, fixed size, you can store the pointer on the stack, but\n> when you want the actual data, you must follow the pointer.\n>\n> Think of being seated at a restaurant. When you enter, you state the number of\n> people in your group, and the staff finds an empty table that fits everyone\n> and leads you there. If someone in your group comes late, they can ask where\n> you’ve been seated to find you.\n>\n> Pushing to the stack is faster than allocating on the heap because the\n> allocator never has to search for a place to store new data; that\n> location is always at the top of the stack. Comparatively, allocating space\n> on the heap requires more work, because the allocator must first find\n> a big enough space to hold the data and then perform bookkeeping to prepare\n> for the next allocation.\n>\n> Accessing data in the heap is slower than accessing data on the stack because\n> you have to follow a pointer to get there. Contemporary processors are faster\n> if they jump around less in memory. Continuing the analogy, consider a server\n> at a restaurant taking orders from many tables. It’s most efficient to get\n> all the orders at one table before moving on to the next table. Taking an\n> order from table A, then an order from table B, then one from A again, and\n> then one from B again would be a much slower process. By the same token, a\n> processor can do its job better if it works on data that’s close to other\n> data (as it is on the stack) rather than farther away (as it can be on the\n> heap). Allocating a large amount of space on the heap can also take time.\n>\n> When your code calls a function, the values passed into the function\n> (including, potentially, pointers to data on the heap) and the function’s\n> local variables get pushed onto the stack. When the function is over, those\n> values get popped off the stack.\n>\n> Keeping track of what parts of code are using what data on the heap,\n> minimizing the amount of duplicate data on the heap, and cleaning up unused\n> data on the heap so you don’t run out of space are all problems that ownership\n> addresses. Once you understand ownership, you won’t need to think about the\n> stack and the heap very often, but knowing that managing heap data is why\n> ownership exists can help explain why it works the way it does.\n\n### Ownership Rules\n\nFirst, let’s take a look at the ownership rules. Keep these rules in mind as we\nwork through the examples that illustrate them:\n\n* Each value in Rust has a variable that’s called its *owner*.\n* There can only be one owner at a time.\n* When the owner goes out of scope, the value will be dropped.\n\n### Variable Scope\n\nWe’ve walked through an example of a Rust program already in Chapter 2. Now\nthat we’re past basic syntax, we won’t include all the `fn main() {` code in\nexamples, so if you’re following along, you’ll have to put the following\nexamples inside a `main` function manually. As a result, our examples will be a\nbit more concise, letting us focus on the actual details rather than\nboilerplate code.\n\nAs a first example of ownership, we’ll look at the *scope* of some variables. A\nscope is the range within a program for which an item is valid. Let’s say we\nhave a variable that looks like this:\n\n```rust\nlet s = \"hello\";\n```\n\nThe variable `s` refers to a string literal, where the value of the string is\nhardcoded into the text of our program. The variable is valid from the point at\nwhich it’s declared until the end of the current *scope*. Listing 4-1 has\ncomments annotating where the variable `s` is valid.\n\n```rust\n# fn main() {\n    {                      // s is not valid here, it’s not yet declared\n        let s = \"hello\";   // s is valid from this point forward\n\n        // do stuff with s\n    }                      // this scope is now over, and s is no longer valid\n# }\n```\n\n<span class=\"caption\">Listing 4-1: A variable and the scope in which it is\nvalid</span>\n\nIn other words, there are two important points in time here:\n\n* When `s` comes *into scope*, it is valid.\n* It remains valid until it goes *out of scope*.\n\nAt this point, the relationship between scopes and when variables are valid is\nsimilar to that in other programming languages. Now we’ll build on top of this\nunderstanding by introducing the `String` type.\n\n### The `String` Type\n\nTo illustrate the rules of ownership, we need a data type that is more complex\nthan the ones we covered in the [“Data Types”][data-types]<!-- ignore -->\nsection of Chapter 3. The types covered previously are all stored on the stack\nand popped off the stack when their scope is over, but we want to look at data\nthat is stored on the heap and explore how Rust knows when to clean up that\ndata.\n\nWe’ll use `String` as the example here and concentrate on the parts of `String`\nthat relate to ownership. These aspects also apply to other complex data types,\nwhether they are provided by the standard library or created by you. We’ll\ndiscuss `String` in more depth in Chapter 8.\n\nWe’ve already seen string literals, where a string value is hardcoded into our\nprogram. String literals are convenient, but they aren’t suitable for every\nsituation in which we may want to use text. One reason is that they’re\nimmutable. Another is that not every string value can be known when we write\nour code: for example, what if we want to take user input and store it? For\nthese situations, Rust has a second string type, `String`. This type is\nallocated on the heap and as such is able to store an amount of text that is\nunknown to us at compile time. You can create a `String` from a string literal\nusing the `from` function, like so:\n\n```rust\nlet s = String::from(\"hello\");\n```\n\nThe double colon (`::`) is an operator that allows us to namespace this\nparticular `from` function under the `String` type rather than using some sort\nof name like `string_from`. We’ll discuss this syntax more in the [“Method\nSyntax”][method-syntax]<!-- ignore --> section of Chapter 5 and when we talk\nabout namespacing with modules in [“Paths for Referring to an Item in the\nModule Tree”][paths-module-tree]<!-- ignore --> in Chapter 7.\n\nThis kind of string *can* be mutated:\n\n```rust\n# fn main() {\n    let mut s = String::from(\"hello\");\n\n    s.push_str(\", world!\"); // push_str() appends a literal to a String\n\n    println!(\"{}\", s); // This will print `hello, world!`\n# }\n```\n\nSo, what’s the difference here? Why can `String` be mutated but literals\ncannot? The difference is how these two types deal with memory.\n\n### Memory and Allocation\n\nIn the case of a string literal, we know the contents at compile time, so the\ntext is hardcoded directly into the final executable. This is why string\nliterals are fast and efficient. But these properties only come from the string\nliteral’s immutability. Unfortunately, we can’t put a blob of memory into the\nbinary for each piece of text whose size is unknown at compile time and whose\nsize might change while running the program.\n\nWith the `String` type, in order to support a mutable, growable piece of text,\nwe need to allocate an amount of memory on the heap, unknown at compile time,\nto hold the contents. This means:\n\n* The memory must be requested from the memory allocator at runtime.\n* We need a way of returning this memory to the allocator when we’re\n  done with our `String`.\n\nThat first part is done by us: when we call `String::from`, its implementation\nrequests the memory it needs. This is pretty much universal in programming\nlanguages.\n\nHowever, the second part is different. In languages with a *garbage collector\n(GC)*, the GC keeps track and cleans up memory that isn’t being used anymore,\nand we don’t need to think about it. Without a GC, it’s our responsibility to\nidentify when memory is no longer being used and call code to explicitly return\nit, just as we did to request it. Doing this correctly has historically been a\ndifficult programming problem. If we forget, we’ll waste memory. If we do it\ntoo early, we’ll have an invalid variable. If we do it twice, that’s a bug too.\nWe need to pair exactly one `allocate` with exactly one `free`.\n\nRust takes a different path: the memory is automatically returned once the\nvariable that owns it goes out of scope. Here’s a version of our scope example\nfrom Listing 4-1 using a `String` instead of a string literal:\n\n```rust\n# fn main() {\n    {\n        let s = String::from(\"hello\"); // s is valid from this point forward\n\n        // do stuff with s\n    }                                  // this scope is now over, and s is no\n                                       // longer valid\n# }\n```\n\nThere is a natural point at which we can return the memory our `String` needs\nto the allocator: when `s` goes out of scope. When a variable goes out\nof scope, Rust calls a special function for us. This function is called `drop`,\nand it’s where the author of `String` can put the code to return the memory.\nRust calls `drop` automatically at the closing curly bracket.\n\n> Note: In C++, this pattern of deallocating resources at the end of an item’s\n> lifetime is sometimes called *Resource Acquisition Is Initialization (RAII)*.\n> The `drop` function in Rust will be familiar to you if you’ve used RAII\n> patterns.\n\nThis pattern has a profound impact on the way Rust code is written. It may seem\nsimple right now, but the behavior of code can be unexpected in more\ncomplicated situations when we want to have multiple variables use the data\nwe’ve allocated on the heap. Let’s explore some of those situations now.\n\n#### Ways Variables and Data Interact: Move\n\nMultiple variables can interact with the same data in different ways in Rust.\nLet’s look at an example using an integer in Listing 4-2.\n\n```rust\n# fn main() {\n    let x = 5;\n    let y = x;\n# }\n```\n\n<span class=\"caption\">Listing 4-2: Assigning the integer value of variable `x`\nto `y`</span>\n\nWe can probably guess what this is doing: “bind the value `5` to `x`; then make\na copy of the value in `x` and bind it to `y`.” We now have two variables, `x`\nand `y`, and both equal `5`. This is indeed what is happening, because integers\nare simple values with a known, fixed size, and these two `5` values are pushed\nonto the stack.\n\nNow let’s look at the `String` version:\n\n```rust\n# fn main() {\n    let s1 = String::from(\"hello\");\n    let s2 = s1;\n# }\n```\n\nThis looks very similar to the previous code, so we might assume that the way\nit works would be the same: that is, the second line would make a copy of the\nvalue in `s1` and bind it to `s2`. But this isn’t quite what happens.\n\nTake a look at Figure 4-1 to see what is happening to `String` under the\ncovers. A `String` is made up of three parts, shown on the left: a pointer to\nthe memory that holds the contents of the string, a length, and a capacity.\nThis group of data is stored on the stack. On the right is the memory on the\nheap that holds the contents.\n\n<img alt=\"String in memory\" src=\"img/trpl04-01.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-1: Representation in memory of a `String`\nholding the value `\"hello\"` bound to `s1`</span>\n\nThe length is how much memory, in bytes, the contents of the `String` is\ncurrently using. The capacity is the total amount of memory, in bytes, that the\n`String` has received from the allocator. The difference between length\nand capacity matters, but not in this context, so for now, it’s fine to ignore\nthe capacity.\n\nWhen we assign `s1` to `s2`, the `String` data is copied, meaning we copy the\npointer, the length, and the capacity that are on the stack. We do not copy the\ndata on the heap that the pointer refers to. In other words, the data\nrepresentation in memory looks like Figure 4-2.\n\n<img alt=\"s1 and s2 pointing to the same value\" src=\"img/trpl04-02.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-2: Representation in memory of the variable `s2`\nthat has a copy of the pointer, length, and capacity of `s1`</span>\n\nThe representation does *not* look like Figure 4-3, which is what memory would\nlook like if Rust instead copied the heap data as well. If Rust did this, the\noperation `s2 = s1` could be very expensive in terms of runtime performance if\nthe data on the heap were large.\n\n<img alt=\"s1 and s2 to two places\" src=\"img/trpl04-03.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-3: Another possibility for what `s2 = s1` might\ndo if Rust copied the heap data as well</span>\n\nEarlier, we said that when a variable goes out of scope, Rust automatically\ncalls the `drop` function and cleans up the heap memory for that variable. But\nFigure 4-2 shows both data pointers pointing to the same location. This is a\nproblem: when `s2` and `s1` go out of scope, they will both try to free the\nsame memory. This is known as a *double free* error and is one of the memory\nsafety bugs we mentioned previously. Freeing memory twice can lead to memory\ncorruption, which can potentially lead to security vulnerabilities.\n\nTo ensure memory safety, there’s one more detail to what happens in this\nsituation in Rust. Instead of trying to copy the allocated memory, Rust\nconsiders `s1` to no longer be valid and, therefore, Rust doesn’t need to free\nanything when `s1` goes out of scope. Check out what happens when you try to\nuse `s1` after `s2` is created; it won’t work:\n\n```rust,ignore,does_not_compile\n# fn main() {\n    let s1 = String::from(\"hello\");\n    let s2 = s1;\n\n    println!(\"{}, world!\", s1);\n# }\n```\n\nYou’ll get an error like this because Rust prevents you from using the\ninvalidated reference:\n\n```text\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0382]: borrow of moved value: `s1`\n --> src/main.rs:5:28\n  |\n2 |     let s1 = String::from(\"hello\");\n  |         -- move occurs because `s1` has type `std::string::String`, which does not implement the `Copy` trait\n3 |     let s2 = s1;\n  |              -- value moved here\n4 | \n5 |     println!(\"{}, world!\", s1);\n  |                            ^^ value borrowed here after move\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `ownership`.\n\nTo learn more, run the command again with --verbose.\n```\n\nIf you’ve heard the terms *shallow copy* and *deep copy* while working with\nother languages, the concept of copying the pointer, length, and capacity\nwithout copying the data probably sounds like making a shallow copy. But\nbecause Rust also invalidates the first variable, instead of being called a\nshallow copy, it’s known as a *move*. In this example, we would say that\n`s1` was *moved* into `s2`. So what actually happens is shown in Figure 4-4.\n\n<img alt=\"s1 moved to s2\" src=\"img/trpl04-04.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-4: Representation in memory after `s1` has been\ninvalidated</span>\n\nThat solves our problem! With only `s2` valid, when it goes out of scope, it\nalone will free the memory, and we’re done.\n\nIn addition, there’s a design choice that’s implied by this: Rust will never\nautomatically create “deep” copies of your data. Therefore, any *automatic*\ncopying can be assumed to be inexpensive in terms of runtime performance.\n\n#### Ways Variables and Data Interact: Clone\n\nIf we *do* want to deeply copy the heap data of the `String`, not just the\nstack data, we can use a common method called `clone`. We’ll discuss method\nsyntax in Chapter 5, but because methods are a common feature in many\nprogramming languages, you’ve probably seen them before.\n\nHere’s an example of the `clone` method in action:\n\n```rust\n# fn main() {\n    let s1 = String::from(\"hello\");\n    let s2 = s1.clone();\n\n    println!(\"s1 = {}, s2 = {}\", s1, s2);\n# }\n```\n\nThis works just fine and explicitly produces the behavior shown in Figure 4-3,\nwhere the heap data *does* get copied.\n\nWhen you see a call to `clone`, you know that some arbitrary code is being\nexecuted and that code may be expensive. It’s a visual indicator that something\ndifferent is going on.\n\n#### Stack-Only Data: Copy\n\nThere’s another wrinkle we haven’t talked about yet. This code using integers,\npart of which was shown in Listing 4-2, works and is valid:\n\n```rust\n# fn main() {\n    let x = 5;\n    let y = x;\n\n    println!(\"x = {}, y = {}\", x, y);\n# }\n```\n\nBut this code seems to contradict what we just learned: we don’t have a call to\n`clone`, but `x` is still valid and wasn’t moved into `y`.\n\nThe reason is that types such as integers that have a known size at compile\ntime are stored entirely on the stack, so copies of the actual values are quick\nto make. That means there’s no reason we would want to prevent `x` from being\nvalid after we create the variable `y`. In other words, there’s no difference\nbetween deep and shallow copying here, so calling `clone` wouldn’t do anything\ndifferent from the usual shallow copying and we can leave it out.\n\nRust has a special annotation called the `Copy` trait that we can place on\ntypes like integers that are stored on the stack (we’ll talk more about traits\nin Chapter 10). If a type has the `Copy` trait, an older variable is still\nusable after assignment. Rust won’t let us annotate a type with the `Copy`\ntrait if the type, or any of its parts, has implemented the `Drop` trait. If\nthe type needs something special to happen when the value goes out of scope and\nwe add the `Copy` annotation to that type, we’ll get a compile-time error. To\nlearn about how to add the `Copy` annotation to your type, see [“Derivable\nTraits”][derivable-traits]<!-- ignore --> in Appendix C.\n\nSo what types are `Copy`? You can check the documentation for the given type to\nbe sure, but as a general rule, any group of simple scalar values can be\n`Copy`, and nothing that requires allocation or is some form of resource is\n`Copy`. Here are some of the types that are `Copy`:\n\n* All the integer types, such as `u32`.\n* The Boolean type, `bool`, with values `true` and `false`.\n* All the floating point types, such as `f64`.\n* The character type, `char`.\n* Tuples, if they only contain types that are also `Copy`. For example,\n  `(i32, i32)` is `Copy`, but `(i32, String)` is not.\n\n### Ownership and Functions\n\nThe semantics for passing a value to a function are similar to those for\nassigning a value to a variable. Passing a variable to a function will move or\ncopy, just as assignment does. Listing 4-3 has an example with some annotations\nshowing where variables go into and out of scope.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let s = String::from(\"hello\");  // s comes into scope\n\n    takes_ownership(s);             // s\'s value moves into the function...\n                                    // ... and so is no longer valid here\n\n    let x = 5;                      // x comes into scope\n\n    makes_copy(x);                  // x would move into the function,\n                                    // but i32 is Copy, so it’s okay to still\n                                    // use x afterward\n\n} // Here, x goes out of scope, then s. But because s\'s value was moved, nothing\n  // special happens.\n\nfn takes_ownership(some_string: String) { // some_string comes into scope\n    println!(\"{}\", some_string);\n} // Here, some_string goes out of scope and `drop` is called. The backing\n  // memory is freed.\n\nfn makes_copy(some_integer: i32) { // some_integer comes into scope\n    println!(\"{}\", some_integer);\n} // Here, some_integer goes out of scope. Nothing special happens.\n```\n\n<span class=\"caption\">Listing 4-3: Functions with ownership and scope\nannotated</span>\n\nIf we tried to use `s` after the call to `takes_ownership`, Rust would throw a\ncompile-time error. These static checks protect us from mistakes. Try adding\ncode to `main` that uses `s` and `x` to see where you can use them and where\nthe ownership rules prevent you from doing so.\n\n### Return Values and Scope\n\nReturning values can also transfer ownership. Listing 4-4 is an example with\nsimilar annotations to those in Listing 4-3.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let s1 = gives_ownership();         // gives_ownership moves its return\n                                        // value into s1\n\n    let s2 = String::from(\"hello\");     // s2 comes into scope\n\n    let s3 = takes_and_gives_back(s2);  // s2 is moved into\n                                        // takes_and_gives_back, which also\n                                        // moves its return value into s3\n} // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was\n  // moved, so nothing happens. s1 goes out of scope and is dropped.\n\nfn gives_ownership() -> String {             // gives_ownership will move its\n                                             // return value into the function\n                                             // that calls it\n\n    let some_string = String::from(\"hello\"); // some_string comes into scope\n\n    some_string                              // some_string is returned and\n                                             // moves out to the calling\n                                             // function\n}\n\n// takes_and_gives_back will take a String and return one\nfn takes_and_gives_back(a_string: String) -> String { // a_string comes into\n                                                      // scope\n\n    a_string  // a_string is returned and moves out to the calling function\n}\n```\n\n<span class=\"caption\">Listing 4-4: Transferring ownership of return\nvalues</span>\n\nThe ownership of a variable follows the same pattern every time: assigning a\nvalue to another variable moves it. When a variable that includes data on the\nheap goes out of scope, the value will be cleaned up by `drop` unless the data\nhas been moved to be owned by another variable.\n\nTaking ownership and then returning ownership with every function is a bit\ntedious. What if we want to let a function use a value but not take ownership?\nIt’s quite annoying that anything we pass in also needs to be passed back if we\nwant to use it again, in addition to any data resulting from the body of the\nfunction that we might want to return as well.\n\nIt’s possible to return multiple values using a tuple, as shown in Listing 4-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let (s2, len) = calculate_length(s1);\n\n    println!(\"The length of \'{}\' is {}.\", s2, len);\n}\n\nfn calculate_length(s: String) -> (String, usize) {\n    let length = s.len(); // len() returns the length of a String\n\n    (s, length)\n}\n```\n\n<span class=\"caption\">Listing 4-5: Returning ownership of parameters</span>\n\nBut this is too much ceremony and a lot of work for a concept that should be\ncommon. Luckily for us, Rust has a feature for this concept, called\n*references*.\n\n[data-types]: ch03-02-data-types.html#data-types\n[derivable-traits]: appendix-03-derivable-traits.html\n[method-syntax]: ch05-03-method-syntax.html#method-syntax\n[paths-module-tree]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\n", number: Some(SectionNumber([4, 1])), sub_items: [], path: "ch04-01-what-is-ownership.md", parent_names: ["Understanding Ownership"] }), Chapter(Chapter { name: "References and Borrowing", content: "## References and Borrowing\n\nThe issue with the tuple code in Listing 4-5 is that we have to return the\n`String` to the calling function so we can still use the `String` after the\ncall to `calculate_length`, because the `String` was moved into\n`calculate_length`.\n\nHere is how you would define and use a `calculate_length` function that has a\nreference to an object as a parameter instead of taking ownership of the\nvalue:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of \'{}\' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nFirst, notice that all the tuple code in the variable declaration and the\nfunction return value is gone. Second, note that we pass `&s1` into\n`calculate_length` and, in its definition, we take `&String` rather than\n`String`.\n\nThese ampersands are *references*, and they allow you to refer to some value\nwithout taking ownership of it. Figure 4-5 shows a diagram.\n\n<img alt=\"&String s pointing at String s1\" src=\"img/trpl04-05.svg\" class=\"center\" />\n\n<span class=\"caption\">Figure 4-5: A diagram of `&String s` pointing at `String\ns1`</span>\n\n> Note: The opposite of referencing by using `&` is *dereferencing*, which is\n> accomplished with the dereference operator, `*`. We’ll see some uses of the\n> dereference operator in Chapter 8 and discuss details of dereferencing in\n> Chapter 15.\n\nLet’s take a closer look at the function call here:\n\n```rust\n# fn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n# \n#     println!(\"The length of \'{}\' is {}.\", s1, len);\n# }\n# \n# fn calculate_length(s: &String) -> usize {\n#     s.len()\n# }\n```\n\nThe `&s1` syntax lets us create a reference that *refers* to the value of `s1`\nbut does not own it. Because it does not own it, the value it points to will\nnot be dropped when the reference goes out of scope.\n\nLikewise, the signature of the function uses `&` to indicate that the type of\nthe parameter `s` is a reference. Let’s add some explanatory annotations:\n\n```rust\n# fn main() {\n#     let s1 = String::from(\"hello\");\n# \n#     let len = calculate_length(&s1);\n# \n#     println!(\"The length of \'{}\' is {}.\", s1, len);\n# }\n# \nfn calculate_length(s: &String) -> usize { // s is a reference to a String\n    s.len()\n} // Here, s goes out of scope. But because it does not have ownership of what\n  // it refers to, nothing happens.\n```\n\nThe scope in which the variable `s` is valid is the same as any function\nparameter’s scope, but we don’t drop what the reference points to when it goes\nout of scope because we don’t have ownership. When functions have references as\nparameters instead of the actual values, we won’t need to return the values in\norder to give back ownership, because we never had ownership.\n\nWe call having references as function parameters *borrowing*. As in real life,\nif a person owns something, you can borrow it from them. When you’re done, you\nhave to give it back.\n\nSo what happens if we try to modify something we’re borrowing? Try the code in\nListing 4-6. Spoiler alert: it doesn’t work!\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn main() {\n    let s = String::from(\"hello\");\n\n    change(&s);\n}\n\nfn change(some_string: &String) {\n    some_string.push_str(\", world\");\n}\n```\n\n<span class=\"caption\">Listing 4-6: Attempting to modify a borrowed value</span>\n\nHere’s the error:\n\n```text\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0596]: cannot borrow `*some_string` as mutable, as it is behind a `&` reference\n --> src/main.rs:8:5\n  |\n7 | fn change(some_string: &String) {\n  |                        ------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n8 |     some_string.push_str(\", world\");\n  |     ^^^^^^^^^^^ `some_string` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `ownership`.\n\nTo learn more, run the command again with --verbose.\n```\n\nJust as variables are immutable by default, so are references. We’re not\nallowed to modify something we have a reference to.\n\n### Mutable References\n\nWe can fix the error in the code from Listing 4-6 with just a small tweak:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let mut s = String::from(\"hello\");\n\n    change(&mut s);\n}\n\nfn change(some_string: &mut String) {\n    some_string.push_str(\", world\");\n}\n```\n\nFirst, we had to change `s` to be `mut`. Then we had to create a mutable\nreference with `&mut s` and accept a mutable reference with `some_string: &mut\nString`.\n\nBut mutable references have one big restriction: you can have only one mutable\nreference to a particular piece of data in a particular scope. This code will\nfail:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n# fn main() {\n    let mut s = String::from(\"hello\");\n\n    let r1 = &mut s;\n    let r2 = &mut s;\n\n    println!(\"{}, {}\", r1, r2);\n# }\n```\n\nHere’s the error:\n\n```text\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0499]: cannot borrow `s` as mutable more than once at a time\n --> src/main.rs:5:14\n  |\n4 |     let r1 = &mut s;\n  |              ------ first mutable borrow occurs here\n5 |     let r2 = &mut s;\n  |              ^^^^^^ second mutable borrow occurs here\n6 | \n7 |     println!(\"{}, {}\", r1, r2);\n  |                        -- first borrow later used here\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0499`.\nerror: could not compile `ownership`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThis restriction allows for mutation but in a very controlled fashion. It’s\nsomething that new Rustaceans struggle with, because most languages let you\nmutate whenever you’d like.\n\nThe benefit of having this restriction is that Rust can prevent data races at\ncompile time. A *data race* is similar to a race condition and happens when\nthese three behaviors occur:\n\n* Two or more pointers access the same data at the same time.\n* At least one of the pointers is being used to write to the data.\n* There’s no mechanism being used to synchronize access to the data.\n\nData races cause undefined behavior and can be difficult to diagnose and fix\nwhen you’re trying to track them down at runtime; Rust prevents this problem\nfrom happening because it won’t even compile code with data races!\n\nAs always, we can use curly brackets to create a new scope, allowing for\nmultiple mutable references, just not *simultaneous* ones:\n\n```rust\n# fn main() {\n    let mut s = String::from(\"hello\");\n\n    {\n        let r1 = &mut s;\n    } // r1 goes out of scope here, so we can make a new reference with no problems.\n\n    let r2 = &mut s;\n# }\n```\n\nA similar rule exists for combining mutable and immutable references. This code\nresults in an error:\n\n```rust,ignore,does_not_compile\n# fn main() {\n    let mut s = String::from(\"hello\");\n\n    let r1 = &s; // no problem\n    let r2 = &s; // no problem\n    let r3 = &mut s; // BIG PROBLEM\n\n    println!(\"{}, {}, and {}\", r1, r2, r3);\n# }\n```\n\nHere’s the error:\n\n```text\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable\n --> src/main.rs:6:14\n  |\n4 |     let r1 = &s; // no problem\n  |              -- immutable borrow occurs here\n5 |     let r2 = &s; // no problem\n6 |     let r3 = &mut s; // BIG PROBLEM\n  |              ^^^^^^ mutable borrow occurs here\n7 | \n8 |     println!(\"{}, {}, and {}\", r1, r2, r3);\n  |                                -- immutable borrow later used here\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\nerror: could not compile `ownership`.\n\nTo learn more, run the command again with --verbose.\n```\n\nWhew! We *also* cannot have a mutable reference while we have an immutable one.\nUsers of an immutable reference don’t expect the values to suddenly change out\nfrom under them! However, multiple immutable references are okay because no one\nwho is just reading the data has the ability to affect anyone else’s reading of\nthe data.\n\nNote that a reference’s scope starts from where it is introduced and continues\nthrough the last time that reference is used. For instance, this code will\ncompile because the last usage of the immutable references occurs before the\nmutable reference is introduced:\n\n```rust,edition2018\n# fn main() {\n    let mut s = String::from(\"hello\");\n\n    let r1 = &s; // no problem\n    let r2 = &s; // no problem\n    println!(\"{} and {}\", r1, r2);\n    // r1 and r2 are no longer used after this point\n\n    let r3 = &mut s; // no problem\n    println!(\"{}\", r3);\n# }\n```\n\nThe scopes of the immutable references `r1` and `r2` end after the `println!`\nwhere they are last used, which is before the mutable reference `r3` is\ncreated. These scopes don’t overlap, so this code is allowed.\n\nEven though borrowing errors may be frustrating at times, remember that it’s\nthe Rust compiler pointing out a potential bug early (at compile time rather\nthan at runtime) and showing you exactly where the problem is. Then you don’t\nhave to track down why your data isn’t what you thought it was.\n\n### Dangling References\n\nIn languages with pointers, it’s easy to erroneously create a *dangling\npointer*, a pointer that references a location in memory that may have been\ngiven to someone else, by freeing some memory while preserving a pointer to\nthat memory. In Rust, by contrast, the compiler guarantees that references will\nnever be dangling references: if you have a reference to some data, the\ncompiler will ensure that the data will not go out of scope before the\nreference to the data does.\n\nLet’s try to create a dangling reference, which Rust will prevent with a\ncompile-time error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn main() {\n    let reference_to_nothing = dangle();\n}\n\nfn dangle() -> &String {\n    let s = String::from(\"hello\");\n\n    &s\n}\n```\n\nHere’s the error:\n\n```text\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0106]: missing lifetime specifier\n --> src/main.rs:5:16\n  |\n5 | fn dangle() -> &String {\n  |                ^ help: consider giving it a \'static lifetime: `&\'static`\n  |\n  = help: this function\'s return type contains a borrowed value, but there is no value for it to be borrowed from\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0106`.\nerror: could not compile `ownership`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThis error message refers to a feature we haven’t covered yet: lifetimes. We’ll\ndiscuss lifetimes in detail in Chapter 10. But, if you disregard the parts\nabout lifetimes, the message does contain the key to why this code is a problem:\n\n```text\nthis function\'s return type contains a borrowed value, but there is no value\nfor it to be borrowed from.\n```\n\nLet’s take a closer look at exactly what’s happening at each stage of our\n`dangle` code:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n# fn main() {\n#     let reference_to_nothing = dangle();\n# }\n# \nfn dangle() -> &String { // dangle returns a reference to a String\n\n    let s = String::from(\"hello\"); // s is a new String\n\n    &s // we return a reference to the String, s\n} // Here, s goes out of scope, and is dropped. Its memory goes away.\n  // Danger!\n```\n\nBecause `s` is created inside `dangle`, when the code of `dangle` is finished,\n`s` will be deallocated. But we tried to return a reference to it. That means\nthis reference would be pointing to an invalid `String`. That’s no good! Rust\nwon’t let us do this.\n\nThe solution here is to return the `String` directly:\n\n```rust\n# fn main() {\n#     let string = no_dangle();\n# }\n# \nfn no_dangle() -> String {\n    let s = String::from(\"hello\");\n\n    s\n}\n```\n\nThis works without any problems. Ownership is moved out, and nothing is\ndeallocated.\n\n### The Rules of References\n\nLet’s recap what we’ve discussed about references:\n\n* At any given time, you can have *either* one mutable reference *or* any\n  number of immutable references.\n* References must always be valid.\n\nNext, we’ll look at a different kind of reference: slices.\n", number: Some(SectionNumber([4, 2])), sub_items: [], path: "ch04-02-references-and-borrowing.md", parent_names: ["Understanding Ownership"] }), Chapter(Chapter { name: "The Slice Type", content: "## The Slice Type\n\nAnother data type that does not have ownership is the *slice*. Slices let you\nreference a contiguous sequence of elements in a collection rather than the\nwhole collection.\n\nHere’s a small programming problem: write a function that takes a string and\nreturns the first word it finds in that string. If the function doesn’t find a\nspace in the string, the whole string must be one word, so the entire string\nshould be returned.\n\nLet’s think about the signature of this function:\n\n```rust,ignore\nfn first_word(s: &String) -> ?\n```\n\nThis function, `first_word`, has a `&String` as a parameter. We don’t want\nownership, so this is fine. But what should we return? We don’t really have a\nway to talk about *part* of a string. However, we could return the index of the\nend of the word. Let’s try that, as shown in Listing 4-7.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn first_word(s: &String) -> usize {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b\' \' {\n            return i;\n        }\n    }\n\n    s.len()\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 4-7: The `first_word` function that returns a\nbyte index value into the `String` parameter</span>\n\nBecause we need to go through the `String` element by element and check whether\na value is a space, we’ll convert our `String` to an array of bytes using the\n`as_bytes` method:\n\n```rust,ignore\n# fn first_word(s: &String) -> usize {\n    let bytes = s.as_bytes();\n# \n#     for (i, &item) in bytes.iter().enumerate() {\n#         if item == b\' \' {\n#             return i;\n#         }\n#     }\n# \n#     s.len()\n# }\n# \n# fn main() {}\n```\n\nNext, we create an iterator over the array of bytes using the `iter` method:\n\n```rust,ignore\n# fn first_word(s: &String) -> usize {\n#     let bytes = s.as_bytes();\n# \n    for (i, &item) in bytes.iter().enumerate() {\n#         if item == b\' \' {\n#             return i;\n#         }\n#     }\n# \n#     s.len()\n# }\n# \n# fn main() {}\n```\n\nWe’ll discuss iterators in more detail in Chapter 13. For now, know that `iter`\nis a method that returns each element in a collection and that `enumerate`\nwraps the result of `iter` and returns each element as part of a tuple instead.\nThe first element of the tuple returned from `enumerate` is the index, and the\nsecond element is a reference to the element. This is a bit more convenient\nthan calculating the index ourselves.\n\nBecause the `enumerate` method returns a tuple, we can use patterns to\ndestructure that tuple, just like everywhere else in Rust. So in the `for`\nloop, we specify a pattern that has `i` for the index in the tuple and `&item`\nfor the single byte in the tuple. Because we get a reference to the element\nfrom `.iter().enumerate()`, we use `&` in the pattern.\n\nInside the `for` loop, we search for the byte that represents the space by\nusing the byte literal syntax. If we find a space, we return the position.\nOtherwise, we return the length of the string by using `s.len()`:\n\n```rust,ignore\n# fn first_word(s: &String) -> usize {\n#     let bytes = s.as_bytes();\n# \n#     for (i, &item) in bytes.iter().enumerate() {\n        if item == b\' \' {\n            return i;\n        }\n    }\n\n    s.len()\n# }\n# \n# fn main() {}\n```\n\nWe now have a way to find out the index of the end of the first word in the\nstring, but there’s a problem. We’re returning a `usize` on its own, but it’s\nonly a meaningful number in the context of the `&String`. In other words,\nbecause it’s a separate value from the `String`, there’s no guarantee that it\nwill still be valid in the future. Consider the program in Listing 4-8 that\nuses the `first_word` function from Listing 4-7.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# fn first_word(s: &String) -> usize {\n#     let bytes = s.as_bytes();\n# \n#     for (i, &item) in bytes.iter().enumerate() {\n#         if item == b\' \' {\n#             return i;\n#         }\n#     }\n# \n#     s.len()\n# }\n# \nfn main() {\n    let mut s = String::from(\"hello world\");\n\n    let word = first_word(&s); // word will get the value 5\n\n    s.clear(); // this empties the String, making it equal to \"\"\n\n    // word still has the value 5 here, but there\'s no more string that\n    // we could meaningfully use the value 5 with. word is now totally invalid!\n}\n```\n\n<span class=\"caption\">Listing 4-8: Storing the result from calling the\n`first_word` function and then changing the `String` contents</span>\n\nThis program compiles without any errors and would also do so if we used `word`\nafter calling `s.clear()`. Because `word` isn’t connected to the state of `s`\nat all, `word` still contains the value `5`. We could use that value `5` with\nthe variable `s` to try to extract the first word out, but this would be a bug\nbecause the contents of `s` have changed since we saved `5` in `word`.\n\nHaving to worry about the index in `word` getting out of sync with the data in\n`s` is tedious and error prone! Managing these indices is even more brittle if\nwe write a `second_word` function. Its signature would have to look like this:\n\n```rust,ignore\nfn second_word(s: &String) -> (usize, usize) {\n```\n\nNow we’re tracking a starting *and* an ending index, and we have even more\nvalues that were calculated from data in a particular state but aren’t tied to\nthat state at all. We now have three unrelated variables floating around that\nneed to be kept in sync.\n\nLuckily, Rust has a solution to this problem: string slices.\n\n### String Slices\n\nA *string slice* is a reference to part of a `String`, and it looks like this:\n\n```rust\n# fn main() {\n    let s = String::from(\"hello world\");\n\n    let hello = &s[0..5];\n    let world = &s[6..11];\n# }\n```\n\nThis is similar to taking a reference to the whole `String` but with the extra\n`[0..5]` bit. Rather than a reference to the entire `String`, it’s a reference\nto a portion of the `String`.\n\nWe can create slices using a range within brackets by specifying\n`[starting_index..ending_index]`, where `starting_index` is the first position\nin the slice and `ending_index` is one more than the last position in the\nslice. Internally, the slice data structure stores the starting position and\nthe length of the slice, which corresponds to `ending_index` minus\n`starting_index`. So in the case of `let world = &s[6..11];`, `world` would be\na slice that contains a pointer to the 7th byte (counting from 1) of `s` with a length value of 5.\n\nFigure 4-6 shows this in a diagram.\n\n<img alt=\"world containing a pointer to the 6th byte of String s and a length 5\" src=\"img/trpl04-06.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-6: String slice referring to part of a\n`String`</span>\n\nWith Rust’s `..` range syntax, if you want to start at the first index (zero),\nyou can drop the value before the two periods. In other words, these are equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet slice = &s[0..2];\nlet slice = &s[..2];\n```\n\nBy the same token, if your slice includes the last byte of the `String`, you\ncan drop the trailing number. That means these are equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet len = s.len();\n\nlet slice = &s[3..len];\nlet slice = &s[3..];\n```\n\nYou can also drop both values to take a slice of the entire string. So these\nare equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet len = s.len();\n\nlet slice = &s[0..len];\nlet slice = &s[..];\n```\n\n> Note: String slice range indices must occur at valid UTF-8 character\n> boundaries. If you attempt to create a string slice in the middle of a\n> multibyte character, your program will exit with an error. For the purposes\n> of introducing string slices, we are assuming ASCII only in this section; a\n> more thorough discussion of UTF-8 handling is in the [“Storing UTF-8 Encoded\n> Text with Strings”][strings]<!-- ignore --> section of Chapter 8.\n\nWith all this information in mind, let’s rewrite `first_word` to return a\nslice. The type that signifies “string slice” is written as `&str`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn first_word(s: &String) -> &str {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b\' \' {\n            return &s[0..i];\n        }\n    }\n\n    &s[..]\n}\n# \n# fn main() {}\n```\n\nWe get the index for the end of the word in the same way as we did in Listing\n4-7, by looking for the first occurrence of a space. When we find a space, we\nreturn a string slice using the start of the string and the index of the space\nas the starting and ending indices.\n\nNow when we call `first_word`, we get back a single value that is tied to the\nunderlying data. The value is made up of a reference to the starting point of\nthe slice and the number of elements in the slice.\n\nReturning a slice would also work for a `second_word` function:\n\n```rust,ignore\nfn second_word(s: &String) -> &str {\n```\n\nWe now have a straightforward API that’s much harder to mess up, because the\ncompiler will ensure the references into the `String` remain valid. Remember\nthe bug in the program in Listing 4-8, when we got the index to the end of the\nfirst word but then cleared the string so our index was invalid? That code was\nlogically incorrect but didn’t show any immediate errors. The problems would\nshow up later if we kept trying to use the first word index with an emptied\nstring. Slices make this bug impossible and let us know we have a problem with\nour code much sooner. Using the slice version of `first_word` will throw a\ncompile-time error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n# fn first_word(s: &String) -> &str {\n#     let bytes = s.as_bytes();\n# \n#     for (i, &item) in bytes.iter().enumerate() {\n#         if item == b\' \' {\n#             return &s[0..i];\n#         }\n#     }\n# \n#     &s[..]\n# }\n# \nfn main() {\n    let mut s = String::from(\"hello world\");\n\n    let word = first_word(&s);\n\n    s.clear(); // error!\n\n    println!(\"the first word is: {}\", word);\n}\n```\n\nHere’s the compiler error:\n\n```text\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable\n  --> src/main.rs:18:5\n   |\n16 |     let word = first_word(&s);\n   |                           -- immutable borrow occurs here\n17 | \n18 |     s.clear(); // error!\n   |     ^^^^^^^^^ mutable borrow occurs here\n19 | \n20 |     println!(\"the first word is: {}\", word);\n   |                                       ---- immutable borrow later used here\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\nerror: could not compile `ownership`.\n\nTo learn more, run the command again with --verbose.\n```\n\nRecall from the borrowing rules that if we have an immutable reference to\nsomething, we cannot also take a mutable reference. Because `clear` needs to\ntruncate the `String`, it needs to get a mutable reference. Rust disallows\nthis, and compilation fails. Not only has Rust made our API easier to use, but\nit has also eliminated an entire class of errors at compile time!\n\n#### String Literals Are Slices\n\nRecall that we talked about string literals being stored inside the binary. Now\nthat we know about slices, we can properly understand string literals:\n\n```rust\nlet s = \"Hello, world!\";\n```\n\nThe type of `s` here is `&str`: it’s a slice pointing to that specific point of\nthe binary. This is also why string literals are immutable; `&str` is an\nimmutable reference.\n\n#### String Slices as Parameters\n\nKnowing that you can take slices of literals and `String` values leads us to\none more improvement on `first_word`, and that’s its signature:\n\n```rust,ignore\nfn first_word(s: &String) -> &str {\n```\n\nA more experienced Rustacean would write the signature shown in Listing 4-9\ninstead because it allows us to use the same function on both `&String` values\nand `&str` values.\n\n```rust,ignore\nfn first_word(s: &str) -> &str {\n#     let bytes = s.as_bytes();\n# \n#     for (i, &item) in bytes.iter().enumerate() {\n#         if item == b\' \' {\n#             return &s[0..i];\n#         }\n#     }\n# \n#     &s[..]\n# }\n# \n# fn main() {\n#     let my_string = String::from(\"hello world\");\n# \n#     // first_word works on slices of `String`s\n#     let word = first_word(&my_string[..]);\n# \n#     let my_string_literal = \"hello world\";\n# \n#     // first_word works on slices of string literals\n#     let word = first_word(&my_string_literal[..]);\n# \n#     // Because string literals *are* string slices already,\n#     // this works too, without the slice syntax!\n#     let word = first_word(my_string_literal);\n# }\n```\n\n<span class=\"caption\">Listing 4-9: Improving the `first_word` function by using\na string slice for the type of the `s` parameter</span>\n\nIf we have a string slice, we can pass that directly. If we have a `String`, we\ncan pass a slice of the entire `String`. Defining a function to take a string\nslice instead of a reference to a `String` makes our API more general and useful\nwithout losing any functionality:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# fn first_word(s: &str) -> &str {\n#     let bytes = s.as_bytes();\n# \n#     for (i, &item) in bytes.iter().enumerate() {\n#         if item == b\' \' {\n#             return &s[0..i];\n#         }\n#     }\n# \n#     &s[..]\n# }\n# \nfn main() {\n    let my_string = String::from(\"hello world\");\n\n    // first_word works on slices of `String`s\n    let word = first_word(&my_string[..]);\n\n    let my_string_literal = \"hello world\";\n\n    // first_word works on slices of string literals\n    let word = first_word(&my_string_literal[..]);\n\n    // Because string literals *are* string slices already,\n    // this works too, without the slice syntax!\n    let word = first_word(my_string_literal);\n}\n```\n\n### Other Slices\n\nString slices, as you might imagine, are specific to strings. But there’s a\nmore general slice type, too. Consider this array:\n\n```rust\nlet a = [1, 2, 3, 4, 5];\n```\n\nJust as we might want to refer to a part of a string, we might want to refer\nto part of an array. We’d do so like this:\n\n```rust\nlet a = [1, 2, 3, 4, 5];\n\nlet slice = &a[1..3];\n```\n\nThis slice has the type `&[i32]`. It works the same way as string slices do, by\nstoring a reference to the first element and a length. You’ll use this kind of\nslice for all sorts of other collections. We’ll discuss these collections in\ndetail when we talk about vectors in Chapter 8.\n\n## Summary\n\nThe concepts of ownership, borrowing, and slices ensure memory safety in Rust\nprograms at compile time. The Rust language gives you control over your memory\nusage in the same way as other systems programming languages, but having the\nowner of data automatically clean up that data when the owner goes out of scope\nmeans you don’t have to write and debug extra code to get this control.\n\nOwnership affects how lots of other parts of Rust work, so we’ll talk about\nthese concepts further throughout the rest of the book. Let’s move on to\nChapter 5 and look at grouping pieces of data together in a `struct`.\n\n[strings]: ch08-02-strings.html#storing-utf-8-encoded-text-with-strings\n", number: Some(SectionNumber([4, 3])), sub_items: [], path: "ch04-03-slices.md", parent_names: ["Understanding Ownership"] })], path: "ch04-00-understanding-ownership.md", parent_names: [] }), Chapter(Chapter { name: "Using Structs to Structure Related Data", content: "# Using Structs to Structure Related Data\n\nA *struct*, or *structure*, is a custom data type that lets you name and\npackage together multiple related values that make up a meaningful group. If\nyou’re familiar with an object-oriented language, a *struct* is like an\nobject’s data attributes. In this chapter, we’ll compare and contrast tuples\nwith structs, demonstrate how to use structs, and discuss how to define methods\nand associated functions to specify behavior associated with a struct’s data.\nStructs and enums (discussed in Chapter 6) are the building blocks for creating\nnew types in your program’s domain to take full advantage of Rust’s compile\ntime type checking.\n", number: Some(SectionNumber([5])), sub_items: [Chapter(Chapter { name: "Defining and Instantiating Structs", content: "## Defining and Instantiating Structs\n\nStructs are similar to tuples, which were discussed in Chapter 3. Like tuples,\nthe pieces of a struct can be different types. Unlike with tuples, you’ll name\neach piece of data so it’s clear what the values mean. As a result of these\nnames, structs are more flexible than tuples: you don’t have to rely on the\norder of the data to specify or access the values of an instance.\n\nTo define a struct, we enter the keyword `struct` and name the entire struct. A\nstruct’s name should describe the significance of the pieces of data being\ngrouped together. Then, inside curly brackets, we define the names and types of\nthe pieces of data, which we call *fields*. For example, Listing 5-1 shows a\nstruct that stores information about a user account.\n\n```rust\nstruct User {\n    username: String,\n    email: String,\n    sign_in_count: u64,\n    active: bool,\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 5-1: A `User` struct definition</span>\n\nTo use a struct after we’ve defined it, we create an *instance* of that struct\nby specifying concrete values for each of the fields. We create an instance by\nstating the name of the struct and then add curly brackets containing `key:\nvalue` pairs, where the keys are the names of the fields and the values are the\ndata we want to store in those fields. We don’t have to specify the fields in\nthe same order in which we declared them in the struct. In other words, the\nstruct definition is like a general template for the type, and instances fill\nin that template with particular data to create values of the type. For\nexample, we can declare a particular user as shown in Listing 5-2.\n\n```rust\n# struct User {\n#     username: String,\n#     email: String,\n#     sign_in_count: u64,\n#     active: bool,\n# }\n# \n# fn main() {\n    let user1 = User {\n        email: String::from(\"someone@example.com\"),\n        username: String::from(\"someusername123\"),\n        active: true,\n        sign_in_count: 1,\n    };\n# }\n```\n\n<span class=\"caption\">Listing 5-2: Creating an instance of the `User`\nstruct</span>\n\nTo get a specific value from a struct, we can use dot notation. If we wanted\njust this user’s email address, we could use `user1.email` wherever we wanted\nto use this value. If the instance is mutable, we can change a value by using\nthe dot notation and assigning into a particular field. Listing 5-3 shows how\nto change the value in the `email` field of a mutable `User` instance.\n\n```rust\n# struct User {\n#     username: String,\n#     email: String,\n#     sign_in_count: u64,\n#     active: bool,\n# }\n# \n# fn main() {\n    let mut user1 = User {\n        email: String::from(\"someone@example.com\"),\n        username: String::from(\"someusername123\"),\n        active: true,\n        sign_in_count: 1,\n    };\n\n    user1.email = String::from(\"anotheremail@example.com\");\n# }\n```\n\n<span class=\"caption\">Listing 5-3: Changing the value in the `email` field of a\n`User` instance</span>\n\nNote that the entire instance must be mutable; Rust doesn’t allow us to mark\nonly certain fields as mutable. As with any expression, we can construct a new\ninstance of the struct as the last expression in the function body to\nimplicitly return that new instance.\n\nListing 5-4 shows a `build_user` function that returns a `User` instance with\nthe given email and username. The `active` field gets the value of `true`, and\nthe `sign_in_count` gets a value of `1`.\n\n```rust\n# struct User {\n#     username: String,\n#     email: String,\n#     sign_in_count: u64,\n#     active: bool,\n# }\n# \nfn build_user(email: String, username: String) -> User {\n    User {\n        email: email,\n        username: username,\n        active: true,\n        sign_in_count: 1,\n    }\n}\n# \n# fn main() {\n#     let user1 = build_user(\n#         String::from(\"someone@example.com\"),\n#         String::from(\"someusername123\"),\n#     );\n# }\n```\n\n<span class=\"caption\">Listing 5-4: A `build_user` function that takes an email\nand username and returns a `User` instance</span>\n\nIt makes sense to name the function parameters with the same name as the struct\nfields, but having to repeat the `email` and `username` field names and\nvariables is a bit tedious. If the struct had more fields, repeating each name\nwould get even more annoying. Luckily, there’s a convenient shorthand!\n\n### Using the Field Init Shorthand when Variables and Fields Have the Same Name\n\nBecause the parameter names and the struct field names are exactly the same in\nListing 5-4, we can use the *field init shorthand* syntax to rewrite\n`build_user` so that it behaves exactly the same but doesn’t have the\nrepetition of `email` and `username`, as shown in Listing 5-5.\n\n```rust\n# struct User {\n#     username: String,\n#     email: String,\n#     sign_in_count: u64,\n#     active: bool,\n# }\n# \nfn build_user(email: String, username: String) -> User {\n    User {\n        email,\n        username,\n        active: true,\n        sign_in_count: 1,\n    }\n}\n# \n# fn main() {\n#     let user1 = build_user(\n#         String::from(\"someone@example.com\"),\n#         String::from(\"someusername123\"),\n#     );\n# }\n```\n\n<span class=\"caption\">Listing 5-5: A `build_user` function that uses field init\nshorthand because the `email` and `username` parameters have the same name as\nstruct fields</span>\n\nHere, we’re creating a new instance of the `User` struct, which has a field\nnamed `email`. We want to set the `email` field’s value to the value in the\n`email` parameter of the `build_user` function. Because the `email` field and\nthe `email` parameter have the same name, we only need to write `email` rather\nthan `email: email`.\n\n### Creating Instances From Other Instances With Struct Update Syntax\n\nIt’s often useful to create a new instance of a struct that uses most of an old\ninstance’s values but changes some. You’ll do this using *struct update syntax*.\n\nFirst, Listing 5-6 shows how we create a new `User` instance in `user2` without\nthe update syntax. We set new values for `email` and `username` but otherwise\nuse the same values from `user1` that we created in Listing 5-2.\n\n```rust\n# struct User {\n#     username: String,\n#     email: String,\n#     sign_in_count: u64,\n#     active: bool,\n# }\n# \n# fn main() {\n#     let user1 = User {\n#         email: String::from(\"someone@example.com\"),\n#         username: String::from(\"someusername123\"),\n#         active: true,\n#         sign_in_count: 1,\n#     };\n# \n    let user2 = User {\n        email: String::from(\"another@example.com\"),\n        username: String::from(\"anotherusername567\"),\n        active: user1.active,\n        sign_in_count: user1.sign_in_count,\n    };\n# }\n```\n\n<span class=\"caption\">Listing 5-6: Creating a new `User` instance using some of\nthe values from `user1`</span>\n\nUsing struct update syntax, we can achieve the same effect with less code, as\nshown in Listing 5-7. The syntax `..` specifies that the remaining fields not\nexplicitly set should have the same value as the fields in the given instance.\n\n```rust\n# struct User {\n#     username: String,\n#     email: String,\n#     sign_in_count: u64,\n#     active: bool,\n# }\n# \n# fn main() {\n#     let user1 = User {\n#         email: String::from(\"someone@example.com\"),\n#         username: String::from(\"someusername123\"),\n#         active: true,\n#         sign_in_count: 1,\n#     };\n# \n    let user2 = User {\n        email: String::from(\"another@example.com\"),\n        username: String::from(\"anotherusername567\"),\n        ..user1\n    };\n# }\n```\n\n<span class=\"caption\">Listing 5-7: Using struct update syntax to set new\n`email` and `username` values for a `User` instance but use the rest of the\nvalues from the fields of the instance in the `user1` variable</span>\n\nThe code in Listing 5-7 also creates an instance in `user2` that has a\ndifferent value for `email` and `username` but has the same values for the\n`active` and `sign_in_count` fields from `user1`.\n\n### Using Tuple Structs without Named Fields to Create Different Types\n\nYou can also define structs that look similar to tuples, called *tuple\nstructs*. Tuple structs have the added meaning the struct name provides but\ndon’t have names associated with their fields; rather, they just have the types\nof the fields. Tuple structs are useful when you want to give the whole tuple a\nname and make the tuple be a different type from other tuples, and naming each\nfield as in a regular struct would be verbose or redundant.\n\nTo define a tuple struct, start with the `struct` keyword and the struct name\nfollowed by the types in the tuple. For example, here are definitions and\nusages of two tuple structs named `Color` and `Point`:\n\n```rust\n# fn main() {\n    struct Color(i32, i32, i32);\n    struct Point(i32, i32, i32);\n\n    let black = Color(0, 0, 0);\n    let origin = Point(0, 0, 0);\n# }\n```\n\nNote that the `black` and `origin` values are different types, because they’re\ninstances of different tuple structs. Each struct you define is its own type,\neven though the fields within the struct have the same types. For example, a\nfunction that takes a parameter of type `Color` cannot take a `Point` as an\nargument, even though both types are made up of three `i32` values. Otherwise,\ntuple struct instances behave like tuples: you can destructure them into their\nindividual pieces, you can use a `.` followed by the index to access an\nindividual value, and so on.\n\n### Unit-Like Structs Without Any Fields\n\nYou can also define structs that don’t have any fields! These are called\n*unit-like structs* because they behave similarly to `()`, the unit type.\nUnit-like structs can be useful in situations in which you need to implement a\ntrait on some type but don’t have any data that you want to store in the type\nitself. We’ll discuss traits in Chapter 10.\n\n> ### Ownership of Struct Data\n>\n> In the `User` struct definition in Listing 5-1, we used the owned `String`\n> type rather than the `&str` string slice type. This is a deliberate choice\n> because we want instances of this struct to own all of its data and for that\n> data to be valid for as long as the entire struct is valid.\n>\n> It’s possible for structs to store references to data owned by something else,\n> but to do so requires the use of *lifetimes*, a Rust feature that we’ll\n> discuss in Chapter 10. Lifetimes ensure that the data referenced by a struct\n> is valid for as long as the struct is. Let’s say you try to store a reference\n> in a struct without specifying lifetimes, like this, which won’t work:\n>\n> <span class=\"filename\">Filename: src/main.rs</span>\n>\n> <!-- CAN\'T EXTRACT SEE https://github.com/rust-lang/mdBook/issues/1127 -->\n>\n> ```rust,ignore,does_not_compile\n> struct User {\n>     username: &str,\n>     email: &str,\n>     sign_in_count: u64,\n>     active: bool,\n> }\n>\n> fn main() {\n>     let user1 = User {\n>         email: \"someone@example.com\",\n>         username: \"someusername123\",\n>         active: true,\n>         sign_in_count: 1,\n>     };\n> }\n> ```\n>\n> The compiler will complain that it needs lifetime specifiers:\n>\n> ```text\n> $ cargo run\n>    Compiling structs v0.1.0 (file:///projects/structs)\n> error[E0106]: missing lifetime specifier\n>  --> src/main.rs:2:15\n>   |\n> 2 |     username: &str,\n>   |               ^ expected lifetime parameter\n>\n> error[E0106]: missing lifetime specifier\n>  --> src/main.rs:3:12\n>   |\n> 3 |     email: &str,\n>   |            ^ expected lifetime parameter\n>\n> error: aborting due to 2 previous errors\n>\n> For more information about this error, try `rustc --explain E0106`.\n> error: could not compile `structs`.\n>\n> To learn more, run the command again with --verbose.\n> ```\n>\n> In Chapter 10, we’ll discuss how to fix these errors so you can store\n> references in structs, but for now, we’ll fix errors like these using owned\n> types like `String` instead of references like `&str`.\n\n<!-- manual-regeneration\nfor the error above\nafter running update-rustc.sh:\npbcopy < listings/ch05-using-structs-to-structure-related-data/no-listing-02-reference-in-struct/output.txt\npaste above\nadd `> ` before every line -->\n", number: Some(SectionNumber([5, 1])), sub_items: [], path: "ch05-01-defining-structs.md", parent_names: ["Using Structs to Structure Related Data"] }), Chapter(Chapter { name: "An Example Program Using Structs", content: "## An Example Program Using Structs\n\nTo understand when we might want to use structs, let’s write a program that\ncalculates the area of a rectangle. We’ll start with single variables, and then\nrefactor the program until we’re using structs instead.\n\nLet’s make a new binary project with Cargo called *rectangles* that will take\nthe width and height of a rectangle specified in pixels and calculate the area\nof the rectangle. Listing 5-8 shows a short program with one way of doing\nexactly that in our project’s *src/main.rs*.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let width1 = 30;\n    let height1 = 50;\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        area(width1, height1)\n    );\n}\n\nfn area(width: u32, height: u32) -> u32 {\n    width * height\n}\n```\n\n<span class=\"caption\">Listing 5-8: Calculating the area of a rectangle\nspecified by separate width and height variables</span>\n\nNow, run this program using `cargo run`:\n\n```text\n$ cargo run\n   Compiling structs v0.1.0 (file:///projects/structs)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.42s\n     Running `target/debug/structs`\nThe area of the rectangle is 1500 square pixels.\n```\n\nEven though Listing 5-8 works and figures out the area of the rectangle by\ncalling the `area` function with each dimension, we can do better. The width\nand the height are related to each other because together they describe one\nrectangle.\n\nThe issue with this code is evident in the signature of `area`:\n\n```rust,ignore\n# fn main() {\n#     let width1 = 30;\n#     let height1 = 50;\n# \n#     println!(\n#         \"The area of the rectangle is {} square pixels.\",\n#         area(width1, height1)\n#     );\n# }\n# \nfn area(width: u32, height: u32) -> u32 {\n#     width * height\n# }\n```\n\nThe `area` function is supposed to calculate the area of one rectangle, but the\nfunction we wrote has two parameters. The parameters are related, but that’s\nnot expressed anywhere in our program. It would be more readable and more\nmanageable to group width and height together. We’ve already discussed one way\nwe might do that in [“The Tuple Type”][the-tuple-type]<!-- ignore --> section\nof Chapter 3: by using tuples.\n\n### Refactoring with Tuples\n\nListing 5-9 shows another version of our program that uses tuples.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let rect1 = (30, 50);\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        area(rect1)\n    );\n}\n\nfn area(dimensions: (u32, u32)) -> u32 {\n    dimensions.0 * dimensions.1\n}\n```\n\n<span class=\"caption\">Listing 5-9: Specifying the width and height of the\nrectangle with a tuple</span>\n\nIn one way, this program is better. Tuples let us add a bit of structure, and\nwe’re now passing just one argument. But in another way, this version is less\nclear: tuples don’t name their elements, so our calculation has become more\nconfusing because we have to index into the parts of the tuple.\n\nIt doesn’t matter if we mix up width and height for the area calculation, but\nif we want to draw the rectangle on the screen, it would matter! We would have\nto keep in mind that `width` is the tuple index `0` and `height` is the tuple\nindex `1`. If someone else worked on this code, they would have to figure this\nout and keep it in mind as well. It would be easy to forget or mix up these\nvalues and cause errors, because we haven’t conveyed the meaning of our data in\nour code.\n\n### Refactoring with Structs: Adding More Meaning\n\nWe use structs to add meaning by labeling the data. We can transform the tuple\nwe’re using into a data type with a name for the whole as well as names for the\nparts, as shown in Listing 5-10.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        area(&rect1)\n    );\n}\n\nfn area(rectangle: &Rectangle) -> u32 {\n    rectangle.width * rectangle.height\n}\n```\n\n<span class=\"caption\">Listing 5-10: Defining a `Rectangle` struct</span>\n\nHere we’ve defined a struct and named it `Rectangle`. Inside the curly\nbrackets, we defined the fields as `width` and `height`, both of which have\ntype `u32`. Then in `main`, we created a particular instance of `Rectangle`\nthat has a width of 30 and a height of 50.\n\nOur `area` function is now defined with one parameter, which we’ve named\n`rectangle`, whose type is an immutable borrow of a struct `Rectangle`\ninstance. As mentioned in Chapter 4, we want to borrow the struct rather than\ntake ownership of it. This way, `main` retains its ownership and can continue\nusing `rect1`, which is the reason we use the `&` in the function signature and\nwhere we call the function.\n\nThe `area` function accesses the `width` and `height` fields of the `Rectangle`\ninstance. Our function signature for `area` now says exactly what we mean:\ncalculate the area of `Rectangle`, using its `width` and `height` fields. This\nconveys that the width and height are related to each other, and it gives\ndescriptive names to the values rather than using the tuple index values of `0`\nand `1`. This is a win for clarity.\n\n### Adding Useful Functionality with Derived Traits\n\nIt’d be nice to be able to print an instance of `Rectangle` while we’re\ndebugging our program and see the values for all its fields. Listing 5-11 tries\nusing the `println!` macro as we have used in previous chapters. This won’t\nwork, however.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\"rect1 is {}\", rect1);\n}\n```\n\n<span class=\"caption\">Listing 5-11: Attempting to print a `Rectangle`\ninstance</span>\n\nWhen we compile this code, we get an error with this core message:\n\n```text\nerror[E0277]: `Rectangle` doesn\'t implement `std::fmt::Display`\n```\n\nThe `println!` macro can do many kinds of formatting, and by default, the curly\nbrackets tell `println!` to use formatting known as `Display`: output intended\nfor direct end user consumption. The primitive types we’ve seen so far\nimplement `Display` by default, because there’s only one way you’d want to show\na `1` or any other primitive type to a user. But with structs, the way\n`println!` should format the output is less clear because there are more\ndisplay possibilities: Do you want commas or not? Do you want to print the\ncurly brackets? Should all the fields be shown? Due to this ambiguity, Rust\ndoesn’t try to guess what we want, and structs don’t have a provided\nimplementation of `Display`.\n\nIf we continue reading the errors, we’ll find this helpful note:\n\n```text\n   = help: the trait `std::fmt::Display` is not implemented for `Rectangle`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n```\n\nLet’s try it! The `println!` macro call will now look like `println!(\"rect1 is\n{:?}\", rect1);`. Putting the specifier `:?` inside the curly brackets tells\n`println!` we want to use an output format called `Debug`. The `Debug` trait\nenables us to print our struct in a way that is useful for developers so we can\nsee its value while we’re debugging our code.\n\nCompile the code with this change. Drat! We still get an error:\n\n```text\nerror[E0277]: `Rectangle` doesn\'t implement `std::fmt::Debug`\n```\n\nBut again, the compiler gives us a helpful note:\n\n```text\n   = help: the trait `std::fmt::Debug` is not implemented for `Rectangle`\n   = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n```\n\nRust *does* include functionality to print out debugging information, but we\nhave to explicitly opt in to make that functionality available for our struct.\nTo do that, we add the annotation `#[derive(Debug)]` just before the struct\ndefinition, as shown in Listing 5-12.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\"rect1 is {:?}\", rect1);\n}\n```\n\n<span class=\"caption\">Listing 5-12: Adding the annotation to derive the `Debug`\ntrait and printing the `Rectangle` instance using debug formatting</span>\n\nNow when we run the program, we won’t get any errors, and we’ll see the\nfollowing output:\n\n```text\n$ cargo run\n   Compiling structs v0.1.0 (file:///projects/structs)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/structs`\nrect1 is Rectangle { width: 30, height: 50 }\n```\n\nNice! It’s not the prettiest output, but it shows the values of all the fields\nfor this instance, which would definitely help during debugging. When we have\nlarger structs, it’s useful to have output that’s a bit easier to read; in\nthose cases, we can use `{:#?}` instead of `{:?}` in the `println!` string.\nWhen we use the `{:#?}` style in the example, the output will look like this:\n\n```text\n$ cargo run\n   Compiling structs v0.1.0 (file:///projects/structs)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/structs`\nrect1 is Rectangle {\n    width: 30,\n    height: 50,\n}\n```\n\nRust has provided a number of traits for us to use with the `derive` annotation\nthat can add useful behavior to our custom types. Those traits and their\nbehaviors are listed in Appendix C. We’ll cover how to implement these traits\nwith custom behavior as well as how to create your own traits in Chapter 10.\n\nOur `area` function is very specific: it only computes the area of rectangles.\nIt would be helpful to tie this behavior more closely to our `Rectangle`\nstruct, because it won’t work with any other type. Let’s look at how we can\ncontinue to refactor this code by turning the `area` function into an `area`\n*method* defined on our `Rectangle` type.\n\n[the-tuple-type]: ch03-02-data-types.html#the-tuple-type\n", number: Some(SectionNumber([5, 2])), sub_items: [], path: "ch05-02-example-structs.md", parent_names: ["Using Structs to Structure Related Data"] }), Chapter(Chapter { name: "Method Syntax", content: "## Method Syntax\n\n*Methods* are similar to functions: they’re declared with the `fn` keyword and\ntheir name, they can have parameters and a return value, and they contain some\ncode that is run when they’re called from somewhere else. However, methods are\ndifferent from functions in that they’re defined within the context of a struct\n(or an enum or a trait object, which we cover in Chapters 6 and 17,\nrespectively), and their first parameter is always `self`, which represents the\ninstance of the struct the method is being called on.\n\n### Defining Methods\n\nLet’s change the `area` function that has a `Rectangle` instance as a parameter\nand instead make an `area` method defined on the `Rectangle` struct, as shown\nin Listing 5-13.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn area(&self) -> u32 {\n        self.width * self.height\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        rect1.area()\n    );\n}\n```\n\n<span class=\"caption\">Listing 5-13: Defining an `area` method on the\n`Rectangle` struct</span>\n\nTo define the function within the context of `Rectangle`, we start an `impl`\n(implementation) block. Then we move the `area` function within the `impl`\ncurly brackets and change the first (and in this case, only) parameter to be\n`self` in the signature and everywhere within the body. In `main`, where we\ncalled the `area` function and passed `rect1` as an argument, we can instead\nuse *method syntax* to call the `area` method on our `Rectangle` instance.\nThe method syntax goes after an instance: we add a dot followed by the method\nname, parentheses, and any arguments.\n\nIn the signature for `area`, we use `&self` instead of `rectangle: &Rectangle`\nbecause Rust knows the type of `self` is `Rectangle` due to this method’s being\ninside the `impl Rectangle` context. Note that we still need to use the `&`\nbefore `self`, just as we did in `&Rectangle`. Methods can take ownership of\n`self`, borrow `self` immutably as we’ve done here, or borrow `self` mutably,\njust as they can any other parameter.\n\nWe’ve chosen `&self` here for the same reason we used `&Rectangle` in the\nfunction version: we don’t want to take ownership, and we just want to read the\ndata in the struct, not write to it. If we wanted to change the instance that\nwe’ve called the method on as part of what the method does, we’d use `&mut\nself` as the first parameter. Having a method that takes ownership of the\ninstance by using just `self` as the first parameter is rare; this technique is\nusually used when the method transforms `self` into something else and you want\nto prevent the caller from using the original instance after the transformation.\n\nThe main benefit of using methods instead of functions, in addition to using\nmethod syntax and not having to repeat the type of `self` in every method’s\nsignature, is for organization. We’ve put all the things we can do with an\ninstance of a type in one `impl` block rather than making future users of our\ncode search for capabilities of `Rectangle` in various places in the library we\nprovide.\n\n> ### Where’s the `->` Operator?\n>\n> In C and C++, two different operators are used for calling methods: you use\n> `.` if you’re calling a method on the object directly and `->` if you’re\n> calling the method on a pointer to the object and need to dereference the\n> pointer first. In other words, if `object` is a pointer,\n> `object->something()` is similar to `(*object).something()`.\n>\n> Rust doesn’t have an equivalent to the `->` operator; instead, Rust has a\n> feature called *automatic referencing and dereferencing*. Calling methods is\n> one of the few places in Rust that has this behavior.\n>\n> Here’s how it works: when you call a method with `object.something()`, Rust\n> automatically adds in `&`, `&mut`, or `*` so `object` matches the signature of\n> the method. In other words, the following are the same:\n>\n<!-- CAN\'T EXTRACT SEE BUG TODO -->\n> ```rust\n> # #[derive(Debug,Copy,Clone)]\n> # struct Point {\n> #     x: f64,\n> #     y: f64,\n> # }\n> #\n> # impl Point {\n> #    fn distance(&self, other: &Point) -> f64 {\n> #        let x_squared = f64::powi(other.x - self.x, 2);\n> #        let y_squared = f64::powi(other.y - self.y, 2);\n> #\n> #        f64::sqrt(x_squared + y_squared)\n> #    }\n> # }\n> # let p1 = Point { x: 0.0, y: 0.0 };\n> # let p2 = Point { x: 5.0, y: 6.5 };\n> p1.distance(&p2);\n> (&p1).distance(&p2);\n> ```\n>\n> The first one looks much cleaner. This automatic referencing behavior works\n> because methods have a clear receiver—the type of `self`. Given the receiver\n> and name of a method, Rust can figure out definitively whether the method is\n> reading (`&self`), mutating (`&mut self`), or consuming (`self`). The fact\n> that Rust makes borrowing implicit for method receivers is a big part of\n> making ownership ergonomic in practice.\n\n### Methods with More Parameters\n\nLet’s practice using methods by implementing a second method on the `Rectangle`\nstruct. This time, we want an instance of `Rectangle` to take another instance\nof `Rectangle` and return `true` if the second `Rectangle` can fit completely\nwithin `self`; otherwise it should return `false`. That is, we want to be able\nto write the program shown in Listing 5-14, once we’ve defined the `can_hold`\nmethod.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n    let rect2 = Rectangle {\n        width: 10,\n        height: 40,\n    };\n    let rect3 = Rectangle {\n        width: 60,\n        height: 45,\n    };\n\n    println!(\"Can rect1 hold rect2? {}\", rect1.can_hold(&rect2));\n    println!(\"Can rect1 hold rect3? {}\", rect1.can_hold(&rect3));\n}\n```\n\n<span class=\"caption\">Listing 5-14: Using the as-yet-unwritten `can_hold`\nmethod</span>\n\nAnd the expected output would look like the following, because both dimensions\nof `rect2` are smaller than the dimensions of `rect1` but `rect3` is wider than\n`rect1`:\n\n```text\nCan rect1 hold rect2? true\nCan rect1 hold rect3? false\n```\n\nWe know we want to define a method, so it will be within the `impl Rectangle`\nblock. The method name will be `can_hold`, and it will take an immutable borrow\nof another `Rectangle` as a parameter. We can tell what the type of the\nparameter will be by looking at the code that calls the method:\n`rect1.can_hold(&rect2)` passes in `&rect2`, which is an immutable borrow to\n`rect2`, an instance of `Rectangle`. This makes sense because we only need to\nread `rect2` (rather than write, which would mean we’d need a mutable borrow),\nand we want `main` to retain ownership of `rect2` so we can use it again after\ncalling the `can_hold` method. The return value of `can_hold` will be a\nBoolean, and the implementation will check whether the width and height of\n`self` are both greater than the width and height of the other `Rectangle`,\nrespectively. Let’s add the new `can_hold` method to the `impl` block from\nListing 5-13, shown in Listing 5-15.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# #[derive(Debug)]\n# struct Rectangle {\n#     width: u32,\n#     height: u32,\n# }\n# \nimpl Rectangle {\n    fn area(&self) -> u32 {\n        self.width * self.height\n    }\n\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width > other.width && self.height > other.height\n    }\n}\n# \n# fn main() {\n#     let rect1 = Rectangle {\n#         width: 30,\n#         height: 50,\n#     };\n#     let rect2 = Rectangle {\n#         width: 10,\n#         height: 40,\n#     };\n#     let rect3 = Rectangle {\n#         width: 60,\n#         height: 45,\n#     };\n# \n#     println!(\"Can rect1 hold rect2? {}\", rect1.can_hold(&rect2));\n#     println!(\"Can rect1 hold rect3? {}\", rect1.can_hold(&rect3));\n# }\n```\n\n<span class=\"caption\">Listing 5-15: Implementing the `can_hold` method on\n`Rectangle` that takes another `Rectangle` instance as a parameter</span>\n\nWhen we run this code with the `main` function in Listing 5-14, we’ll get our\ndesired output. Methods can take multiple parameters that we add to the\nsignature after the `self` parameter, and those parameters work just like\nparameters in functions.\n\n### Associated Functions\n\nAnother useful feature of `impl` blocks is that we’re allowed to define\nfunctions within `impl` blocks that *don’t* take `self` as a parameter. These\nare called *associated functions* because they’re associated with the struct.\nThey’re still functions, not methods, because they don’t have an instance of\nthe struct to work with. You’ve already used the `String::from` associated\nfunction.\n\nAssociated functions are often used for constructors that will return a new\ninstance of the struct. For example, we could provide an associated function\nthat would have one dimension parameter and use that as both width and height,\nthus making it easier to create a square `Rectangle` rather than having to\nspecify the same value twice:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# #[derive(Debug)]\n# struct Rectangle {\n#     width: u32,\n#     height: u32,\n# }\n# \nimpl Rectangle {\n    fn square(size: u32) -> Rectangle {\n        Rectangle {\n            width: size,\n            height: size,\n        }\n    }\n}\n# \n# fn main() {\n#     let sq = Rectangle::square(3);\n# }\n```\n\nTo call this associated function, we use the `::` syntax with the struct name;\n`let sq = Rectangle::square(3);` is an example. This function is namespaced by\nthe struct: the `::` syntax is used for both associated functions and\nnamespaces created by modules. We’ll discuss modules in Chapter 7.\n\n### Multiple `impl` Blocks\n\nEach struct is allowed to have multiple `impl` blocks. For example, Listing\n5-15 is equivalent to the code shown in Listing 5-16, which has each method\nin its own `impl` block.\n\n```rust\n# #[derive(Debug)]\n# struct Rectangle {\n#     width: u32,\n#     height: u32,\n# }\n# \nimpl Rectangle {\n    fn area(&self) -> u32 {\n        self.width * self.height\n    }\n}\n\nimpl Rectangle {\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width > other.width && self.height > other.height\n    }\n}\n# \n# fn main() {\n#     let rect1 = Rectangle {\n#         width: 30,\n#         height: 50,\n#     };\n#     let rect2 = Rectangle {\n#         width: 10,\n#         height: 40,\n#     };\n#     let rect3 = Rectangle {\n#         width: 60,\n#         height: 45,\n#     };\n# \n#     println!(\"Can rect1 hold rect2? {}\", rect1.can_hold(&rect2));\n#     println!(\"Can rect1 hold rect3? {}\", rect1.can_hold(&rect3));\n# }\n```\n\n<span class=\"caption\">Listing 5-16: Rewriting Listing 5-15 using multiple `impl`\nblocks</span>\n\nThere’s no reason to separate these methods into multiple `impl` blocks here,\nbut this is valid syntax. We’ll see a case in which multiple `impl` blocks are\nuseful in Chapter 10, where we discuss generic types and traits.\n\n## Summary\n\nStructs let you create custom types that are meaningful for your domain. By\nusing structs, you can keep associated pieces of data connected to each other\nand name each piece to make your code clear. Methods let you specify the\nbehavior that instances of your structs have, and associated functions let you\nnamespace functionality that is particular to your struct without having an\ninstance available.\n\nBut structs aren’t the only way you can create custom types: let’s turn to\nRust’s enum feature to add another tool to your toolbox.\n", number: Some(SectionNumber([5, 3])), sub_items: [], path: "ch05-03-method-syntax.md", parent_names: ["Using Structs to Structure Related Data"] })], path: "ch05-00-structs.md", parent_names: [] }), Chapter(Chapter { name: "Enums and Pattern Matching", content: "# Enums and Pattern Matching\n\nIn this chapter we’ll look at *enumerations*, also referred to as *enums*.\nEnums allow you to define a type by enumerating its possible *variants*. First,\nwe’ll define and use an enum to show how an enum can encode meaning along with\ndata. Next, we’ll explore a particularly useful enum, called `Option`, which\nexpresses that a value can be either something or nothing. Then we’ll look at\nhow pattern matching in the `match` expression makes it easy to run different\ncode for different values of an enum. Finally, we’ll cover how the `if let`\nconstruct is another convenient and concise idiom available to you to handle\nenums in your code.\n\nEnums are a feature in many languages, but their capabilities differ in each\nlanguage. Rust’s enums are most similar to *algebraic data types* in functional\nlanguages, such as F#, OCaml, and Haskell.\n", number: Some(SectionNumber([6])), sub_items: [Chapter(Chapter { name: "Defining an Enum", content: "## Defining an Enum\n\nLet’s look at a situation we might want to express in code and see why enums\nare useful and more appropriate than structs in this case. Say we need to work\nwith IP addresses. Currently, two major standards are used for IP addresses:\nversion four and version six. These are the only possibilities for an IP\naddress that our program will come across: we can *enumerate* all possible\nvariants, which is where enumeration gets its name.\n\nAny IP address can be either a version four or a version six address, but not\nboth at the same time. That property of IP addresses makes the enum data\nstructure appropriate, because enum values can only be one of its variants.\nBoth version four and version six addresses are still fundamentally IP\naddresses, so they should be treated as the same type when the code is handling\nsituations that apply to any kind of IP address.\n\nWe can express this concept in code by defining an `IpAddrKind` enumeration and\nlisting the possible kinds an IP address can be, `V4` and `V6`. These are the\nvariants of the enum:\n\n```rust\nenum IpAddrKind {\n    V4,\n    V6,\n}\n# \n# fn main() {\n#     let four = IpAddrKind::V4;\n#     let six = IpAddrKind::V6;\n# \n#     route(IpAddrKind::V4);\n#     route(IpAddrKind::V6);\n# }\n# \n# fn route(ip_kind: IpAddrKind) {}\n```\n\n`IpAddrKind` is now a custom data type that we can use elsewhere in our code.\n\n### Enum Values\n\nWe can create instances of each of the two variants of `IpAddrKind` like this:\n\n```rust\n# enum IpAddrKind {\n#     V4,\n#     V6,\n# }\n# \n# fn main() {\n    let four = IpAddrKind::V4;\n    let six = IpAddrKind::V6;\n# \n#     route(IpAddrKind::V4);\n#     route(IpAddrKind::V6);\n# }\n# \n# fn route(ip_kind: IpAddrKind) {}\n```\n\nNote that the variants of the enum are namespaced under its identifier, and we\nuse a double colon to separate the two. The reason this is useful is that now\nboth values `IpAddrKind::V4` and `IpAddrKind::V6` are of the same type:\n`IpAddrKind`. We can then, for instance, define a function that takes any\n`IpAddrKind`:\n\n```rust\n# enum IpAddrKind {\n#     V4,\n#     V6,\n# }\n# \n# fn main() {\n#     let four = IpAddrKind::V4;\n#     let six = IpAddrKind::V6;\n# \n#     route(IpAddrKind::V4);\n#     route(IpAddrKind::V6);\n# }\n# \nfn route(ip_kind: IpAddrKind) {}\n```\n\nAnd we can call this function with either variant:\n\n```rust\n# enum IpAddrKind {\n#     V4,\n#     V6,\n# }\n# \n# fn main() {\n#     let four = IpAddrKind::V4;\n#     let six = IpAddrKind::V6;\n# \n    route(IpAddrKind::V4);\n    route(IpAddrKind::V6);\n# }\n# \n# fn route(ip_kind: IpAddrKind) {}\n```\n\nUsing enums has even more advantages. Thinking more about our IP address type,\nat the moment we don’t have a way to store the actual IP address *data*; we\nonly know what *kind* it is. Given that you just learned about structs in\nChapter 5, you might tackle this problem as shown in Listing 6-1.\n\n```rust\n# fn main() {\n    enum IpAddrKind {\n        V4,\n        V6,\n    }\n\n    struct IpAddr {\n        kind: IpAddrKind,\n        address: String,\n    }\n\n    let home = IpAddr {\n        kind: IpAddrKind::V4,\n        address: String::from(\"127.0.0.1\"),\n    };\n\n    let loopback = IpAddr {\n        kind: IpAddrKind::V6,\n        address: String::from(\"::1\"),\n    };\n# }\n```\n\n<span class=\"caption\">Listing 6-1: Storing the data and `IpAddrKind` variant of\nan IP address using a `struct`</span>\n\nHere, we’ve defined a struct `IpAddr` that has two fields: a `kind` field that\nis of type `IpAddrKind` (the enum we defined previously) and an `address` field\nof type `String`. We have two instances of this struct. The first, `home`, has\nthe value `IpAddrKind::V4` as its `kind` with associated address data of\n`127.0.0.1`. The second instance, `loopback`, has the other variant of\n`IpAddrKind` as its `kind` value, `V6`, and has address `::1` associated with\nit. We’ve used a struct to bundle the `kind` and `address` values together, so\nnow the variant is associated with the value.\n\nWe can represent the same concept in a more concise way using just an enum,\nrather than an enum inside a struct, by putting data directly into each enum\nvariant. This new definition of the `IpAddr` enum says that both `V4` and `V6`\nvariants will have associated `String` values:\n\n```rust\n# fn main() {\n    enum IpAddr {\n        V4(String),\n        V6(String),\n    }\n\n    let home = IpAddr::V4(String::from(\"127.0.0.1\"));\n\n    let loopback = IpAddr::V6(String::from(\"::1\"));\n# }\n```\n\nWe attach data to each variant of the enum directly, so there is no need for an\nextra struct.\n\nThere’s another advantage to using an enum rather than a struct: each variant\ncan have different types and amounts of associated data. Version four type IP\naddresses will always have four numeric components that will have values\nbetween 0 and 255. If we wanted to store `V4` addresses as four `u8` values but\nstill express `V6` addresses as one `String` value, we wouldn’t be able to with\na struct. Enums handle this case with ease:\n\n```rust\n# fn main() {\n    enum IpAddr {\n        V4(u8, u8, u8, u8),\n        V6(String),\n    }\n\n    let home = IpAddr::V4(127, 0, 0, 1);\n\n    let loopback = IpAddr::V6(String::from(\"::1\"));\n# }\n```\n\nWe’ve shown several different ways to define data structures to store version\nfour and version six IP addresses. However, as it turns out, wanting to store\nIP addresses and encode which kind they are is so common that [the standard\nlibrary has a definition we can use!][IpAddr]<!-- ignore --> Let’s look at how\nthe standard library defines `IpAddr`: it has the exact enum and variants that\nwe’ve defined and used, but it embeds the address data inside the variants in\nthe form of two different structs, which are defined differently for each\nvariant:\n\n[IpAddr]: ../std/net/enum.IpAddr.html\n\n```rust\nstruct Ipv4Addr {\n    // --snip--\n}\n\nstruct Ipv6Addr {\n    // --snip--\n}\n\nenum IpAddr {\n    V4(Ipv4Addr),\n    V6(Ipv6Addr),\n}\n```\n\nThis code illustrates that you can put any kind of data inside an enum variant:\nstrings, numeric types, or structs, for example. You can even include another\nenum! Also, standard library types are often not much more complicated than\nwhat you might come up with.\n\nNote that even though the standard library contains a definition for `IpAddr`,\nwe can still create and use our own definition without conflict because we\nhaven’t brought the standard library’s definition into our scope. We’ll talk\nmore about bringing types into scope in Chapter 7.\n\nLet’s look at another example of an enum in Listing 6-2: this one has a wide\nvariety of types embedded in its variants.\n\n```rust\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 6-2: A `Message` enum whose variants each store\ndifferent amounts and types of values</span>\n\nThis enum has four variants with different types:\n\n* `Quit` has no data associated with it at all.\n* `Move` includes an anonymous struct inside it.\n* `Write` includes a single `String`.\n* `ChangeColor` includes three `i32` values.\n\nDefining an enum with variants such as the ones in Listing 6-2 is similar to\ndefining different kinds of struct definitions, except the enum doesn’t use the\n`struct` keyword and all the variants are grouped together under the `Message`\ntype. The following structs could hold the same data that the preceding enum\nvariants hold:\n\n```rust\nstruct QuitMessage; // unit struct\nstruct MoveMessage {\n    x: i32,\n    y: i32,\n}\nstruct WriteMessage(String); // tuple struct\nstruct ChangeColorMessage(i32, i32, i32); // tuple struct\n# \n# fn main() {}\n```\n\nBut if we used the different structs, which each have their own type, we\ncouldn’t as easily define a function to take any of these kinds of messages as\nwe could with the `Message` enum defined in Listing 6-2, which is a single type.\n\nThere is one more similarity between enums and structs: just as we’re able to\ndefine methods on structs using `impl`, we’re also able to define methods on\nenums. Here’s a method named `call` that we could define on our `Message` enum:\n\n```rust\n# fn main() {\n#     enum Message {\n#         Quit,\n#         Move { x: i32, y: i32 },\n#         Write(String),\n#         ChangeColor(i32, i32, i32),\n#     }\n# \n    impl Message {\n        fn call(&self) {\n            // method body would be defined here\n        }\n    }\n\n    let m = Message::Write(String::from(\"hello\"));\n    m.call();\n# }\n```\n\nThe body of the method would use `self` to get the value that we called the\nmethod on. In this example, we’ve created a variable `m` that has the value\n`Message::Write(String::from(\"hello\"))`, and that is what `self` will be in the\nbody of the `call` method when `m.call()` runs.\n\nLet’s look at another enum in the standard library that is very common and\nuseful: `Option`.\n\n### The `Option` Enum and Its Advantages Over Null Values\n\nIn the previous section, we looked at how the `IpAddr` enum let us use Rust’s\ntype system to encode more information than just the data into our program.\nThis section explores a case study of `Option`, which is another enum defined\nby the standard library. The `Option` type is used in many places because it\nencodes the very common scenario in which a value could be something or it\ncould be nothing. Expressing this concept in terms of the type system means the\ncompiler can check whether you’ve handled all the cases you should be handling;\nthis functionality can prevent bugs that are extremely common in other\nprogramming languages.\n\nProgramming language design is often thought of in terms of which features you\ninclude, but the features you exclude are important too. Rust doesn’t have the\nnull feature that many other languages have. *Null* is a value that means there\nis no value there. In languages with null, variables can always be in one of\ntwo states: null or not-null.\n\nIn his 2009 presentation “Null References: The Billion Dollar Mistake,” Tony\nHoare, the inventor of null, has this to say:\n\n> I call it my billion-dollar mistake. At that time, I was designing the first\n> comprehensive type system for references in an object-oriented language. My\n> goal was to ensure that all use of references should be absolutely safe, with\n> checking performed automatically by the compiler. But I couldn’t resist the\n> temptation to put in a null reference, simply because it was so easy to\n> implement. This has led to innumerable errors, vulnerabilities, and system\n> crashes, which have probably caused a billion dollars of pain and damage in\n> the last forty years.\n\nThe problem with null values is that if you try to use a null value as a\nnot-null value, you’ll get an error of some kind. Because this null or not-null\nproperty is pervasive, it’s extremely easy to make this kind of error.\n\nHowever, the concept that null is trying to express is still a useful one: a\nnull is a value that is currently invalid or absent for some reason.\n\nThe problem isn’t really with the concept but with the particular\nimplementation. As such, Rust does not have nulls, but it does have an enum\nthat can encode the concept of a value being present or absent. This enum is\n`Option<T>`, and it is [defined by the standard library][option]<!-- ignore -->\nas follows:\n\n[option]: ../std/option/enum.Option.html\n\n```rust\nenum Option<T> {\n    Some(T),\n    None,\n}\n```\n\nThe `Option<T>` enum is so useful that it’s even included in the prelude; you\ndon’t need to bring it into scope explicitly. In addition, so are its variants:\nyou can use `Some` and `None` directly without the `Option::` prefix. The\n`Option<T>` enum is still just a regular enum, and `Some(T)` and `None` are\nstill variants of type `Option<T>`.\n\nThe `<T>` syntax is a feature of Rust we haven’t talked about yet. It’s a\ngeneric type parameter, and we’ll cover generics in more detail in Chapter 10.\nFor now, all you need to know is that `<T>` means the `Some` variant of the\n`Option` enum can hold one piece of data of any type. Here are some examples of\nusing `Option` values to hold number types and string types:\n\n```rust\n# fn main() {\n    let some_number = Some(5);\n    let some_string = Some(\"a string\");\n\n    let absent_number: Option<i32> = None;\n# }\n```\n\nIf we use `None` rather than `Some`, we need to tell Rust what type of\n`Option<T>` we have, because the compiler can’t infer the type that the `Some`\nvariant will hold by looking only at a `None` value.\n\nWhen we have a `Some` value, we know that a value is present and the value is\nheld within the `Some`. When we have a `None` value, in some sense, it means\nthe same thing as null: we don’t have a valid value. So why is having\n`Option<T>` any better than having null?\n\nIn short, because `Option<T>` and `T` (where `T` can be any type) are different\ntypes, the compiler won’t let us use an `Option<T>` value as if it were\ndefinitely a valid value. For example, this code won’t compile because it’s\ntrying to add an `i8` to an `Option<i8>`:\n\n```rust,ignore,does_not_compile\n# fn main() {\n    let x: i8 = 5;\n    let y: Option<i8> = Some(5);\n\n    let sum = x + y;\n# }\n```\n\nIf we run this code, we get an error message like this:\n\n```text\n$ cargo run\n   Compiling enums v0.1.0 (file:///projects/enums)\nerror[E0277]: cannot add `std::option::Option<i8>` to `i8`\n --> src/main.rs:5:17\n  |\n5 |     let sum = x + y;\n  |                 ^ no implementation for `i8 + std::option::Option<i8>`\n  |\n  = help: the trait `std::ops::Add<std::option::Option<i8>>` is not implemented for `i8`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `enums`.\n\nTo learn more, run the command again with --verbose.\n```\n\nIntense! In effect, this error message means that Rust doesn’t understand how\nto add an `i8` and an `Option<i8>`, because they’re different types. When we\nhave a value of a type like `i8` in Rust, the compiler will ensure that we\nalways have a valid value. We can proceed confidently without having to check\nfor null before using that value. Only when we have an `Option<i8>` (or\nwhatever type of value we’re working with) do we have to worry about possibly\nnot having a value, and the compiler will make sure we handle that case before\nusing the value.\n\nIn other words, you have to convert an `Option<T>` to a `T` before you can\nperform `T` operations with it. Generally, this helps catch one of the most\ncommon issues with null: assuming that something isn’t null when it actually\nis.\n\nNot having to worry about incorrectly assuming a not-null value helps you to be\nmore confident in your code. In order to have a value that can possibly be\nnull, you must explicitly opt in by making the type of that value `Option<T>`.\nThen, when you use that value, you are required to explicitly handle the case\nwhen the value is null. Everywhere that a value has a type that isn’t an\n`Option<T>`, you *can* safely assume that the value isn’t null. This was a\ndeliberate design decision for Rust to limit null’s pervasiveness and increase\nthe safety of Rust code.\n\nSo, how do you get the `T` value out of a `Some` variant when you have a value\nof type `Option<T>` so you can use that value? The `Option<T>` enum has a large\nnumber of methods that are useful in a variety of situations; you can check\nthem out in [its documentation][docs]<!-- ignore -->. Becoming familiar with\nthe methods on `Option<T>` will be extremely useful in your journey with Rust.\n\n[docs]: ../std/option/enum.Option.html\n\nIn general, in order to use an `Option<T>` value, you want to have code that\nwill handle each variant. You want some code that will run only when you have a\n`Some(T)` value, and this code is allowed to use the inner `T`. You want some\nother code to run if you have a `None` value, and that code doesn’t have a `T`\nvalue available. The `match` expression is a control flow construct that does\njust this when used with enums: it will run different code depending on which\nvariant of the enum it has, and that code can use the data inside the matching\nvalue.\n", number: Some(SectionNumber([6, 1])), sub_items: [], path: "ch06-01-defining-an-enum.md", parent_names: ["Enums and Pattern Matching"] }), Chapter(Chapter { name: "The match Control Flow Operator", content: "## The `match` Control Flow Operator\n\nRust has an extremely powerful control flow operator called `match` that allows\nyou to compare a value against a series of patterns and then execute code based\non which pattern matches. Patterns can be made up of literal values, variable\nnames, wildcards, and many other things; Chapter 18 covers all the different\nkinds of patterns and what they do. The power of `match` comes from the\nexpressiveness of the patterns and the fact that the compiler confirms that all\npossible cases are handled.\n\nThink of a `match` expression as being like a coin-sorting machine: coins slide\ndown a track with variously sized holes along it, and each coin falls through\nthe first hole it encounters that it fits into. In the same way, values go\nthrough each pattern in a `match`, and at the first pattern the value “fits,”\nthe value falls into the associated code block to be used during execution.\n\nBecause we just mentioned coins, let’s use them as an example using `match`! We\ncan write a function that can take an unknown United States coin and, in a\nsimilar way as the counting machine, determine which coin it is and return its\nvalue in cents, as shown here in Listing 6-3.\n\n```rust\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter,\n}\n\nfn value_in_cents(coin: Coin) -> u8 {\n    match coin {\n        Coin::Penny => 1,\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        Coin::Quarter => 25,\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 6-3: An enum and a `match` expression that has\nthe variants of the enum as its patterns</span>\n\nLet’s break down the `match` in the `value_in_cents` function. First, we list\nthe `match` keyword followed by an expression, which in this case is the value\n`coin`. This seems very similar to an expression used with `if`, but there’s a\nbig difference: with `if`, the expression needs to return a Boolean value, but\nhere, it can be any type. The type of `coin` in this example is the `Coin` enum\nthat we defined on line 1.\n\nNext are the `match` arms. An arm has two parts: a pattern and some code. The\nfirst arm here has a pattern that is the value `Coin::Penny` and then the `=>`\noperator that separates the pattern and the code to run. The code in this case\nis just the value `1`. Each arm is separated from the next with a comma.\n\nWhen the `match` expression executes, it compares the resulting value against\nthe pattern of each arm, in order. If a pattern matches the value, the code\nassociated with that pattern is executed. If that pattern doesn’t match the\nvalue, execution continues to the next arm, much as in a coin-sorting machine.\nWe can have as many arms as we need: in Listing 6-3, our `match` has four arms.\n\nThe code associated with each arm is an expression, and the resulting value of\nthe expression in the matching arm is the value that gets returned for the\nentire `match` expression.\n\nCurly brackets typically aren’t used if the match arm code is short, as it is\nin Listing 6-3 where each arm just returns a value. If you want to run multiple\nlines of code in a match arm, you can use curly brackets. For example, the\nfollowing code would print “Lucky penny!” every time the method was called with\na `Coin::Penny` but would still return the last value of the block, `1`:\n\n```rust\n# enum Coin {\n#     Penny,\n#     Nickel,\n#     Dime,\n#     Quarter,\n# }\n# \nfn value_in_cents(coin: Coin) -> u8 {\n    match coin {\n        Coin::Penny => {\n            println!(\"Lucky penny!\");\n            1\n        }\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        Coin::Quarter => 25,\n    }\n}\n# \n# fn main() {}\n```\n\n### Patterns that Bind to Values\n\nAnother useful feature of match arms is that they can bind to the parts of the\nvalues that match the pattern. This is how we can extract values out of enum\nvariants.\n\nAs an example, let’s change one of our enum variants to hold data inside it.\nFrom 1999 through 2008, the United States minted quarters with different\ndesigns for each of the 50 states on one side. No other coins got state\ndesigns, so only quarters have this extra value. We can add this information to\nour `enum` by changing the `Quarter` variant to include a `UsState` value stored\ninside it, which we’ve done here in Listing 6-4.\n\n```rust\n#[derive(Debug)] // so we can inspect the state in a minute\nenum UsState {\n    Alabama,\n    Alaska,\n    // --snip--\n}\n\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter(UsState),\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 6-4: A `Coin` enum in which the `Quarter` variant\nalso holds a `UsState` value</span>\n\nLet’s imagine that a friend of ours is trying to collect all 50 state quarters.\nWhile we sort our loose change by coin type, we’ll also call out the name of\nthe state associated with each quarter so if it’s one our friend doesn’t have,\nthey can add it to their collection.\n\nIn the match expression for this code, we add a variable called `state` to the\npattern that matches values of the variant `Coin::Quarter`. When a\n`Coin::Quarter` matches, the `state` variable will bind to the value of that\nquarter’s state. Then we can use `state` in the code for that arm, like so:\n\n```rust\n# #[derive(Debug)]\n# enum UsState {\n#     Alabama,\n#     Alaska,\n#     // --snip--\n# }\n# \n# enum Coin {\n#     Penny,\n#     Nickel,\n#     Dime,\n#     Quarter(UsState),\n# }\n# \nfn value_in_cents(coin: Coin) -> u8 {\n    match coin {\n        Coin::Penny => 1,\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        Coin::Quarter(state) => {\n            println!(\"State quarter from {:?}!\", state);\n            25\n        }\n    }\n}\n# \n# fn main() {\n#     value_in_cents(Coin::Quarter(UsState::Alaska));\n# }\n```\n\nIf we were to call `value_in_cents(Coin::Quarter(UsState::Alaska))`, `coin`\nwould be `Coin::Quarter(UsState::Alaska)`. When we compare that value with each\nof the match arms, none of them match until we reach `Coin::Quarter(state)`. At\nthat point, the binding for `state` will be the value `UsState::Alaska`. We can\nthen use that binding in the `println!` expression, thus getting the inner\nstate value out of the `Coin` enum variant for `Quarter`.\n\n### Matching with `Option<T>`\n\nIn the previous section, we wanted to get the inner `T` value out of the `Some`\ncase when using `Option<T>`; we can also handle `Option<T>` using `match` as we\ndid with the `Coin` enum! Instead of comparing coins, we’ll compare the\nvariants of `Option<T>`, but the way that the `match` expression works remains\nthe same.\n\nLet’s say we want to write a function that takes an `Option<i32>` and, if\nthere’s a value inside, adds 1 to that value. If there isn’t a value inside,\nthe function should return the `None` value and not attempt to perform any\noperations.\n\nThis function is very easy to write, thanks to `match`, and will look like\nListing 6-5.\n\n```rust\n# fn main() {\n    fn plus_one(x: Option<i32>) -> Option<i32> {\n        match x {\n            None => None,\n            Some(i) => Some(i + 1),\n        }\n    }\n\n    let five = Some(5);\n    let six = plus_one(five);\n    let none = plus_one(None);\n# }\n```\n\n<span class=\"caption\">Listing 6-5: A function that uses a `match` expression on\nan `Option<i32>`</span>\n\nLet’s examine the first execution of `plus_one` in more detail. When we call\n`plus_one(five)`, the variable `x` in the body of `plus_one` will have the\nvalue `Some(5)`. We then compare that against each match arm.\n\n```rust,ignore\n# fn main() {\n#     fn plus_one(x: Option<i32>) -> Option<i32> {\n#         match x {\n            None => None,\n#             Some(i) => Some(i + 1),\n#         }\n#     }\n# \n#     let five = Some(5);\n#     let six = plus_one(five);\n#     let none = plus_one(None);\n# }\n```\n\nThe `Some(5)` value doesn’t match the pattern `None`, so we continue to the\nnext arm.\n\n```rust,ignore\n# fn main() {\n#     fn plus_one(x: Option<i32>) -> Option<i32> {\n#         match x {\n#             None => None,\n            Some(i) => Some(i + 1),\n#         }\n#     }\n# \n#     let five = Some(5);\n#     let six = plus_one(five);\n#     let none = plus_one(None);\n# }\n```\n\nDoes `Some(5)` match `Some(i)`? Why yes it does! We have the same variant. The\n`i` binds to the value contained in `Some`, so `i` takes the value `5`. The\ncode in the match arm is then executed, so we add 1 to the value of `i` and\ncreate a new `Some` value with our total `6` inside.\n\nNow let’s consider the second call of `plus_one` in Listing 6-5, where `x` is\n`None`. We enter the `match` and compare to the first arm.\n\n```rust,ignore\n# fn main() {\n#     fn plus_one(x: Option<i32>) -> Option<i32> {\n#         match x {\n            None => None,\n#             Some(i) => Some(i + 1),\n#         }\n#     }\n# \n#     let five = Some(5);\n#     let six = plus_one(five);\n#     let none = plus_one(None);\n# }\n```\n\nIt matches! There’s no value to add to, so the program stops and returns the\n`None` value on the right side of `=>`. Because the first arm matched, no other\narms are compared.\n\nCombining `match` and enums is useful in many situations. You’ll see this\npattern a lot in Rust code: `match` against an enum, bind a variable to the\ndata inside, and then execute code based on it. It’s a bit tricky at first, but\nonce you get used to it, you’ll wish you had it in all languages. It’s\nconsistently a user favorite.\n\n### Matches Are Exhaustive\n\nThere’s one other aspect of `match` we need to discuss. Consider this version\nof our `plus_one` function that has a bug and won’t compile:\n\n```rust,ignore,does_not_compile\n# fn main() {\n    fn plus_one(x: Option<i32>) -> Option<i32> {\n        match x {\n            Some(i) => Some(i + 1),\n        }\n    }\n# \n#     let five = Some(5);\n#     let six = plus_one(five);\n#     let none = plus_one(None);\n# }\n```\n\nWe didn’t handle the `None` case, so this code will cause a bug. Luckily, it’s\na bug Rust knows how to catch. If we try to compile this code, we’ll get this\nerror:\n\n```text\n$ cargo run\n   Compiling enums v0.1.0 (file:///projects/enums)\nerror[E0004]: non-exhaustive patterns: `None` not covered\n --> src/main.rs:3:15\n  |\n3 |         match x {\n  |               ^ pattern `None` not covered\n  |\n  = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0004`.\nerror: could not compile `enums`.\n\nTo learn more, run the command again with --verbose.\n```\n\nRust knows that we didn’t cover every possible case and even knows which\npattern we forgot! Matches in Rust are *exhaustive*: we must exhaust every last\npossibility in order for the code to be valid. Especially in the case of\n`Option<T>`, when Rust prevents us from forgetting to explicitly handle the\n`None` case, it protects us from assuming that we have a value when we might\nhave null, thus making the billion-dollar mistake discussed earlier impossible.\n\n### The `_` Placeholder\n\nRust also has a pattern we can use when we don’t want to list all possible\nvalues. For example, a `u8` can have valid values of 0 through 255. If we only\ncare about the values 1, 3, 5, and 7, we don’t want to have to list out 0, 2,\n4, 6, 8, 9 all the way up to 255. Fortunately, we don’t have to: we can use the\nspecial pattern `_` instead:\n\n```rust\n# fn main() {\n    let some_u8_value = 0u8;\n    match some_u8_value {\n        1 => println!(\"one\"),\n        3 => println!(\"three\"),\n        5 => println!(\"five\"),\n        7 => println!(\"seven\"),\n        _ => (),\n    }\n# }\n```\n\nThe `_` pattern will match any value. By putting it after our other arms, the\n`_` will match all the possible cases that aren’t specified before it. The `()`\nis just the unit value, so nothing will happen in the `_` case. As a result, we\ncan say that we want to do nothing for all the possible values that we don’t\nlist before the `_` placeholder.\n\nHowever, the `match` expression can be a bit wordy in a situation in which we\ncare about only *one* of the cases. For this situation, Rust provides `if let`.\n\nMore about patterns, and matching can be found in [chapter 18][ch18-00-patterns].\n\n[ch18-00-patterns]:\nch18-00-patterns.html\n", number: Some(SectionNumber([6, 2])), sub_items: [], path: "ch06-02-match.md", parent_names: ["Enums and Pattern Matching"] }), Chapter(Chapter { name: "Concise Control Flow with if let", content: "## Concise Control Flow with `if let`\n\nThe `if let` syntax lets you combine `if` and `let` into a less verbose way to\nhandle values that match one pattern while ignoring the rest. Consider the\nprogram in Listing 6-6 that matches on an `Option<u8>` value but only wants to\nexecute code if the value is 3.\n\n```rust\n# fn main() {\n    let some_u8_value = Some(0u8);\n    match some_u8_value {\n        Some(3) => println!(\"three\"),\n        _ => (),\n    }\n# }\n```\n\n<span class=\"caption\">Listing 6-6: A `match` that only cares about executing\ncode when the value is `Some(3)`</span>\n\nWe want to do something with the `Some(3)` match but do nothing with any other\n`Some<u8>` value or the `None` value. To satisfy the `match` expression, we\nhave to add `_ => ()` after processing just one variant, which is a lot of\nboilerplate code to add.\n\nInstead, we could write this in a shorter way using `if let`. The following\ncode behaves the same as the `match` in Listing 6-6:\n\n```rust\n# fn main() {\n#     let some_u8_value = Some(0u8);\n    if let Some(3) = some_u8_value {\n        println!(\"three\");\n    }\n# }\n```\n\nThe syntax `if let` takes a pattern and an expression separated by an equal\nsign. It works the same way as a `match`, where the expression is given to the\n`match` and the pattern is its first arm.\n\nUsing `if let` means less typing, less indentation, and less boilerplate code.\nHowever, you lose the exhaustive checking that `match` enforces. Choosing\nbetween `match` and `if let` depends on what you’re doing in your particular\nsituation and whether gaining conciseness is an appropriate trade-off for\nlosing exhaustive checking.\n\nIn other words, you can think of `if let` as syntax sugar for a `match` that\nruns code when the value matches one pattern and then ignores all other values.\n\nWe can include an `else` with an `if let`. The block of code that goes with the\n`else` is the same as the block of code that would go with the `_` case in the\n`match` expression that is equivalent to the `if let` and `else`. Recall the\n`Coin` enum definition in Listing 6-4, where the `Quarter` variant also held a\n`UsState` value. If we wanted to count all non-quarter coins we see while also\nannouncing the state of the quarters, we could do that with a `match`\nexpression like this:\n\n```rust\n# #[derive(Debug)]\n# enum UsState {\n#     Alabama,\n#     Alaska,\n#     // --snip--\n# }\n# \n# enum Coin {\n#     Penny,\n#     Nickel,\n#     Dime,\n#     Quarter(UsState),\n# }\n# \n# fn main() {\n#     let coin = Coin::Penny;\n    let mut count = 0;\n    match coin {\n        Coin::Quarter(state) => println!(\"State quarter from {:?}!\", state),\n        _ => count += 1,\n    }\n# }\n```\n\nOr we could use an `if let` and `else` expression like this:\n\n```rust\n# #[derive(Debug)]\n# enum UsState {\n#     Alabama,\n#     Alaska,\n#     // --snip--\n# }\n# \n# enum Coin {\n#     Penny,\n#     Nickel,\n#     Dime,\n#     Quarter(UsState),\n# }\n# \n# fn main() {\n#     let coin = Coin::Penny;\n    let mut count = 0;\n    if let Coin::Quarter(state) = coin {\n        println!(\"State quarter from {:?}!\", state);\n    } else {\n        count += 1;\n    }\n# }\n```\n\nIf you have a situation in which your program has logic that is too verbose to\nexpress using a `match`, remember that `if let` is in your Rust toolbox as well.\n\n## Summary\n\nWe’ve now covered how to use enums to create custom types that can be one of a\nset of enumerated values. We’ve shown how the standard library’s `Option<T>`\ntype helps you use the type system to prevent errors. When enum values have\ndata inside them, you can use `match` or `if let` to extract and use those\nvalues, depending on how many cases you need to handle.\n\nYour Rust programs can now express concepts in your domain using structs and\nenums. Creating custom types to use in your API ensures type safety: the\ncompiler will make certain your functions get only values of the type each\nfunction expects.\n\nIn order to provide a well-organized API to your users that is straightforward\nto use and only exposes exactly what your users will need, let’s now turn to\nRust’s modules.\n", number: Some(SectionNumber([6, 3])), sub_items: [], path: "ch06-03-if-let.md", parent_names: ["Enums and Pattern Matching"] })], path: "ch06-00-enums.md", parent_names: [] }), Chapter(Chapter { name: "Managing Growing Projects with Packages, Crates, and Modules", content: "# Managing Growing Projects with Packages, Crates, and Modules\n\nAs you write large programs, organizing your code will be important because\nkeeping track of your entire program in your head will become impossible. By\ngrouping related functionality and separating code with distinct features,\nyou’ll clarify where to find code that implements a particular feature and\nwhere to go to change how a feature works.\n\nThe programs we’ve written so far have been in one module in one file. As a\nproject grows, you can organize code by splitting it into multiple modules and\nthen multiple files. A package can contain multiple binary crates and\noptionally one library crate. As a package grows, you can extract parts into\nseparate crates that become external dependencies. This chapter covers all\nthese techniques. For very large projects of a set of interrelated packages\nthat evolve together, Cargo provides workspaces, which we’ll cover in the\n[“Cargo Workspaces”][workspaces]<!-- ignore --> section in Chapter 14.\n\nIn addition to grouping functionality, encapsulating implementation details\nlets you reuse code at a higher level: once you’ve implemented an operation,\nother code can call that code via the code’s public interface without knowing\nhow the implementation works. The way you write code defines which parts are\npublic for other code to use and which parts are private implementation details\nthat you reserve the right to change. This is another way to limit the amount\nof detail you have to keep in your head.\n\nA related concept is scope: the nested context in which code is written has a\nset of names that are defined as “in scope.” When reading, writing, and\ncompiling code, programmers and compilers need to know whether a particular\nname at a particular spot refers to a variable, function, struct, enum, module,\nconstant, or other item and what that item means. You can create scopes and\nchange which names are in or out of scope. You can’t have two items with the\nsame name in the same scope; tools are available to resolve name conflicts.\n\nRust has a number of features that allow you to manage your code’s\norganization, including which details are exposed, which details are private,\nand what names are in each scope in your programs. These features, sometimes\ncollectively referred to as the *module system*, include:\n\n* **Packages:** A Cargo feature that lets you build, test, and share crates\n* **Crates:** A tree of modules that produces a library or executable\n* **Modules** and **use:** Let you control the organization, scope, and\n  privacy of paths\n* **Paths:** A way of naming an item, such as a struct, function, or module\n\nIn this chapter, we’ll cover all these features, discuss how they interact, and\nexplain how to use them to manage scope. By the end, you should have a solid\nunderstanding of the module system and be able to work with scopes like a pro!\n\n[workspaces]: ch14-03-cargo-workspaces.html\n", number: Some(SectionNumber([7])), sub_items: [Chapter(Chapter { name: "Packages and Crates", content: "## Packages and Crates\n\nThe first parts of the module system we’ll cover are packages and crates. A\ncrate is a binary or library. The *crate root* is a source file that the Rust\ncompiler starts from and makes up the root module of your crate (we’ll explain\nmodules in depth in the [“Defining Modules to Control Scope and\nPrivacy”][modules]<!-- ignore --> section). A *package* is one or more crates\nthat provide a set of functionality. A package contains a *Cargo.toml* file\nthat describes how to build those crates.\n\nSeveral rules determine what a package can contain. A package *must* contain\nzero or one library crates, and no more. It can contain as many binary crates\nas you’d like, but it must contain at least one crate (either library or\nbinary).\n\nLet’s walk through what happens when we create a package. First, we enter the\ncommand `cargo new`:\n\n```text\n$ cargo new my-project\n     Created binary (application) `my-project` package\n$ ls my-project\nCargo.toml\nsrc\n$ ls my-project/src\nmain.rs\n```\n\nWhen we entered the command, Cargo created a *Cargo.toml* file, giving us a\npackage. Looking at the contents of *Cargo.toml*, there’s no mention of\n*src/main.rs* because Cargo follows a convention that *src/main.rs* is the\ncrate root of a binary crate with the same name as the package. Likewise, Cargo\nknows that if the package directory contains *src/lib.rs*, the package contains\na library crate with the same name as the package, and *src/lib.rs* is its\ncrate root. Cargo passes the crate root files to `rustc` to build the library\nor binary.\n\nHere, we have a package that only contains *src/main.rs*, meaning it only\ncontains a binary crate named `my-project`. If a package contains *src/main.rs*\nand *src/lib.rs*, it has two crates: a library and a binary, both with the same\nname as the package. A package can have multiple binary crates by placing files\nin the *src/bin* directory: each file will be a separate binary crate.\n\nA crate will group related functionality together in a scope so the\nfunctionality is easy to share between multiple projects. For example, the\n`rand` crate we used in [Chapter 2][rand]<!-- ignore --> provides functionality\nthat generates random numbers. We can use that functionality in our own\nprojects by bringing the `rand` crate into our project’s scope. All the\nfunctionality provided by the `rand` crate is accessible through the crate’s\nname, `rand`.\n\nKeeping a crate’s functionality in its own scope clarifies whether particular\nfunctionality is defined in our crate or the `rand` crate and prevents\npotential conflicts. For example, the `rand` crate provides a trait named\n`Rng`. We can also define a `struct` named `Rng` in our own crate. Because a\ncrate’s functionality is namespaced in its own scope, when we add `rand` as a\ndependency, the compiler isn’t confused about what the name `Rng` refers to. In\nour crate, it refers to the `struct Rng` that we defined. We would access the\n`Rng` trait from the `rand` crate as `rand::Rng`.\n\nLet’s move on and talk about the module system!\n\n[modules]: ch07-02-defining-modules-to-control-scope-and-privacy.html\n[rand]: ch02-00-guessing-game-tutorial.html#generating-a-random-number\n", number: Some(SectionNumber([7, 1])), sub_items: [], path: "ch07-01-packages-and-crates.md", parent_names: ["Managing Growing Projects with Packages, Crates, and Modules"] }), Chapter(Chapter { name: "Defining Modules to Control Scope and Privacy", content: "## Defining Modules to Control Scope and Privacy\n\nIn this section, we’ll talk about modules and other parts of the module system,\nnamely *paths* that allow you to name items; the `use` keyword that brings a\npath into scope; and the `pub` keyword to make items public. We’ll also discuss\nthe `as` keyword, external packages, and the glob operator. For now, let’s\nfocus on modules!\n\n*Modules* let us organize code within a crate into groups for readability and\neasy reuse. Modules also control the *privacy* of items, which is whether an\nitem can be used by outside code (*public*) or is an internal implementation\ndetail and not available for outside use (*private*).\n\nAs an example, let’s write a library crate that provides the functionality of a\nrestaurant. We’ll define the signatures of functions but leave their bodies\nempty to concentrate on the organization of the code, rather than actually\nimplement a restaurant in code.\n\nIn the restaurant industry, some parts of a restaurant are referred to as\n*front of house* and others as *back of house*. Front of house is where\ncustomers are; this is where hosts seat customers, servers take orders and\npayment, and bartenders make drinks. Back of house is where the chefs and cooks\nwork in the kitchen, dishwashers clean up, and managers do administrative work.\n\nTo structure our crate in the same way that a real restaurant works, we can\norganize the functions into nested modules. Create a new library named\n`restaurant` by running `cargo new --lib restaurant`; then put the code in\nListing 7-1 into *src/lib.rs* to define some modules and function signatures.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nmod front_of_house {\n    mod hosting {\n        fn add_to_waitlist() {}\n\n        fn seat_at_table() {}\n    }\n\n    mod serving {\n        fn take_order() {}\n\n        fn serve_order() {}\n\n        fn take_payment() {}\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 7-1: A `front_of_house` module containing other\nmodules that then contain functions</span>\n\nWe define a module by starting with the `mod` keyword and then specify the\nname of the module (in this case, `front_of_house`) and place curly brackets\naround the body of the module. Inside modules, we can have other modules, as in\nthis case with the modules `hosting` and `serving`. Modules can also hold\ndefinitions for other items, such as structs, enums, constants, traits, or—as\nin Listing 7-1—functions.\n\nBy using modules, we can group related definitions together and name why\nthey’re related. Programmers using this code would have an easier time finding\nthe definitions they wanted to use because they could navigate the code based\non the groups rather than having to read through all the definitions.\nProgrammers adding new functionality to this code would know where to place the\ncode to keep the program organized.\n\nEarlier, we mentioned that *src/main.rs* and *src/lib.rs* are called crate\nroots. The reason for their name is that the contents of either of these two\nfiles form a module named `crate` at the root of the crate’s module structure,\nknown as the *module tree*.\n\nListing 7-2 shows the module tree for the structure in Listing 7-1.\n\n```text\ncrate\n └── front_of_house\n     ├── hosting\n     │   ├── add_to_waitlist\n     │   └── seat_at_table\n     └── serving\n         ├── take_order\n         ├── serve_order\n         └── take_payment\n```\n\n<span class=\"caption\">Listing 7-2: The module tree for the code in Listing\n7-1</span>\n\nThis tree shows how some of the modules nest inside one another (for example,\n`hosting` nests inside `front_of_house`). The tree also shows that some modules\nare *siblings* to each other, meaning they’re defined in the same module\n(`hosting` and `serving` are defined within `front_of_house`). To continue the\nfamily metaphor, if module A is contained inside module B, we say that module A\nis the *child* of module B and that module B is the *parent* of module A.\nNotice that the entire module tree is rooted under the implicit module named\n`crate`.\n\nThe module tree might remind you of the filesystem’s directory tree on your\ncomputer; this is a very apt comparison! Just like directories in a filesystem,\nyou use modules to organize your code. And just like files in a directory, we\nneed a way to find our modules.\n", number: Some(SectionNumber([7, 2])), sub_items: [], path: "ch07-02-defining-modules-to-control-scope-and-privacy.md", parent_names: ["Managing Growing Projects with Packages, Crates, and Modules"] }), Chapter(Chapter { name: "Paths for Referring to an Item in the Module Tree", content: "## Paths for Referring to an Item in the Module Tree\n\nTo show Rust where to find an item in a module tree, we use a path in the same\nway we use a path when navigating a filesystem. If we want to call a function,\nwe need to know its path.\n\nA path can take two forms:\n\n* An *absolute path* starts from a crate root by using a crate name or a\n  literal `crate`.\n* A *relative path* starts from the current module and uses `self`, `super`, or\n  an identifier in the current module.\n\nBoth absolute and relative paths are followed by one or more identifiers\nseparated by double colons (`::`).\n\nLet’s return to the example in Listing 7-1. How do we call the\n`add_to_waitlist` function? This is the same as asking, what’s the path of the\n`add_to_waitlist` function? In Listing 7-3, we simplified our code a bit by\nremoving some of the modules and functions. We’ll show two ways to call the\n`add_to_waitlist` function from a new function `eat_at_restaurant` defined in\nthe crate root. The `eat_at_restaurant` function is part of our library crate’s\npublic API, so we mark it with the `pub` keyword. In the [”Exposing Paths with\nthe `pub` Keyword”][pub]<!-- ignore --> section, we’ll go into more detail\nabout `pub`. Note that this example won’t compile just yet; we’ll explain why\nin a bit.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\nmod front_of_house {\n    mod hosting {\n        fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n```\n\n<span class=\"caption\">Listing 7-3: Calling the `add_to_waitlist` function using\nabsolute and relative paths</span>\n\nThe first time we call the `add_to_waitlist` function in `eat_at_restaurant`,\nwe use an absolute path. The `add_to_waitlist` function is defined in the same\ncrate as `eat_at_restaurant`, which means we can use the `crate` keyword to\nstart an absolute path.\n\nAfter `crate`, we include each of the successive modules until we make our way\nto `add_to_waitlist`. You can imagine a filesystem with the same structure, and\nwe’d specify the path `/front_of_house/hosting/add_to_waitlist` to run the\n`add_to_waitlist` program; using the `crate` name to start from the crate root\nis like using `/` to start from the filesystem root in your shell.\n\nThe second time we call `add_to_waitlist` in `eat_at_restaurant`, we use a\nrelative path. The path starts with `front_of_house`, the name of the module\ndefined at the same level of the module tree as `eat_at_restaurant`. Here the\nfilesystem equivalent would be using the path\n`front_of_house/hosting/add_to_waitlist`. Starting with a name means that the\npath is relative.\n\nChoosing whether to use a relative or absolute path is a decision you’ll make\nbased on your project. The decision should depend on whether you’re more likely\nto move item definition code separately from or together with the code that\nuses the item. For example, if we move the `front_of_house` module and the\n`eat_at_restaurant` function into a module named `customer_experience`, we’d\nneed to update the absolute path to `add_to_waitlist`, but the relative path\nwould still be valid. However, if we moved the `eat_at_restaurant` function\nseparately into a module named `dining`, the absolute path to the\n`add_to_waitlist` call would stay the same, but the relative path would need to\nbe updated. Our preference is to specify absolute paths because it’s more\nlikely to move code definitions and item calls independently of each other.\n\nLet’s try to compile Listing 7-3 and find out why it won’t compile yet! The\nerror we get is shown in Listing 7-4.\n\n```text\n$ cargo build\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nerror[E0603]: module `hosting` is private\n --> src/lib.rs:9:28\n  |\n9 |     crate::front_of_house::hosting::add_to_waitlist();\n  |                            ^^^^^^^\n\nerror[E0603]: module `hosting` is private\n  --> src/lib.rs:12:21\n   |\n12 |     front_of_house::hosting::add_to_waitlist();\n   |                     ^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0603`.\nerror: could not compile `restaurant`.\n\nTo learn more, run the command again with --verbose.\n```\n\n<span class=\"caption\">Listing 7-4: Compiler errors from building the code in\nListing 7-3</span>\n\nThe error messages say that module `hosting` is private. In other words, we\nhave the correct paths for the `hosting` module and the `add_to_waitlist`\nfunction, but Rust won’t let us use them because it doesn’t have access to the\nprivate sections.\n\nModules aren’t useful only for organizing your code. They also define Rust’s\n*privacy boundary*: the line that encapsulates the implementation details\nexternal code isn’t allowed to know about, call, or rely on. So, if you want to\nmake an item like a function or struct private, you put it in a module.\n\nThe way privacy works in Rust is that all items (functions, methods, structs,\nenums, modules, and constants) are private by default. Items in a parent module\ncan’t use the private items inside child modules, but items in child modules\ncan use the items in their ancestor modules. The reason is that child modules\nwrap and hide their implementation details, but the child modules can see the\ncontext in which they’re defined. To continue with the restaurant metaphor,\nthink of the privacy rules as being like the back office of a restaurant: what\ngoes on in there is private to restaurant customers, but office managers can\nsee and do everything in the restaurant in which they operate.\n\nRust chose to have the module system function this way so that hiding inner\nimplementation details is the default. That way, you know which parts of the\ninner code you can change without breaking outer code. But you can expose inner\nparts of child modules\' code to outer ancestor modules by using the `pub`\nkeyword to make an item public.\n\n### Exposing Paths with the `pub` Keyword\n\nLet’s return to the error in Listing 7-4 that told us the `hosting` module is\nprivate. We want the `eat_at_restaurant` function in the parent module to have\naccess to the `add_to_waitlist` function in the child module, so we mark the\n`hosting` module with the `pub` keyword, as shown in Listing 7-5.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\nmod front_of_house {\n    pub mod hosting {\n        fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n```\n\n<span class=\"caption\">Listing 7-5: Declaring the `hosting` module as `pub` to\nuse it from `eat_at_restaurant`</span>\n\nUnfortunately, the code in Listing 7-5 still results in an error, as shown in\nListing 7-6.\n\n```text\n$ cargo build\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nerror[E0603]: function `add_to_waitlist` is private\n --> src/lib.rs:9:37\n  |\n9 |     crate::front_of_house::hosting::add_to_waitlist();\n  |                                     ^^^^^^^^^^^^^^^\n\nerror[E0603]: function `add_to_waitlist` is private\n  --> src/lib.rs:12:30\n   |\n12 |     front_of_house::hosting::add_to_waitlist();\n   |                              ^^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0603`.\nerror: could not compile `restaurant`.\n\nTo learn more, run the command again with --verbose.\n```\n\n<span class=\"caption\">Listing 7-6: Compiler errors from building the code in\nListing 7-5</span>\n\nWhat happened? Adding the `pub` keyword in front of `mod hosting` makes the\nmodule public. With this change, if we can access `front_of_house`, we can\naccess `hosting`. But the *contents* of `hosting` are still private; making the\nmodule public doesn’t make its contents public. The `pub` keyword on a module\nonly lets code in its ancestor modules refer to it.\n\nThe errors in Listing 7-6 say that the `add_to_waitlist` function is private.\nThe privacy rules apply to structs, enums, functions, and methods as well as\nmodules.\n\nLet’s also make the `add_to_waitlist` function public by adding the `pub`\nkeyword before its definition, as in Listing 7-7.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 7-7: Adding the `pub` keyword to `mod hosting`\nand `fn add_to_waitlist` lets us call the function from\n`eat_at_restaurant`</span>\n\nNow the code will compile! Let’s look at the absolute and the relative path and\ndouble-check why adding the `pub` keyword lets us use these paths in\n`add_to_waitlist` with respect to the privacy rules.\n\nIn the absolute path, we start with `crate`, the root of our crate’s module\ntree. Then the `front_of_house` module is defined in the crate root. The\n`front_of_house` module isn’t public, but because the `eat_at_restaurant`\nfunction is defined in the same module as `front_of_house` (that is,\n`eat_at_restaurant` and `front_of_house` are siblings), we can refer to\n`front_of_house` from `eat_at_restaurant`. Next is the `hosting` module marked\nwith `pub`. We can access the parent module of `hosting`, so we can access\n`hosting`. Finally, the `add_to_waitlist` function is marked with `pub` and we\ncan access its parent module, so this function call works!\n\nIn the relative path, the logic is the same as the absolute path except for the\nfirst step: rather than starting from the crate root, the path starts from\n`front_of_house`. The `front_of_house` module is defined within the same module\nas `eat_at_restaurant`, so the relative path starting from the module in which\n`eat_at_restaurant` is defined works. Then, because `hosting` and\n`add_to_waitlist` are marked with `pub`, the rest of the path works, and this\nfunction call is valid!\n\n### Starting Relative Paths with `super`\n\nWe can also construct relative paths that begin in the parent module by using\n`super` at the start of the path. This is like starting a filesystem path with\nthe `..` syntax. Why would we want to do this?\n\nConsider the code in Listing 7-8 that models the situation in which a chef\nfixes an incorrect order and personally brings it out to the customer. The\nfunction `fix_incorrect_order` calls the function `serve_order` by specifying\nthe path to `serve_order` starting with `super`:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nfn serve_order() {}\n\nmod back_of_house {\n    fn fix_incorrect_order() {\n        cook_order();\n        super::serve_order();\n    }\n\n    fn cook_order() {}\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 7-8: Calling a function using a relative path\nstarting with `super`</span>\n\nThe `fix_incorrect_order` function is in the `back_of_house` module, so we can\nuse `super` to go to the parent module of `back_of_house`, which in this case\nis `crate`, the root. From there, we look for `serve_order` and find it.\nSuccess! We think the `back_of_house` module and the `serve_order` function are\nlikely to stay in the same relationship to each other and get moved together\nshould we decide to reorganize the crate’s module tree. Therefore, we used\n`super` so we’ll have fewer places to update code in the future if this code\ngets moved to a different module.\n\n### Making Structs and Enums Public\n\nWe can also use `pub` to designate structs and enums as public, but there are a\nfew extra details. If we use `pub` before a struct definition, we make the\nstruct public, but the struct’s fields will still be private. We can make each\nfield public or not on a case-by-case basis. In Listing 7-9, we’ve defined a\npublic `back_of_house::Breakfast` struct with a public `toast` field but a\nprivate `seasonal_fruit` field. This models the case in a restaurant where the\ncustomer can pick the type of bread that comes with a meal, but the chef\ndecides which fruit accompanies the meal based on what’s in season and in\nstock. The available fruit changes quickly, so customers can’t choose the fruit\nor even see which fruit they’ll get.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nmod back_of_house {\n    pub struct Breakfast {\n        pub toast: String,\n        seasonal_fruit: String,\n    }\n\n    impl Breakfast {\n        pub fn summer(toast: &str) -> Breakfast {\n            Breakfast {\n                toast: String::from(toast),\n                seasonal_fruit: String::from(\"peaches\"),\n            }\n        }\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Order a breakfast in the summer with Rye toast\n    let mut meal = back_of_house::Breakfast::summer(\"Rye\");\n    // Change our mind about what bread we\'d like\n    meal.toast = String::from(\"Wheat\");\n    println!(\"I\'d like {} toast please\", meal.toast);\n\n    // The next line won\'t compile if we uncomment it; we\'re not allowed\n    // to see or modify the seasonal fruit that comes with the meal\n    // meal.seasonal_fruit = String::from(\"blueberries\");\n}\n```\n\n<span class=\"caption\">Listing 7-9: A struct with some public fields and some\nprivate fields</span>\n\nBecause the `toast` field in the `back_of_house::Breakfast` struct is public,\nin `eat_at_restaurant` we can write and read to the `toast` field using dot\nnotation. Notice that we can’t use the `seasonal_fruit` field in\n`eat_at_restaurant` because `seasonal_fruit` is private. Try uncommenting the\nline modifying the `seasonal_fruit` field value to see what error you get!\n\nAlso, note that because `back_of_house::Breakfast` has a private field, the\nstruct needs to provide a public associated function that constructs an\ninstance of `Breakfast` (we’ve named it `summer` here). If `Breakfast` didn’t\nhave such a function, we couldn’t create an instance of `Breakfast` in\n`eat_at_restaurant` because we couldn’t set the value of the private\n`seasonal_fruit` field in `eat_at_restaurant`.\n\nIn contrast, if we make an enum public, all of its variants are then public. We\nonly need the `pub` before the `enum` keyword, as shown in Listing 7-10.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nmod back_of_house {\n    pub enum Appetizer {\n        Soup,\n        Salad,\n    }\n}\n\npub fn eat_at_restaurant() {\n    let order1 = back_of_house::Appetizer::Soup;\n    let order2 = back_of_house::Appetizer::Salad;\n}\n```\n\n<span class=\"caption\">Listing 7-10: Designating an enum as public makes all its\nvariants public</span>\n\nBecause we made the `Appetizer` enum public, we can use the `Soup` and `Salad`\nvariants in `eat_at_restaurant`. Enums aren’t very useful unless their variants\nare public; it would be annoying to have to annotate all enum variants with\n`pub` in every case, so the default for enum variants is to be public. Structs\nare often useful without their fields being public, so struct fields follow the\ngeneral rule of everything being private by default unless annotated with `pub`.\n\nThere’s one more situation involving `pub` that we haven’t covered, and that is\nour last module system feature: the `use` keyword. We’ll cover `use` by itself\nfirst, and then we’ll show how to combine `pub` and `use`.\n\n[pub]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword\n", number: Some(SectionNumber([7, 3])), sub_items: [], path: "ch07-03-paths-for-referring-to-an-item-in-the-module-tree.md", parent_names: ["Managing Growing Projects with Packages, Crates, and Modules"] }), Chapter(Chapter { name: "Bringing Paths Into Scope with the use Keyword", content: "## Bringing Paths into Scope with the `use` Keyword\n\nIt might seem like the paths we’ve written to call functions so far are\ninconveniently long and repetitive. For example, in Listing 7-7, whether we\nchose the absolute or relative path to the `add_to_waitlist` function, every\ntime we wanted to call `add_to_waitlist` we had to specify `front_of_house` and\n`hosting` too. Fortunately, there’s a way to simplify this process. We can\nbring a path into a scope once and then call the items in that path as if\nthey’re local items with the `use` keyword.\n\nIn Listing 7-11, we bring the `crate::front_of_house::hosting` module into the\nscope of the `eat_at_restaurant` function so we only have to specify\n`hosting::add_to_waitlist` to call the `add_to_waitlist` function in\n`eat_at_restaurant`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\nuse crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 7-11: Bringing a module into scope with\n`use`</span>\n\nAdding `use` and a path in a scope is similar to creating a symbolic link in\nthe filesystem. By adding `use crate::front_of_house::hosting` in the crate\nroot, `hosting` is now a valid name in that scope, just as though the `hosting`\nmodule had been defined in the crate root. Paths brought into scope with `use`\nalso check privacy, like any other paths.\n\nYou can also bring an item into scope with `use` and a relative path. Listing\n7-12 shows how to specify a relative path to get the same behavior as in\nListing 7-11.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\nuse self::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 7-12: Bringing a module into scope with `use` and\na relative path</span>\n\n### Creating Idiomatic `use` Paths\n\nIn Listing 7-11, you might have wondered why we specified `use\ncrate::front_of_house::hosting` and then called `hosting::add_to_waitlist` in\n`eat_at_restaurant` rather than specifying the `use` path all the way out to\nthe `add_to_waitlist` function to achieve the same result, as in Listing 7-13.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\nuse crate::front_of_house::hosting::add_to_waitlist;\n\npub fn eat_at_restaurant() {\n    add_to_waitlist();\n    add_to_waitlist();\n    add_to_waitlist();\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 7-13: Bringing the `add_to_waitlist` function\ninto scope with `use`, which is unidiomatic</span>\n\nAlthough both Listing 7-11 and 7-13 accomplish the same task, Listing 7-11 is\nthe idiomatic way to bring a function into scope with `use`. Bringing the\nfunction’s parent module into scope with `use` so we have to specify the parent\nmodule when calling the function makes it clear that the function isn’t locally\ndefined while still minimizing repetition of the full path. The code in Listing\n7-13 is unclear as to where `add_to_waitlist` is defined.\n\nOn the other hand, when bringing in structs, enums, and other items with `use`,\nit’s idiomatic to specify the full path. Listing 7-14 shows the idiomatic way\nto bring the standard library’s `HashMap` struct into the scope of a binary\ncrate.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::collections::HashMap;\n\nfn main() {\n    let mut map = HashMap::new();\n    map.insert(1, 2);\n}\n```\n\n<span class=\"caption\">Listing 7-14: Bringing `HashMap` into scope in an\nidiomatic way</span>\n\nThere’s no strong reason behind this idiom: it’s just the convention that has\nemerged, and folks have gotten used to reading and writing Rust code this way.\n\nThe exception to this idiom is if we’re bringing two items with the same name\ninto scope with `use` statements, because Rust doesn’t allow that. Listing 7-15\nshows how to bring two `Result` types into scope that have the same name but\ndifferent parent modules and how to refer to them.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nuse std::fmt;\nuse std::io;\n\nfn function1() -> fmt::Result {\n    // --snip--\n#     Ok(())\n}\n\nfn function2() -> io::Result<()> {\n    // --snip--\n#     Ok(())\n}\n```\n\n<span class=\"caption\">Listing 7-15: Bringing two types with the same name into\nthe same scope requires using their parent modules.</span>\n\nAs you can see, using the parent modules distinguishes the two `Result` types.\nIf instead we specified `use std::fmt::Result` and `use std::io::Result`, we’d\nhave two `Result` types in the same scope and Rust wouldn’t know which one we\nmeant when we used `Result`.\n\n### Providing New Names with the `as` Keyword\n\nThere’s another solution to the problem of bringing two types of the same name\ninto the same scope with `use`: after the path, we can specify `as` and a new\nlocal name, or alias, for the type. Listing 7-16 shows another way to write the\ncode in Listing 7-15 by renaming one of the two `Result` types using `as`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nuse std::fmt::Result;\nuse std::io::Result as IoResult;\n\nfn function1() -> Result {\n    // --snip--\n#     Ok(())\n}\n\nfn function2() -> IoResult<()> {\n    // --snip--\n#     Ok(())\n}\n```\n\n<span class=\"caption\">Listing 7-16: Renaming a type when it’s brought into\nscope with the `as` keyword</span>\n\nIn the second `use` statement, we chose the new name `IoResult` for the\n`std::io::Result` type, which won’t conflict with the `Result` from `std::fmt`\nthat we’ve also brought into scope. Listing 7-15 and Listing 7-16 are\nconsidered idiomatic, so the choice is up to you!\n\n### Re-exporting Names with `pub use`\n\nWhen we bring a name into scope with the `use` keyword, the name available in\nthe new scope is private. To enable the code that calls our code to refer to\nthat name as if it had been defined in that code’s scope, we can combine `pub`\nand `use`. This technique is called *re-exporting* because we’re bringing\nan item into scope but also making that item available for others to bring into\ntheir scope.\n\nListing 7-17 shows the code in Listing 7-11 with `use` in the root module\nchanged to `pub use`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub use crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 7-17: Making a name available for any code to use\nfrom a new scope with `pub use`</span>\n\nBy using `pub use`, external code can now call the `add_to_waitlist` function\nusing `hosting::add_to_waitlist`. If we hadn’t specified `pub use`, the\n`eat_at_restaurant` function could call `hosting::add_to_waitlist` in its\nscope, but external code couldn’t take advantage of this new path.\n\nRe-exporting is useful when the internal structure of your code is different\nfrom how programmers calling your code would think about the domain. For\nexample, in this restaurant metaphor, the people running the restaurant think\nabout “front of house” and “back of house.” But customers visiting a restaurant\nprobably won’t think about the parts of the restaurant in those terms. With\n`pub use`, we can write our code with one structure but expose a different\nstructure. Doing so makes our library well organized for programmers working on\nthe library and programmers calling the library.\n\n### Using External Packages\n\nIn Chapter 2, we programmed a guessing game project that used an external\npackage called `rand` to get random numbers. To use `rand` in our project, we\nadded this line to *Cargo.toml*:\n\n<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch02-00-guessing-game-tutorial.md\n* ch14-03-cargo-workspaces.md\n-->\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[dependencies]\nrand = \"0.5.5\"\n```\n\nAdding `rand` as a dependency in *Cargo.toml* tells Cargo to download the\n`rand` package and any dependencies from [crates.io](https://crates.io/) and\nmake `rand` available to our project.\n\nThen, to bring `rand` definitions into the scope of our package, we added a\n`use` line starting with the name of the package, `rand`, and listed the items\nwe wanted to bring into scope. Recall that in the [“Generating a Random\nNumber”][rand]<!-- ignore --> section in Chapter 2, we brought the `Rng` trait\ninto scope and called the `rand::thread_rng` function:\n\n```rust,ignore\n# use std::io;\nuse rand::Rng;\n\nfn main() {\n#     println!(\"Guess the number!\");\n# \n    let secret_number = rand::thread_rng().gen_range(1, 101);\n# \n#     println!(\"The secret number is: {}\", secret_number);\n# \n#     println!(\"Please input your guess.\");\n# \n#     let mut guess = String::new();\n# \n#     io::stdin()\n#         .read_line(&mut guess)\n#         .expect(\"Failed to read line\");\n# \n#     println!(\"You guessed: {}\", guess);\n}\n```\n\nMembers of the Rust community have made many packages available at\n[crates.io](https://crates.io/), and pulling any of them into your package\ninvolves these same steps: listing them in your package’s *Cargo.toml* file and\nusing `use` to bring items into scope.\n\nNote that the standard library (`std`) is also a crate that’s external to our\npackage. Because the standard library is shipped with the Rust language, we\ndon’t need to change *Cargo.toml* to include `std`. But we do need to refer to\nit with `use` to bring items from there into our package’s scope. For example,\nwith `HashMap` we would use this line:\n\n```rust\nuse std::collections::HashMap;\n```\n\nThis is an absolute path starting with `std`, the name of the standard library\ncrate.\n\n### Using Nested Paths to Clean Up Large `use` Lists\n\nIf we’re using multiple items defined in the same package or same module,\nlisting each item on its own line can take up a lot of vertical space in our\nfiles. For example, these two `use` statements we had in the Guessing Game in\nListing 2-4 bring items from `std` into scope:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use rand::Rng;\n// --snip--\nuse std::cmp::Ordering;\nuse std::io;\n// --snip--\n# \n# fn main() {\n#     println!(\"Guess the number!\");\n# \n#     let secret_number = rand::thread_rng().gen_range(1, 101);\n# \n#     println!(\"The secret number is: {}\", secret_number);\n# \n#     println!(\"Please input your guess.\");\n# \n#     let mut guess = String::new();\n# \n#     io::stdin()\n#         .read_line(&mut guess)\n#         .expect(\"Failed to read line\");\n# \n#     println!(\"You guessed: {}\", guess);\n# \n#     match guess.cmp(&secret_number) {\n#         Ordering::Less => println!(\"Too small!\"),\n#         Ordering::Greater => println!(\"Too big!\"),\n#         Ordering::Equal => println!(\"You win!\"),\n#     }\n# }\n```\n\nInstead, we can use nested paths to bring the same items into scope in one\nline. We do this by specifying the common part of the path, followed by two\ncolons, and then curly brackets around a list of the parts of the paths that\ndiffer, as shown in Listing 7-18.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use rand::Rng;\n// --snip--\nuse std::{cmp::Ordering, io};\n// --snip--\n# \n# fn main() {\n#     println!(\"Guess the number!\");\n# \n#     let secret_number = rand::thread_rng().gen_range(1, 101);\n# \n#     println!(\"The secret number is: {}\", secret_number);\n# \n#     println!(\"Please input your guess.\");\n# \n#     let mut guess = String::new();\n# \n#     io::stdin()\n#         .read_line(&mut guess)\n#         .expect(\"Failed to read line\");\n# \n#     let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n# \n#     println!(\"You guessed: {}\", guess);\n# \n#     match guess.cmp(&secret_number) {\n#         Ordering::Less => println!(\"Too small!\"),\n#         Ordering::Greater => println!(\"Too big!\"),\n#         Ordering::Equal => println!(\"You win!\"),\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 7-18: Specifying a nested path to bring multiple\nitems with the same prefix into scope</span>\n\nIn bigger programs, bringing many items into scope from the same package or\nmodule using nested paths can reduce the number of separate `use` statements\nneeded by a lot!\n\nWe can use a nested path at any level in a path, which is useful when combining\ntwo `use` statements that share a subpath. For example, Listing 7-19 shows two\n`use` statements: one that brings `std::io` into scope and one that brings\n`std::io::Write` into scope.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nuse std::io;\nuse std::io::Write;\n```\n\n<span class=\"caption\">Listing 7-19: Two `use` statements where one is a subpath\nof the other</span>\n\nThe common part of these two paths is `std::io`, and that’s the complete first\npath. To merge these two paths into one `use` statement, we can use `self` in\nthe nested path, as shown in Listing 7-20.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nuse std::io::{self, Write};\n```\n\n<span class=\"caption\">Listing 7-20: Combining the paths in Listing 7-19 into\none `use` statement</span>\n\nThis line brings `std::io` and `std::io::Write` into scope.\n\n### The Glob Operator\n\nIf we want to bring *all* public items defined in a path into scope, we can\nspecify that path followed by `*`, the glob operator:\n\n```rust\nuse std::collections::*;\n```\n\nThis `use` statement brings all public items defined in `std::collections` into\nthe current scope. Be careful when using the glob operator! Glob can make it\nharder to tell what names are in scope and where a name used in your program\nwas defined.\n\nThe glob operator is often used when testing to bring everything under test\ninto the `tests` module; we’ll talk about that in the [“How to Write\nTests”][writing-tests]<!-- ignore --> section in Chapter 11. The glob operator\nis also sometimes used as part of the prelude pattern: see [the standard\nlibrary documentation](../std/prelude/index.html#other-preludes)<!-- ignore -->\nfor more information on that pattern.\n\n[rand]: ch02-00-guessing-game-tutorial.html#generating-a-random-number\n[writing-tests]: ch11-01-writing-tests.html#how-to-write-tests\n", number: Some(SectionNumber([7, 4])), sub_items: [], path: "ch07-04-bringing-paths-into-scope-with-the-use-keyword.md", parent_names: ["Managing Growing Projects with Packages, Crates, and Modules"] }), Chapter(Chapter { name: "Separating Modules into Different Files", content: "## Separating Modules into Different Files\n\nSo far, all the examples in this chapter defined multiple modules in one file.\nWhen modules get large, you might want to move their definitions to a separate\nfile to make the code easier to navigate.\n\nFor example, let’s start from the code in Listing 7-17 and move the\n`front_of_house` module to its own file *src/front_of_house.rs* by changing the\ncrate root file so it contains the code shown in Listing 7-21. In this case,\nthe crate root file is *src/lib.rs*, but this procedure also works with binary\ncrates whose crate root file is *src/main.rs*.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\nmod front_of_house;\n\npub use crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n}\n```\n\n<span class=\"caption\">Listing 7-21: Declaring the `front_of_house` module whose\nbody will be in *src/front_of_house.rs*</span>\n\nAnd *src/front_of_house.rs* gets the definitions from the body of the\n`front_of_house` module, as shown in Listing 7-22.\n\n<span class=\"filename\">Filename: src/front_of_house.rs</span>\n\n```rust,ignore\npub mod hosting {\n    pub fn add_to_waitlist() {}\n}\n```\n\n<span class=\"caption\">Listing 7-22: Definitions inside the `front_of_house`\nmodule in *src/front_of_house.rs*</span>\n\nUsing a semicolon after `mod front_of_house` rather than using a block tells\nRust to load the contents of the module from another file with the same name as\nthe module. To continue with our example and extract the `hosting` module to\nits own file as well, we change *src/front_of_house.rs* to contain only the\ndeclaration of the `hosting` module:\n\n<span class=\"filename\">Filename: src/front_of_house.rs</span>\n\n```rust,ignore\npub mod hosting;\n```\n\nThen we create a *src/front_of_house* directory and a file\n*src/front_of_house/hosting.rs* to contain the definitions made in the\n`hosting` module:\n\n<span class=\"filename\">Filename: src/front_of_house/hosting.rs</span>\n\n```rust\npub fn add_to_waitlist() {}\n```\n\nThe module tree remains the same, and the function calls in `eat_at_restaurant`\nwill work without any modification, even though the definitions live in\ndifferent files. This technique lets you move modules to new files as they grow\nin size.\n\nNote that the `pub use crate::front_of_house::hosting` statement in\n*src/lib.rs* also hasn’t changed, nor does `use` have any impact on what files\nare compiled as part of the crate. The `mod` keyword declares modules, and Rust\nlooks in a file with the same name as the module for the code that goes into\nthat module.\n\n## Summary\n\nRust lets you split a package into multiple crates and a crate into modules\nso you can refer to items defined in one module from another module. You can do\nthis by specifying absolute or relative paths. These paths can be brought into\nscope with a `use` statement so you can use a shorter path for multiple uses of\nthe item in that scope. Module code is private by default, but you can make\ndefinitions public by adding the `pub` keyword.\n\nIn the next chapter, we’ll look at some collection data structures in the\nstandard library that you can use in your neatly organized code.\n", number: Some(SectionNumber([7, 5])), sub_items: [], path: "ch07-05-separating-modules-into-different-files.md", parent_names: ["Managing Growing Projects with Packages, Crates, and Modules"] })], path: "ch07-00-managing-growing-projects-with-packages-crates-and-modules.md", parent_names: [] }), Chapter(Chapter { name: "Common Collections", content: "# Common Collections\n\nRust’s standard library includes a number of very useful data structures called\n*collections*. Most other data types represent one specific value, but\ncollections can contain multiple values. Unlike the built-in array and tuple\ntypes, the data these collections point to is stored on the heap, which means\nthe amount of data does not need to be known at compile time and can grow or\nshrink as the program runs. Each kind of collection has different capabilities\nand costs, and choosing an appropriate one for your current situation is a\nskill you’ll develop over time. In this chapter, we’ll discuss three\ncollections that are used very often in Rust programs:\n\n* A *vector* allows you to store a variable number of values next to each other.\n* A *string* is a collection of characters. We’ve mentioned the `String` type\n  previously, but in this chapter we’ll talk about it in depth.\n* A *hash map* allows you to associate a value with a particular key. It’s a\n  particular implementation of the more general data structure called a *map*.\n\nTo learn about the other kinds of collections provided by the standard library,\nsee [the documentation][collections].\n\n[collections]: ../std/collections/index.html\n\nWe’ll discuss how to create and update vectors, strings, and hash maps, as well\nas what makes each special.\n", number: Some(SectionNumber([8])), sub_items: [Chapter(Chapter { name: "Storing Lists of Values with Vectors", content: "## Storing Lists of Values with Vectors\n\nThe first collection type we’ll look at is `Vec<T>`, also known as a *vector*.\nVectors allow you to store more than one value in a single data structure that\nputs all the values next to each other in memory. Vectors can only store values\nof the same type. They are useful when you have a list of items, such as the\nlines of text in a file or the prices of items in a shopping cart.\n\n### Creating a New Vector\n\nTo create a new, empty vector, we can call the `Vec::new` function, as shown in\nListing 8-1.\n\n```rust\n# fn main() {\n    let v: Vec<i32> = Vec::new();\n# }\n```\n\n<span class=\"caption\">Listing 8-1: Creating a new, empty vector to hold values\nof type `i32`</span>\n\nNote that we added a type annotation here. Because we aren’t inserting any\nvalues into this vector, Rust doesn’t know what kind of elements we intend to\nstore. This is an important point. Vectors are implemented using generics;\nwe’ll cover how to use generics with your own types in Chapter 10. For now,\nknow that the `Vec<T>` type provided by the standard library can hold any type,\nand when a specific vector holds a specific type, the type is specified within\nangle brackets. In Listing 8-1, we’ve told Rust that the `Vec<T>` in `v` will\nhold elements of the `i32` type.\n\nIn more realistic code, Rust can often infer the type of value you want to\nstore once you insert values, so you rarely need to do this type annotation.\nIt’s more common to create a `Vec<T>` that has initial values, and Rust\nprovides the `vec!` macro for convenience. The macro will create a new vector\nthat holds the values you give it. Listing 8-2 creates a new `Vec<i32>` that\nholds the values `1`, `2`, and `3`. The integer type is `i32` because that’s\nthe default integer type, as we discussed in the [“Data Types”][data-types]<!--\nignore --> section of Chapter 3.\n\n```rust\n# fn main() {\n    let v = vec![1, 2, 3];\n# }\n```\n\n<span class=\"caption\">Listing 8-2: Creating a new vector containing\nvalues</span>\n\nBecause we’ve given initial `i32` values, Rust can infer that the type of `v`\nis `Vec<i32>`, and the type annotation isn’t necessary. Next, we’ll look at how\nto modify a vector.\n\n### Updating a Vector\n\nTo create a vector and then add elements to it, we can use the `push` method,\nas shown in Listing 8-3.\n\n```rust\n# fn main() {\n    let mut v = Vec::new();\n\n    v.push(5);\n    v.push(6);\n    v.push(7);\n    v.push(8);\n# }\n```\n\n<span class=\"caption\">Listing 8-3: Using the `push` method to add values to a\nvector</span>\n\nAs with any variable, if we want to be able to change its value, we need to\nmake it mutable using the `mut` keyword, as discussed in Chapter 3. The numbers\nwe place inside are all of type `i32`, and Rust infers this from the data, so\nwe don’t need the `Vec<i32>` annotation.\n\n### Dropping a Vector Drops Its Elements\n\nLike any other `struct`, a vector is freed when it goes out of scope, as\nannotated in Listing 8-4.\n\n```rust\n# fn main() {\n    {\n        let v = vec![1, 2, 3, 4];\n\n        // do stuff with v\n    } // <- v goes out of scope and is freed here\n# }\n```\n\n<span class=\"caption\">Listing 8-4: Showing where the vector and its elements\nare dropped</span>\n\nWhen the vector gets dropped, all of its contents are also dropped, meaning\nthose integers it holds will be cleaned up. This may seem like a\nstraightforward point but can get a bit more complicated when you start to\nintroduce references to the elements of the vector. Let’s tackle that next!\n\n### Reading Elements of Vectors\n\nNow that you know how to create, update, and destroy vectors, knowing how to\nread their contents is a good next step. There are two ways to reference a\nvalue stored in a vector. In the examples, we’ve annotated the types of the\nvalues that are returned from these functions for extra clarity.\n\nListing 8-5 shows both methods of accessing a value in a vector, either with\nindexing syntax or the `get` method.\n\n```rust\n# fn main() {\n    let v = vec![1, 2, 3, 4, 5];\n\n    let third: &i32 = &v[2];\n    println!(\"The third element is {}\", third);\n\n    match v.get(2) {\n        Some(third) => println!(\"The third element is {}\", third),\n        None => println!(\"There is no third element.\"),\n    }\n# }\n```\n\n<span class=\"caption\">Listing 8-5: Using indexing syntax or the `get` method to\naccess an item in a vector</span>\n\nNote two details here. First, we use the index value of `2` to get the third\nelement: vectors are indexed by number, starting at zero. Second, the two ways\nto get the third element are by using `&` and `[]`, which gives us a reference,\nor by using the `get` method with the index passed as an argument, which gives\nus an `Option<&T>`.\n\nRust has two ways to reference an element so you can choose how the program\nbehaves when you try to use an index value that the vector doesn’t have an\nelement for. As an example, let’s see what a program will do if it has a vector\nthat holds five elements and then tries to access an element at index 100, as\nshown in Listing 8-6.\n\n```rust,should_panic,panics\n# fn main() {\n    let v = vec![1, 2, 3, 4, 5];\n\n    let does_not_exist = &v[100];\n    let does_not_exist = v.get(100);\n# }\n```\n\n<span class=\"caption\">Listing 8-6: Attempting to access the element at index\n100 in a vector containing five elements</span>\n\nWhen we run this code, the first `[]` method will cause the program to panic\nbecause it references a nonexistent element. This method is best used when you\nwant your program to crash if there’s an attempt to access an element past the\nend of the vector.\n\nWhen the `get` method is passed an index that is outside the vector, it returns\n`None` without panicking. You would use this method if accessing an element\nbeyond the range of the vector happens occasionally under normal circumstances.\nYour code will then have logic to handle having either `Some(&element)` or\n`None`, as discussed in Chapter 6. For example, the index could be coming from\na person entering a number. If they accidentally enter a number that’s too\nlarge and the program gets a `None` value, you could tell the user how many\nitems are in the current vector and give them another chance to enter a valid\nvalue. That would be more user-friendly than crashing the program due to a typo!\n\nWhen the program has a valid reference, the borrow checker enforces the\nownership and borrowing rules (covered in Chapter 4) to ensure this reference\nand any other references to the contents of the vector remain valid. Recall the\nrule that states you can’t have mutable and immutable references in the same\nscope. That rule applies in Listing 8-7, where we hold an immutable reference to\nthe first element in a vector and try to add an element to the end, which won’t\nwork.\n\n```rust,ignore,does_not_compile\n# fn main() {\n    let mut v = vec![1, 2, 3, 4, 5];\n\n    let first = &v[0];\n\n    v.push(6);\n\n    println!(\"The first element is: {}\", first);\n# }\n```\n\n<span class=\"caption\">Listing 8-7: Attempting to add an element to a vector\nwhile holding a reference to an item</span>\n\nCompiling this code will result in this error:\n\n```text\n$ cargo run\n   Compiling collections v0.1.0 (file:///projects/collections)\nerror[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n --> src/main.rs:6:5\n  |\n4 |     let first = &v[0];\n  |                  - immutable borrow occurs here\n5 | \n6 |     v.push(6);\n  |     ^^^^^^^^^ mutable borrow occurs here\n7 | \n8 |     println!(\"The first element is: {}\", first);\n  |                                          ----- immutable borrow later used here\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0502`.\nerror: could not compile `collections`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe code in Listing 8-7 might look like it should work: why should a reference\nto the first element care about what changes at the end of the vector? This\nerror is due to the way vectors work: adding a new element onto the end of the\nvector might require allocating new memory and copying the old elements to the\nnew space, if there isn’t enough room to put all the elements next to each\nother where the vector currently is. In that case, the reference to the first\nelement would be pointing to deallocated memory. The borrowing rules prevent\nprograms from ending up in that situation.\n\n> Note: For more on the implementation details of the `Vec<T>` type, see [“The\n> Rustonomicon”][nomicon].\n\n### Iterating over the Values in a Vector\n\nIf we want to access each element in a vector in turn, we can iterate through\nall of the elements rather than use indices to access one at a time. Listing\n8-8 shows how to use a `for` loop to get immutable references to each element\nin a vector of `i32` values and print them.\n\n```rust\n# fn main() {\n    let v = vec![100, 32, 57];\n    for i in &v {\n        println!(\"{}\", i);\n    }\n# }\n```\n\n<span class=\"caption\">Listing 8-8: Printing each element in a vector by\niterating over the elements using a `for` loop</span>\n\nWe can also iterate over mutable references to each element in a mutable vector\nin order to make changes to all the elements. The `for` loop in Listing 8-9\nwill add `50` to each element.\n\n```rust\n# fn main() {\n    let mut v = vec![100, 32, 57];\n    for i in &mut v {\n        *i += 50;\n    }\n# }\n```\n\n<span class=\"caption\">Listing 8-9: Iterating over mutable references to\nelements in a vector</span>\n\nTo change the value that the mutable reference refers to, we have to use the\ndereference operator (`*`) to get to the value in `i` before we can use the\n`+=` operator. We’ll talk more about the dereference operator in the\n[“Following the Pointer to the Value with the Dereference Operator”][deref]\nsection of Chapter 15.\n\n### Using an Enum to Store Multiple Types\n\nAt the beginning of this chapter, we said that vectors can only store values\nthat are the same type. This can be inconvenient; there are definitely use\ncases for needing to store a list of items of different types. Fortunately, the\nvariants of an enum are defined under the same enum type, so when we need to\nstore elements of a different type in a vector, we can define and use an enum!\n\nFor example, say we want to get values from a row in a spreadsheet in which\nsome of the columns in the row contain integers, some floating-point numbers,\nand some strings. We can define an enum whose variants will hold the different\nvalue types, and then all the enum variants will be considered the same type:\nthat of the enum. Then we can create a vector that holds that enum and so,\nultimately, holds different types. We’ve demonstrated this in Listing 8-10.\n\n```rust\n# fn main() {\n    enum SpreadsheetCell {\n        Int(i32),\n        Float(f64),\n        Text(String),\n    }\n\n    let row = vec![\n        SpreadsheetCell::Int(3),\n        SpreadsheetCell::Text(String::from(\"blue\")),\n        SpreadsheetCell::Float(10.12),\n    ];\n# }\n```\n\n<span class=\"caption\">Listing 8-10: Defining an `enum` to store values of\ndifferent types in one vector</span>\n\nRust needs to know what types will be in the vector at compile time so it knows\nexactly how much memory on the heap will be needed to store each element. A\nsecondary advantage is that we can be explicit about what types are allowed in\nthis vector. If Rust allowed a vector to hold any type, there would be a chance\nthat one or more of the types would cause errors with the operations performed\non the elements of the vector. Using an enum plus a `match` expression means\nthat Rust will ensure at compile time that every possible case is handled, as\ndiscussed in Chapter 6.\n\nWhen you’re writing a program, if you don’t know the exhaustive set of types\nthe program will get at runtime to store in a vector, the enum technique won’t\nwork. Instead, you can use a trait object, which we’ll cover in Chapter 17.\n\nNow that we’ve discussed some of the most common ways to use vectors, be sure\nto review the API documentation for all the many useful methods defined on\n`Vec<T>` by the standard library. For example, in addition to `push`, a `pop`\nmethod removes and returns the last element. Let’s move on to the next\ncollection type: `String`!\n\n[data-types]: ch03-02-data-types.html#data-types\n[nomicon]: ../nomicon/vec.html\n[deref]: ch15-02-deref.html#following-the-pointer-to-the-value-with-the-dereference-operator\n", number: Some(SectionNumber([8, 1])), sub_items: [], path: "ch08-01-vectors.md", parent_names: ["Common Collections"] }), Chapter(Chapter { name: "Storing UTF-8 Encoded Text with Strings", content: "## Storing UTF-8 Encoded Text with Strings\n\nWe talked about strings in Chapter 4, but we’ll look at them in more depth now.\nNew Rustaceans commonly get stuck on strings for a combination of three\nreasons: Rust’s propensity for exposing possible errors, strings being a more\ncomplicated data structure than many programmers give them credit for, and\nUTF-8. These factors combine in a way that can seem difficult when you’re\ncoming from other programming languages.\n\nIt’s useful to discuss strings in the context of collections because strings\nare implemented as a collection of bytes, plus some methods to provide useful\nfunctionality when those bytes are interpreted as text. In this section, we’ll\ntalk about the operations on `String` that every collection type has, such as\ncreating, updating, and reading. We’ll also discuss the ways in which `String`\nis different from the other collections, namely how indexing into a `String` is\ncomplicated by the differences between how people and computers interpret\n`String` data.\n\n### What Is a String?\n\nWe’ll first define what we mean by the term *string*. Rust has only one string\ntype in the core language, which is the string slice `str` that is usually seen\nin its borrowed form `&str`. In Chapter 4, we talked about *string slices*,\nwhich are references to some UTF-8 encoded string data stored elsewhere. String\nliterals, for example, are stored in the program’s binary and are therefore\nstring slices.\n\nThe `String` type, which is provided by Rust’s standard library rather than\ncoded into the core language, is a growable, mutable, owned, UTF-8 encoded\nstring type. When Rustaceans refer to “strings” in Rust, they usually mean the\n`String` and the string slice `&str` types, not just one of those types.\nAlthough this section is largely about `String`, both types are used heavily in\nRust’s standard library, and both `String` and string slices are UTF-8 encoded.\n\nRust’s standard library also includes a number of other string types, such as\n`OsString`, `OsStr`, `CString`, and `CStr`. Library crates can provide even\nmore options for storing string data. See how those names all end in `String`\nor `Str`? They refer to owned and borrowed variants, just like the `String` and\n`str` types you’ve seen previously. These string types can store text in\ndifferent encodings or be represented in memory in a different way, for\nexample. We won’t discuss these other string types in this chapter; see their\nAPI documentation for more about how to use them and when each is appropriate.\n\n### Creating a New String\n\nMany of the same operations available with `Vec<T>` are available with `String`\nas well, starting with the `new` function to create a string, shown in Listing\n8-11.\n\n```rust\n# fn main() {\n    let mut s = String::new();\n# }\n```\n\n<span class=\"caption\">Listing 8-11: Creating a new, empty `String`</span>\n\nThis line creates a new empty string called `s`, which we can then load data\ninto. Often, we’ll have some initial data that we want to start the string\nwith. For that, we use the `to_string` method, which is available on any type\nthat implements the `Display` trait, as string literals do. Listing 8-12 shows\ntwo examples.\n\n```rust\n# fn main() {\n    let data = \"initial contents\";\n\n    let s = data.to_string();\n\n    // the method also works on a literal directly:\n    let s = \"initial contents\".to_string();\n# }\n```\n\n<span class=\"caption\">Listing 8-12: Using the `to_string` method to create a\n`String` from a string literal</span>\n\nThis code creates a string containing `initial contents`.\n\nWe can also use the function `String::from` to create a `String` from a string\nliteral. The code in Listing 8-13 is equivalent to the code from Listing 8-12\nthat uses `to_string`.\n\n```rust\n# fn main() {\n    let s = String::from(\"initial contents\");\n# }\n```\n\n<span class=\"caption\">Listing 8-13: Using the `String::from` function to create\na `String` from a string literal</span>\n\nBecause strings are used for so many things, we can use many different generic\nAPIs for strings, providing us with a lot of options. Some of them can seem\nredundant, but they all have their place! In this case, `String::from` and\n`to_string` do the same thing, so which you choose is a matter of style.\n\nRemember that strings are UTF-8 encoded, so we can include any properly encoded\ndata in them, as shown in Listing 8-14.\n\n```rust\n# fn main() {\n    let hello = String::from(\"السلام عليكم\");\n    let hello = String::from(\"Dobrý den\");\n    let hello = String::from(\"Hello\");\n    let hello = String::from(\"ש\u{5b8}\u{5c1}לו\u{5b9}ם\");\n    let hello = String::from(\"नमस\u{94d}त\u{947}\");\n    let hello = String::from(\"こんにちは\");\n    let hello = String::from(\"안녕하세요\");\n    let hello = String::from(\"你好\");\n    let hello = String::from(\"Olá\");\n    let hello = String::from(\"Здравствуйте\");\n    let hello = String::from(\"Hola\");\n# }\n```\n\n<span class=\"caption\">Listing 8-14: Storing greetings in different languages in\nstrings</span>\n\nAll of these are valid `String` values.\n\n### Updating a String\n\nA `String` can grow in size and its contents can change, just like the contents\nof a `Vec<T>`, if you push more data into it. In addition, you can conveniently\nuse the `+` operator or the `format!` macro to concatenate `String` values.\n\n#### Appending to a String with `push_str` and `push`\n\nWe can grow a `String` by using the `push_str` method to append a string slice,\nas shown in Listing 8-15.\n\n```rust\n# fn main() {\n    let mut s = String::from(\"foo\");\n    s.push_str(\"bar\");\n# }\n```\n\n<span class=\"caption\">Listing 8-15: Appending a string slice to a `String`\nusing the `push_str` method</span>\n\nAfter these two lines, `s` will contain `foobar`. The `push_str` method takes a\nstring slice because we don’t necessarily want to take ownership of the\nparameter. For example, the code in Listing 8-16 shows that it would be\nunfortunate if we weren’t able to use `s2` after appending its contents to `s1`.\n\n```rust\n# fn main() {\n    let mut s1 = String::from(\"foo\");\n    let s2 = \"bar\";\n    s1.push_str(s2);\n    println!(\"s2 is {}\", s2);\n# }\n```\n\n<span class=\"caption\">Listing 8-16: Using a string slice after appending its\ncontents to a `String`</span>\n\nIf the `push_str` method took ownership of `s2`, we wouldn’t be able to print\nits value on the last line. However, this code works as we’d expect!\n\nThe `push` method takes a single character as a parameter and adds it to the\n`String`. Listing 8-17 shows code that adds the letter *l* to a `String` using\nthe `push` method.\n\n```rust\n# fn main() {\n    let mut s = String::from(\"lo\");\n    s.push(\'l\');\n# }\n```\n\n<span class=\"caption\">Listing 8-17: Adding one character to a `String` value\nusing `push`</span>\n\nAs a result of this code, `s` will contain `lol`.\n\n#### Concatenation with the `+` Operator or the `format!` Macro\n\nOften, you’ll want to combine two existing strings. One way is to use the `+`\noperator, as shown in Listing 8-18.\n\n```rust\n# fn main() {\n    let s1 = String::from(\"Hello, \");\n    let s2 = String::from(\"world!\");\n    let s3 = s1 + &s2; // note s1 has been moved here and can no longer be used\n# }\n```\n\n<span class=\"caption\">Listing 8-18: Using the `+` operator to combine two\n`String` values into a new `String` value</span>\n\nThe string `s3` will contain `Hello, world!` as a result of this code. The\nreason `s1` is no longer valid after the addition and the reason we used a\nreference to `s2` has to do with the signature of the method that gets called\nwhen we use the `+` operator. The `+` operator uses the `add` method, whose\nsignature looks something like this:\n\n```rust,ignore\nfn add(self, s: &str) -> String {\n```\n\nThis isn’t the exact signature that’s in the standard library: in the standard\nlibrary, `add` is defined using generics. Here, we’re looking at the signature\nof `add` with concrete types substituted for the generic ones, which is what\nhappens when we call this method with `String` values. We’ll discuss generics\nin Chapter 10. This signature gives us the clues we need to understand the\ntricky bits of the `+` operator.\n\nFirst, `s2` has an `&`, meaning that we’re adding a *reference* of the second\nstring to the first string because of the `s` parameter in the `add` function:\nwe can only add a `&str` to a `String`; we can’t add two `String` values\ntogether. But wait—the type of `&s2` is `&String`, not `&str`, as specified in\nthe second parameter to `add`. So why does Listing 8-18 compile?\n\nThe reason we’re able to use `&s2` in the call to `add` is that the compiler\ncan *coerce* the `&String` argument into a `&str`. When we call the `add`\nmethod, Rust uses a *deref coercion*, which here turns `&s2` into `&s2[..]`.\nWe’ll discuss deref coercion in more depth in Chapter 15. Because `add` does\nnot take ownership of the `s` parameter, `s2` will still be a valid `String`\nafter this operation.\n\nSecond, we can see in the signature that `add` takes ownership of `self`,\nbecause `self` does *not* have an `&`. This means `s1` in Listing 8-18 will be\nmoved into the `add` call and no longer be valid after that. So although `let\ns3 = s1 + &s2;` looks like it will copy both strings and create a new one, this\nstatement actually takes ownership of `s1`, appends a copy of the contents of\n`s2`, and then returns ownership of the result. In other words, it looks like\nit’s making a lot of copies but isn’t; the implementation is more efficient\nthan copying.\n\nIf we need to concatenate multiple strings, the behavior of the `+` operator\ngets unwieldy:\n\n```rust\n# fn main() {\n    let s1 = String::from(\"tic\");\n    let s2 = String::from(\"tac\");\n    let s3 = String::from(\"toe\");\n\n    let s = s1 + \"-\" + &s2 + \"-\" + &s3;\n# }\n```\n\nAt this point, `s` will be `tic-tac-toe`. With all of the `+` and `\"`\ncharacters, it’s difficult to see what’s going on. For more complicated string\ncombining, we can use the `format!` macro:\n\n```rust\n# fn main() {\n    let s1 = String::from(\"tic\");\n    let s2 = String::from(\"tac\");\n    let s3 = String::from(\"toe\");\n\n    let s = format!(\"{}-{}-{}\", s1, s2, s3);\n# }\n```\n\nThis code also sets `s` to `tic-tac-toe`. The `format!` macro works in the same\nway as `println!`, but instead of printing the output to the screen, it returns\na `String` with the contents. The version of the code using `format!` is much\neasier to read and doesn’t take ownership of any of its parameters.\n\n### Indexing into Strings\n\nIn many other programming languages, accessing individual characters in a\nstring by referencing them by index is a valid and common operation. However,\nif you try to access parts of a `String` using indexing syntax in Rust, you’ll\nget an error. Consider the invalid code in Listing 8-19.\n\n```rust,ignore,does_not_compile\n# fn main() {\n    let s1 = String::from(\"hello\");\n    let h = s1[0];\n# }\n```\n\n<span class=\"caption\">Listing 8-19: Attempting to use indexing syntax with a\nString</span>\n\nThis code will result in the following error:\n\n```text\n$ cargo run\n   Compiling collections v0.1.0 (file:///projects/collections)\nerror[E0277]: the type `std::string::String` cannot be indexed by `{integer}`\n --> src/main.rs:3:13\n  |\n3 |     let h = s1[0];\n  |             ^^^^^ `std::string::String` cannot be indexed by `{integer}`\n  |\n  = help: the trait `std::ops::Index<{integer}>` is not implemented for `std::string::String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `collections`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe error and the note tell the story: Rust strings don’t support indexing. But\nwhy not? To answer that question, we need to discuss how Rust stores strings in\nmemory.\n\n#### Internal Representation\n\nA `String` is a wrapper over a `Vec<u8>`. Let’s look at some of our properly\nencoded UTF-8 example strings from Listing 8-14. First, this one:\n\n```rust\n# fn main() {\n#     let hello = String::from(\"السلام عليكم\");\n#     let hello = String::from(\"Dobrý den\");\n#     let hello = String::from(\"Hello\");\n#     let hello = String::from(\"ש\u{5b8}\u{5c1}לו\u{5b9}ם\");\n#     let hello = String::from(\"नमस\u{94d}त\u{947}\");\n#     let hello = String::from(\"こんにちは\");\n#     let hello = String::from(\"안녕하세요\");\n#     let hello = String::from(\"你好\");\n#     let hello = String::from(\"Olá\");\n#     let hello = String::from(\"Здравствуйте\");\n    let hello = String::from(\"Hola\");\n# }\n```\n\nIn this case, `len` will be 4, which means the vector storing the string “Hola”\nis 4 bytes long. Each of these letters takes 1 byte when encoded in UTF-8. But\nwhat about the following line? (Note that this string begins with the capital\nCyrillic letter Ze, not the Arabic number 3.)\n\n```rust\n# fn main() {\n#     let hello = String::from(\"السلام عليكم\");\n#     let hello = String::from(\"Dobrý den\");\n#     let hello = String::from(\"Hello\");\n#     let hello = String::from(\"ש\u{5b8}\u{5c1}לו\u{5b9}ם\");\n#     let hello = String::from(\"नमस\u{94d}त\u{947}\");\n#     let hello = String::from(\"こんにちは\");\n#     let hello = String::from(\"안녕하세요\");\n#     let hello = String::from(\"你好\");\n#     let hello = String::from(\"Olá\");\n    let hello = String::from(\"Здравствуйте\");\n#     let hello = String::from(\"Hola\");\n# }\n```\n\nAsked how long the string is, you might say 12. However, Rust’s answer is 24:\nthat’s the number of bytes it takes to encode “Здравствуйте” in UTF-8, because\neach Unicode scalar value in that string takes 2 bytes of storage. Therefore,\nan index into the string’s bytes will not always correlate to a valid Unicode\nscalar value. To demonstrate, consider this invalid Rust code:\n\n```rust,ignore,does_not_compile\nlet hello = \"Здравствуйте\";\nlet answer = &hello[0];\n```\n\nWhat should the value of `answer` be? Should it be `З`, the first letter? When\nencoded in UTF-8, the first byte of `З` is `208` and the second is `151`, so\n`answer` should in fact be `208`, but `208` is not a valid character on its\nown. Returning `208` is likely not what a user would want if they asked for the\nfirst letter of this string; however, that’s the only data that Rust has at\nbyte index 0. Users generally don’t want the byte value returned, even if the\nstring contains only Latin letters: if `&\"hello\"[0]` were valid code that\nreturned the byte value, it would return `104`, not `h`. To avoid returning an\nunexpected value and causing bugs that might not be discovered immediately,\nRust doesn’t compile this code at all and prevents misunderstandings early in\nthe development process.\n\n#### Bytes and Scalar Values and Grapheme Clusters! Oh My!\n\nAnother point about UTF-8 is that there are actually three relevant ways to\nlook at strings from Rust’s perspective: as bytes, scalar values, and grapheme\nclusters (the closest thing to what we would call *letters*).\n\nIf we look at the Hindi word “नमस\u{94d}त\u{947}” written in the Devanagari script, it is\nstored as a vector of `u8` values that looks like this:\n\n```text\n[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,\n224, 165, 135]\n```\n\nThat’s 18 bytes and is how computers ultimately store this data. If we look at\nthem as Unicode scalar values, which are what Rust’s `char` type is, those\nbytes look like this:\n\n```text\n[\'न\', \'म\', \'स\', \'\u{94d}\', \'त\', \'\u{947}\']\n```\n\nThere are six `char` values here, but the fourth and sixth are not letters:\nthey’re diacritics that don’t make sense on their own. Finally, if we look at\nthem as grapheme clusters, we’d get what a person would call the four letters\nthat make up the Hindi word:\n\n```text\n[\"न\", \"म\", \"स\u{94d}\", \"त\u{947}\"]\n```\n\nRust provides different ways of interpreting the raw string data that computers\nstore so that each program can choose the interpretation it needs, no matter\nwhat human language the data is in.\n\nA final reason Rust doesn’t allow us to index into a `String` to get a\ncharacter is that indexing operations are expected to always take constant time\n(O(1)). But it isn’t possible to guarantee that performance with a `String`,\nbecause Rust would have to walk through the contents from the beginning to the\nindex to determine how many valid characters there were.\n\n### Slicing Strings\n\nIndexing into a string is often a bad idea because it’s not clear what the\nreturn type of the string-indexing operation should be: a byte value, a\ncharacter, a grapheme cluster, or a string slice. Therefore, Rust asks you to\nbe more specific if you really need to use indices to create string slices. To\nbe more specific in your indexing and indicate that you want a string slice,\nrather than indexing using `[]` with a single number, you can use `[]` with a\nrange to create a string slice containing particular bytes:\n\n```rust\nlet hello = \"Здравствуйте\";\n\nlet s = &hello[0..4];\n```\n\nHere, `s` will be a `&str` that contains the first 4 bytes of the string.\nEarlier, we mentioned that each of these characters was 2 bytes, which means\n`s` will be `Зд`.\n\nWhat would happen if we used `&hello[0..1]`? The answer: Rust would panic at\nruntime in the same way as if an invalid index were accessed in a vector:\n\n```text\n$ cargo run\n   Compiling collections v0.1.0 (file:///projects/collections)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/collections`\nthread \'main\' panicked at \'byte index 1 is not a char boundary; it is inside \'З\' (bytes 0..2) of `Здравствуйте`\', src/libcore/str/mod.rs:2069:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n```\n\nYou should use ranges to create string slices with caution, because doing so\ncan crash your program.\n\n### Methods for Iterating Over Strings\n\nFortunately, you can access elements in a string in other ways.\n\nIf you need to perform operations on individual Unicode scalar values, the best\nway to do so is to use the `chars` method. Calling `chars` on “नमस\u{94d}त\u{947}” separates\nout and returns six values of type `char`, and you can iterate over the result\nto access each element:\n\n```rust\nfor c in \"नमस\u{94d}त\u{947}\".chars() {\n    println!(\"{}\", c);\n}\n```\n\nThis code will print the following:\n\n```text\nन\nम\nस\n\u{94d}\nत\n\u{947}\n```\n\nThe `bytes` method returns each raw byte, which might be appropriate for your\ndomain:\n\n```rust\nfor b in \"नमस\u{94d}त\u{947}\".bytes() {\n    println!(\"{}\", b);\n}\n```\n\nThis code will print the 18 bytes that make up this `String`:\n\n```text\n224\n164\n// --snip--\n165\n135\n```\n\nBut be sure to remember that valid Unicode scalar values may be made up of more\nthan 1 byte.\n\nGetting grapheme clusters from strings is complex, so this functionality is not\nprovided by the standard library. Crates are available on\n[crates.io](https://crates.io/) if this is the functionality you need.\n\n### Strings Are Not So Simple\n\nTo summarize, strings are complicated. Different programming languages make\ndifferent choices about how to present this complexity to the programmer. Rust\nhas chosen to make the correct handling of `String` data the default behavior\nfor all Rust programs, which means programmers have to put more thought into\nhandling UTF-8 data upfront. This trade-off exposes more of the complexity of\nstrings than is apparent in other programming languages, but it prevents you\nfrom having to handle errors involving non-ASCII characters later in your\ndevelopment life cycle.\n\nLet’s switch to something a bit less complex: hash maps!\n", number: Some(SectionNumber([8, 2])), sub_items: [], path: "ch08-02-strings.md", parent_names: ["Common Collections"] }), Chapter(Chapter { name: "Storing Keys with Associated Values in Hash Maps", content: "## Storing Keys with Associated Values in Hash Maps\n\nThe last of our common collections is the *hash map*. The type `HashMap<K, V>`\nstores a mapping of keys of type `K` to values of type `V`. It does this via a\n*hashing function*, which determines how it places these keys and values into\nmemory. Many programming languages support this kind of data structure, but\nthey often use a different name, such as hash, map, object, hash table,\ndictionary, or associative array, just to name a few.\n\nHash maps are useful when you want to look up data not by using an index, as\nyou can with vectors, but by using a key that can be of any type. For example,\nin a game, you could keep track of each team’s score in a hash map in which\neach key is a team’s name and the values are each team’s score. Given a team\nname, you can retrieve its score.\n\nWe’ll go over the basic API of hash maps in this section, but many more goodies\nare hiding in the functions defined on `HashMap<K, V>` by the standard library.\nAs always, check the standard library documentation for more information.\n\n### Creating a New Hash Map\n\nYou can create an empty hash map with `new` and add elements with `insert`. In\nListing 8-20, we’re keeping track of the scores of two teams whose names are\nBlue and Yellow. The Blue team starts with 10 points, and the Yellow team\nstarts with 50.\n\n```rust\n# fn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(\"Blue\"), 10);\n    scores.insert(String::from(\"Yellow\"), 50);\n# }\n```\n\n<span class=\"caption\">Listing 8-20: Creating a new hash map and inserting some\nkeys and values</span>\n\nNote that we need to first `use` the `HashMap` from the collections portion of\nthe standard library. Of our three common collections, this one is the least\noften used, so it’s not included in the features brought into scope\nautomatically in the prelude. Hash maps also have less support from the\nstandard library; there’s no built-in macro to construct them, for example.\n\nJust like vectors, hash maps store their data on the heap. This `HashMap` has\nkeys of type `String` and values of type `i32`. Like vectors, hash maps are\nhomogeneous: all of the keys must have the same type, and all of the values\nmust have the same type.\n\nAnother way of constructing a hash map is by using iterators and the `collect`\nmethod on a vector of tuples, where each tuple consists of a key and its value.\nWe’ll be going into more detail about iterators and their associated methods in\nthe [”Processing a Series of Items with Iterators” section of Chapter\n13][iterators]<!-- ignore -->. The `collect` method gathers data into a number\nof collection types, including `HashMap`. For example, if we had the team names\nand initial scores in two separate vectors, we could use the `zip` method to\ncreate a vector of tuples where “Blue” is paired with 10, and so forth. Then we\ncould use the `collect` method to turn that vector of tuples into a hash map,\nas shown in Listing 8-21.\n\n```rust\n# fn main() {\n    use std::collections::HashMap;\n\n    let teams = vec![String::from(\"Blue\"), String::from(\"Yellow\")];\n    let initial_scores = vec![10, 50];\n\n    let mut scores: HashMap<_, _> =\n        teams.into_iter().zip(initial_scores.into_iter()).collect();\n# }\n```\n\n<span class=\"caption\">Listing 8-21: Creating a hash map from a list of teams\nand a list of scores</span>\n\nThe type annotation `HashMap<_, _>` is needed here because it’s possible to\n`collect` into many different data structures and Rust doesn’t know which you\nwant unless you specify. For the parameters for the key and value types,\nhowever, we use underscores, and Rust can infer the types that the hash map\ncontains based on the types of the data in the vectors. In Listing 8-21, the\nkey type will be `String` and the value type will be `i32`, just as the types\nwere in Listing 8-20.\n\n### Hash Maps and Ownership\n\nFor types that implement the `Copy` trait, like `i32`, the values are copied\ninto the hash map. For owned values like `String`, the values will be moved and\nthe hash map will be the owner of those values, as demonstrated in Listing 8-22.\n\n```rust\n# fn main() {\n    use std::collections::HashMap;\n\n    let field_name = String::from(\"Favorite color\");\n    let field_value = String::from(\"Blue\");\n\n    let mut map = HashMap::new();\n    map.insert(field_name, field_value);\n    // field_name and field_value are invalid at this point, try using them and\n    // see what compiler error you get!\n# }\n```\n\n<span class=\"caption\">Listing 8-22: Showing that keys and values are owned by\nthe hash map once they’re inserted</span>\n\nWe aren’t able to use the variables `field_name` and `field_value` after\nthey’ve been moved into the hash map with the call to `insert`.\n\nIf we insert references to values into the hash map, the values won’t be moved\ninto the hash map. The values that the references point to must be valid for at\nleast as long as the hash map is valid. We’ll talk more about these issues in\nthe [“Validating References with\nLifetimes”][validating-references-with-lifetimes]<!-- ignore --> section in\nChapter 10.\n\n### Accessing Values in a Hash Map\n\nWe can get a value out of the hash map by providing its key to the `get`\nmethod, as shown in Listing 8-23.\n\n```rust\n# fn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(\"Blue\"), 10);\n    scores.insert(String::from(\"Yellow\"), 50);\n\n    let team_name = String::from(\"Blue\");\n    let score = scores.get(&team_name);\n# }\n```\n\n<span class=\"caption\">Listing 8-23: Accessing the score for the Blue team\nstored in the hash map</span>\n\nHere, `score` will have the value that’s associated with the Blue team, and the\nresult will be `Some(&10)`. The result is wrapped in `Some` because `get`\nreturns an `Option<&V>`; if there’s no value for that key in the hash map,\n`get` will return `None`. The program will need to handle the `Option` in one\nof the ways that we covered in Chapter 6.\n\nWe can iterate over each key/value pair in a hash map in a similar manner as we\ndo with vectors, using a `for` loop:\n\n```rust\n# fn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(\"Blue\"), 10);\n    scores.insert(String::from(\"Yellow\"), 50);\n\n    for (key, value) in &scores {\n        println!(\"{}: {}\", key, value);\n    }\n# }\n```\n\nThis code will print each pair in an arbitrary order:\n\n```text\nYellow: 50\nBlue: 10\n```\n\n### Updating a Hash Map\n\nAlthough the number of keys and values is growable, each key can only have one\nvalue associated with it at a time. When you want to change the data in a hash\nmap, you have to decide how to handle the case when a key already has a value\nassigned. You could replace the old value with the new value, completely\ndisregarding the old value. You could keep the old value and ignore the new\nvalue, only adding the new value if the key *doesn’t* already have a value. Or\nyou could combine the old value and the new value. Let’s look at how to do each\nof these!\n\n#### Overwriting a Value\n\nIf we insert a key and a value into a hash map and then insert that same key\nwith a different value, the value associated with that key will be replaced.\nEven though the code in Listing 8-24 calls `insert` twice, the hash map will\nonly contain one key/value pair because we’re inserting the value for the Blue\nteam’s key both times.\n\n```rust\n# fn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(\"Blue\"), 10);\n    scores.insert(String::from(\"Blue\"), 25);\n\n    println!(\"{:?}\", scores);\n# }\n```\n\n<span class=\"caption\">Listing 8-24: Replacing a value stored with a particular\nkey</span>\n\nThis code will print `{\"Blue\": 25}`. The original value of `10` has been\noverwritten.\n\n#### Only Inserting a Value If the Key Has No Value\n\nIt’s common to check whether a particular key has a value and, if it doesn’t,\ninsert a value for it. Hash maps have a special API for this called `entry`\nthat takes the key you want to check as a parameter. The return value of the\n`entry` method is an enum called `Entry` that represents a value that might or\nmight not exist. Let’s say we want to check whether the key for the Yellow team\nhas a value associated with it. If it doesn’t, we want to insert the value 50,\nand the same for the Blue team. Using the `entry` API, the code looks like\nListing 8-25.\n\n```rust\n# fn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n    scores.insert(String::from(\"Blue\"), 10);\n\n    scores.entry(String::from(\"Yellow\")).or_insert(50);\n    scores.entry(String::from(\"Blue\")).or_insert(50);\n\n    println!(\"{:?}\", scores);\n# }\n```\n\n<span class=\"caption\">Listing 8-25: Using the `entry` method to only insert if\nthe key does not already have a value</span>\n\nThe `or_insert` method on `Entry` is defined to return a mutable reference to\nthe value for the corresponding `Entry` key if that key exists, and if not,\ninserts the parameter as the new value for this key and returns a mutable\nreference to the new value. This technique is much cleaner than writing the\nlogic ourselves and, in addition, plays more nicely with the borrow checker.\n\nRunning the code in Listing 8-25 will print `{\"Yellow\": 50, \"Blue\": 10}`. The\nfirst call to `entry` will insert the key for the Yellow team with the value\n50 because the Yellow team doesn’t have a value already. The second call to\n`entry` will not change the hash map because the Blue team already has the\nvalue 10.\n\n#### Updating a Value Based on the Old Value\n\nAnother common use case for hash maps is to look up a key’s value and then\nupdate it based on the old value. For instance, Listing 8-26 shows code that\ncounts how many times each word appears in some text. We use a hash map with\nthe words as keys and increment the value to keep track of how many times we’ve\nseen that word. If it’s the first time we’ve seen a word, we’ll first insert\nthe value 0.\n\n```rust\n# fn main() {\n    use std::collections::HashMap;\n\n    let text = \"hello world wonderful world\";\n\n    let mut map = HashMap::new();\n\n    for word in text.split_whitespace() {\n        let count = map.entry(word).or_insert(0);\n        *count += 1;\n    }\n\n    println!(\"{:?}\", map);\n# }\n```\n\n<span class=\"caption\">Listing 8-26: Counting occurrences of words using a hash\nmap that stores words and counts</span>\n\nThis code will print `{\"world\": 2, \"hello\": 1, \"wonderful\": 1}`. The\n`or_insert` method actually returns a mutable reference (`&mut V`) to the value\nfor this key. Here we store that mutable reference in the `count` variable, so\nin order to assign to that value, we must first dereference `count` using the\nasterisk (`*`). The mutable reference goes out of scope at the end of the `for`\nloop, so all of these changes are safe and allowed by the borrowing rules.\n\n### Hashing Functions\n\nBy default, `HashMap` uses a “cryptographically strong”[^siphash] hashing\nfunction that can provide resistance to Denial of Service (DoS) attacks. This\nis not the fastest hashing algorithm available, but the trade-off for better\nsecurity that comes with the drop in performance is worth it. If you profile\nyour code and find that the default hash function is too slow for your\npurposes, you can switch to another function by specifying a different\n*hasher*. A hasher is a type that implements the `BuildHasher` trait. We’ll\ntalk about traits and how to implement them in Chapter 10. You don’t\nnecessarily have to implement your own hasher from scratch;\n[crates.io](https://crates.io/) has libraries shared by other Rust users that\nprovide hashers implementing many common hashing algorithms.\n\n[^siphash]: [https://www.131002.net/siphash/siphash.pdf](https://www.131002.net/siphash/siphash.pdf)\n\n## Summary\n\nVectors, strings, and hash maps will provide a large amount of functionality\nnecessary in programs when you need to store, access, and modify data. Here are\nsome exercises you should now be equipped to solve:\n\n* Given a list of integers, use a vector and return the mean (the average\n  value), median (when sorted, the value in the middle position), and mode (the\n  value that occurs most often; a hash map will be helpful here) of the list.\n* Convert strings to pig latin. The first consonant of each word is moved to\n  the end of the word and “ay” is added, so “first” becomes “irst-fay.” Words\n  that start with a vowel have “hay” added to the end instead (“apple” becomes\n  “apple-hay”). Keep in mind the details about UTF-8 encoding!\n* Using a hash map and vectors, create a text interface to allow a user to add\n  employee names to a department in a company. For example, “Add Sally to\n  Engineering” or “Add Amir to Sales.” Then let the user retrieve a list of all\n  people in a department or all people in the company by department, sorted\n  alphabetically.\n\nThe standard library API documentation describes methods that vectors, strings,\nand hash maps have that will be helpful for these exercises!\n\nWe’re getting into more complex programs in which operations can fail, so, it’s\na perfect time to discuss error handling. We’ll do that next!\n\n[iterators]: ch13-02-iterators.html\n[validating-references-with-lifetimes]:\nch10-03-lifetime-syntax.html#validating-references-with-lifetimes\n", number: Some(SectionNumber([8, 3])), sub_items: [], path: "ch08-03-hash-maps.md", parent_names: ["Common Collections"] })], path: "ch08-00-common-collections.md", parent_names: [] }), Chapter(Chapter { name: "Error Handling", content: "# Error Handling\n\nRust’s commitment to reliability extends to error handling. Errors are a fact\nof life in software, so Rust has a number of features for handling situations\nin which something goes wrong. In many cases, Rust requires you to acknowledge\nthe possibility of an error and take some action before your code will compile.\nThis requirement makes your program more robust by ensuring that you’ll\ndiscover errors and handle them appropriately before you’ve deployed your code\nto production!\n\nRust groups errors into two major categories: *recoverable* and *unrecoverable*\nerrors. For a recoverable error, such as a file not found error, it’s\nreasonable to report the problem to the user and retry the operation.\nUnrecoverable errors are always symptoms of bugs, like trying to access a\nlocation beyond the end of an array.\n\nMost languages don’t distinguish between these two kinds of errors and handle\nboth in the same way, using mechanisms such as exceptions. Rust doesn’t have\nexceptions. Instead, it has the type `Result<T, E>` for recoverable errors and\nthe `panic!` macro that stops execution when the program encounters an\nunrecoverable error. This chapter covers calling `panic!` first and then talks\nabout returning `Result<T, E>` values. Additionally, we’ll explore\nconsiderations when deciding whether to try to recover from an error or to stop\nexecution.\n", number: Some(SectionNumber([9])), sub_items: [Chapter(Chapter { name: "Unrecoverable Errors with panic!", content: "## Unrecoverable Errors with `panic!`\n\nSometimes, bad things happen in your code, and there’s nothing you can do about\nit. In these cases, Rust has the `panic!` macro. When the `panic!` macro\nexecutes, your program will print a failure message, unwind and clean up the\nstack, and then quit. This most commonly occurs when a bug of some kind has\nbeen detected and it’s not clear to the programmer how to handle the error.\n\n> ### Unwinding the Stack or Aborting in Response to a Panic\n>\n> By default, when a panic occurs, the program starts *unwinding*, which\n> means Rust walks back up the stack and cleans up the data from each function\n> it encounters. But this walking back and cleanup is a lot of work. The\n> alternative is to immediately *abort*, which ends the program without\n> cleaning up. Memory that the program was using will then need to be cleaned\n> up by the operating system. If in your project you need to make the resulting\n> binary as small as possible, you can switch from unwinding to aborting upon a\n> panic by adding `panic = \'abort\'` to the appropriate `[profile]` sections in\n> your *Cargo.toml* file. For example, if you want to abort on panic in release\n> mode, add this:\n>\n> ```toml\n> [profile.release]\n> panic = \'abort\'\n> ```\n\nLet’s try calling `panic!` in a simple program:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic,panics\nfn main() {\n    panic!(\"crash and burn\");\n}\n```\n\nWhen you run the program, you’ll see something like this:\n\n```text\n$ cargo run\n   Compiling panic v0.1.0 (file:///projects/panic)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.25s\n     Running `target/debug/panic`\nthread \'main\' panicked at \'crash and burn\', src/main.rs:2:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n```\n\nThe call to `panic!` causes the error message contained in the last two lines.\nThe first line shows our panic message and the place in our source code where\nthe panic occurred: *src/main.rs:2:5* indicates that it’s the second line,\nfifth character of our *src/main.rs* file.\n\nIn this case, the line indicated is part of our code, and if we go to that\nline, we see the `panic!` macro call. In other cases, the `panic!` call might\nbe in code that our code calls, and the filename and line number reported by\nthe error message will be someone else’s code where the `panic!` macro is\ncalled, not the line of our code that eventually led to the `panic!` call. We\ncan use the backtrace of the functions the `panic!` call came from to figure\nout the part of our code that is causing the problem. We’ll discuss what a\nbacktrace is in more detail next.\n\n### Using a `panic!` Backtrace\n\nLet’s look at another example to see what it’s like when a `panic!` call comes\nfrom a library because of a bug in our code instead of from our code calling\nthe macro directly. Listing 9-1 has some code that attempts to access an\nelement by index in a vector.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic,panics\nfn main() {\n    let v = vec![1, 2, 3];\n\n    v[99];\n}\n```\n\n<span class=\"caption\">Listing 9-1: Attempting to access an element beyond the\nend of a vector, which will cause a call to `panic!`</span>\n\nHere, we’re attempting to access the 100th element of our vector (which is at\nindex 99 because indexing starts at zero), but it has only 3 elements. In this\nsituation, Rust will panic. Using `[]` is supposed to return an element, but if\nyou pass an invalid index, there’s no element that Rust could return here that\nwould be correct.\n\nIn C, attempting to read beyond the end of a data structure is undefined\nbehavior. You might get whatever is at the location in memory that would\ncorrespond to that element in the data structure, even though the memory\ndoesn’t belong to that structure. This is called a *buffer overread* and can\nlead to security vulnerabilities if an attacker is able to manipulate the index\nin such a way as to read data they shouldn’t be allowed to that is stored after\nthe data structure.\n\nTo protect your program from this sort of vulnerability, if you try to read an\nelement at an index that doesn’t exist, Rust will stop execution and refuse to\ncontinue. Let’s try it and see:\n\n```text\n$ cargo run\n   Compiling panic v0.1.0 (file:///projects/panic)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.27s\n     Running `target/debug/panic`\nthread \'main\' panicked at \'index out of bounds: the len is 3 but the index is 99\', /rustc/5e1a799842ba6ed4a57e91f7ab9435947482f7d8/src/libcore/slice/mod.rs:2806:10\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n```\n\nThis error points at a file we didn’t write, *libcore/slice/mod.rs*. That’s the\nimplementation of `slice` in the Rust source code. The code that gets run when\nwe use `[]` on our vector `v` is in *libcore/slice/mod.rs*, and that is where\nthe `panic!` is actually happening.\n\nThe next note line tells us that we can set the `RUST_BACKTRACE` environment\nvariable to get a backtrace of exactly what happened to cause the error. A\n*backtrace* is a list of all the functions that have been called to get to this\npoint. Backtraces in Rust work as they do in other languages: the key to\nreading the backtrace is to start from the top and read until you see files you\nwrote. That’s the spot where the problem originated. The lines above the lines\nmentioning your files are code that your code called; the lines below are code\nthat called your code. These lines might include core Rust code, standard\nlibrary code, or crates that you’re using. Let’s try getting a backtrace by\nsetting the `RUST_BACKTRACE` environment variable to any value except 0.\nListing 9-2 shows output similar to what you’ll see.\n\n<!-- manual-regeneration\ncd listings/ch09-error-handling/listing-09-01\nRUST_BACKTRACE=1 cargo run\ncopy the backtrace output below\ncheck the backtrace number mentioned in the text below the listing\n-->\n\n```text\n$ RUST_BACKTRACE=1 cargo run\nthread \'main\' panicked at \'index out of bounds: the len is 3 but the index is 99\', /rustc/5e1a799842ba6ed4a57e91f7ab9435947482f7d8/src/libcore/slice/mod.rs:2806:10\nstack backtrace:\n   0: backtrace::backtrace::libunwind::trace\n             at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88\n   1: backtrace::backtrace::trace_unsynchronized\n             at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66\n   2: std::sys_common::backtrace::_print_fmt\n             at src/libstd/sys_common/backtrace.rs:84\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\n             at src/libstd/sys_common/backtrace.rs:61\n   4: core::fmt::ArgumentV1::show_usize\n   5: std::io::Write::write_fmt\n             at src/libstd/io/mod.rs:1426\n   6: std::sys_common::backtrace::_print\n             at src/libstd/sys_common/backtrace.rs:65\n   7: std::sys_common::backtrace::print\n             at src/libstd/sys_common/backtrace.rs:50\n   8: std::panicking::default_hook::{{closure}}\n             at src/libstd/panicking.rs:193\n   9: std::panicking::default_hook\n             at src/libstd/panicking.rs:210\n  10: std::panicking::rust_panic_with_hook\n             at src/libstd/panicking.rs:471\n  11: rust_begin_unwind\n             at src/libstd/panicking.rs:375\n  12: core::panicking::panic_fmt\n             at src/libcore/panicking.rs:84\n  13: core::panicking::panic_bounds_check\n             at src/libcore/panicking.rs:62\n  14: <usize as core::slice::SliceIndex<[T]>>::index\n             at /rustc/5e1a799842ba6ed4a57e91f7ab9435947482f7d8/src/libcore/slice/mod.rs:2806\n  15: core::slice::<impl core::ops::index::Index<I> for [T]>::index\n             at /rustc/5e1a799842ba6ed4a57e91f7ab9435947482f7d8/src/libcore/slice/mod.rs:2657\n  16: <alloc::vec::Vec<T> as core::ops::index::Index<I>>::index\n             at /rustc/5e1a799842ba6ed4a57e91f7ab9435947482f7d8/src/liballoc/vec.rs:1871\n  17: panic::main\n             at src/main.rs:4\n  18: std::rt::lang_start::{{closure}}\n             at /rustc/5e1a799842ba6ed4a57e91f7ab9435947482f7d8/src/libstd/rt.rs:67\n  19: std::rt::lang_start_internal::{{closure}}\n             at src/libstd/rt.rs:52\n  20: std::panicking::try::do_call\n             at src/libstd/panicking.rs:292\n  21: __rust_maybe_catch_panic\n             at src/libpanic_unwind/lib.rs:78\n  22: std::panicking::try\n             at src/libstd/panicking.rs:270\n  23: std::panic::catch_unwind\n             at src/libstd/panic.rs:394\n  24: std::rt::lang_start_internal\n             at src/libstd/rt.rs:51\n  25: std::rt::lang_start\n             at /rustc/5e1a799842ba6ed4a57e91f7ab9435947482f7d8/src/libstd/rt.rs:67\n  26: panic::main\n```\n\n<span class=\"caption\">Listing 9-2: The backtrace generated by a call to\n`panic!` displayed when the environment variable `RUST_BACKTRACE` is set</span>\n\nThat’s a lot of output! The exact output you see might be different depending\non your operating system and Rust version. In order to get backtraces with this\ninformation, debug symbols must be enabled. Debug symbols are enabled by\ndefault when using `cargo build` or `cargo run` without the `--release` flag,\nas we have here.\n\nIn the output in Listing 9-2, line 17 of the backtrace points to the line in\nour project that’s causing the problem: line 4 of *src/main.rs*. If we don’t\nwant our program to panic, the location pointed to by the first line mentioning\na file we wrote is where we should start investigating. In Listing 9-1, where\nwe deliberately wrote code that would panic in order to demonstrate how to use\nbacktraces, the way to fix the panic is to not request an element at index 99\nfrom a vector that only contains 3 items. When your code panics in the future,\nyou’ll need to figure out what action the code is taking with what values to\ncause the panic and what the code should do instead.\n\nWe’ll come back to `panic!` and when we should and should not use `panic!` to\nhandle error conditions in the [“To `panic!` or Not to\n`panic!`”][to-panic-or-not-to-panic]<!-- ignore --> section later in this\nchapter. Next, we’ll look at how to recover from an error using `Result`.\n\n[to-panic-or-not-to-panic]:\nch09-03-to-panic-or-not-to-panic.html#to-panic-or-not-to-panic\n", number: Some(SectionNumber([9, 1])), sub_items: [], path: "ch09-01-unrecoverable-errors-with-panic.md", parent_names: ["Error Handling"] }), Chapter(Chapter { name: "Recoverable Errors with Result", content: "## Recoverable Errors with `Result`\n\nMost errors aren’t serious enough to require the program to stop entirely.\nSometimes, when a function fails, it’s for a reason that you can easily\ninterpret and respond to. For example, if you try to open a file and that\noperation fails because the file doesn’t exist, you might want to create the\nfile instead of terminating the process.\n\nRecall from [“Handling Potential Failure with the `Result`\nType”][handle_failure]<!-- ignore --> in Chapter 2 that the `Result` enum is\ndefined as having two variants, `Ok` and `Err`, as follows:\n\n[handle_failure]: ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-the-result-type\n\n```rust\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n```\n\nThe `T` and `E` are generic type parameters: we’ll discuss generics in more\ndetail in Chapter 10. What you need to know right now is that `T` represents\nthe type of the value that will be returned in a success case within the `Ok`\nvariant, and `E` represents the type of the error that will be returned in a\nfailure case within the `Err` variant. Because `Result` has these generic type\nparameters, we can use the `Result` type and the functions that the standard\nlibrary has defined on it in many different situations where the successful\nvalue and error value we want to return may differ.\n\nLet’s call a function that returns a `Result` value because the function could\nfail. In Listing 9-3 we try to open a file.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::fs::File;\n\nfn main() {\n    let f = File::open(\"hello.txt\");\n}\n```\n\n<span class=\"caption\">Listing 9-3: Opening a file</span>\n\nHow do we know `File::open` returns a `Result`? We could look at the [standard\nlibrary API documentation](../std/index.html)<!-- ignore -->, or we could ask\nthe compiler! If we give `f` a type annotation that we know is *not* the return\ntype of the function and then try to compile the code, the compiler will tell\nus that the types don’t match. The error message will then tell us what the\ntype of `f` *is*. Let’s try it! We know that the return type of `File::open`\nisn’t of type `u32`, so let’s change the `let f` statement to this:\n\n```rust,ignore,does_not_compile\n# use std::fs::File;\n# \n# fn main() {\n    let f: u32 = File::open(\"hello.txt\");\n# }\n```\n\nAttempting to compile now gives us the following output:\n\n```text\n$ cargo run\n   Compiling error-handling v0.1.0 (file:///projects/error-handling)\nerror[E0308]: mismatched types\n --> src/main.rs:4:18\n  |\n4 |     let f: u32 = File::open(\"hello.txt\");\n  |            ---   ^^^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found enum `std::result::Result`\n  |            |\n  |            expected due to this\n  |\n  = note: expected type `u32`\n             found enum `std::result::Result<std::fs::File, std::io::Error>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `error-handling`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThis tells us the return type of the `File::open` function is a `Result<T, E>`.\nThe generic parameter `T` has been filled in here with the type of the success\nvalue, `std::fs::File`, which is a file handle. The type of `E` used in the\nerror value is `std::io::Error`.\n\nThis return type means the call to `File::open` might succeed and return a file\nhandle that we can read from or write to. The function call also might fail:\nfor example, the file might not exist, or we might not have permission to\naccess the file. The `File::open` function needs to have a way to tell us\nwhether it succeeded or failed and at the same time give us either the file\nhandle or error information. This information is exactly what the `Result` enum\nconveys.\n\nIn the case where `File::open` succeeds, the value in the variable `f` will be\nan instance of `Ok` that contains a file handle. In the case where it fails,\nthe value in `f` will be an instance of `Err` that contains more information\nabout the kind of error that happened.\n\nWe need to add to the code in Listing 9-3 to take different actions depending\non the value `File::open` returns. Listing 9-4 shows one way to handle the\n`Result` using a basic tool, the `match` expression that we discussed in\nChapter 6.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic\nuse std::fs::File;\n\nfn main() {\n    let f = File::open(\"hello.txt\");\n\n    let f = match f {\n        Ok(file) => file,\n        Err(error) => panic!(\"Problem opening the file: {:?}\", error),\n    };\n}\n```\n\n<span class=\"caption\">Listing 9-4: Using a `match` expression to handle the\n`Result` variants that might be returned</span>\n\nNote that, like the `Option` enum, the `Result` enum and its variants have been\nbrought into scope by the prelude, so we don’t need to specify `Result::`\nbefore the `Ok` and `Err` variants in the `match` arms.\n\nHere we tell Rust that when the result is `Ok`, return the inner `file` value\nout of the `Ok` variant, and we then assign that file handle value to the\nvariable `f`. After the `match`, we can use the file handle for reading or\nwriting.\n\nThe other arm of the `match` handles the case where we get an `Err` value from\n`File::open`. In this example, we’ve chosen to call the `panic!` macro. If\nthere’s no file named *hello.txt* in our current directory and we run this\ncode, we’ll see the following output from the `panic!` macro:\n\n```text\n$ cargo run\n   Compiling error-handling v0.1.0 (file:///projects/error-handling)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.73s\n     Running `target/debug/error-handling`\nthread \'main\' panicked at \'Problem opening the file: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\', src/main.rs:8:23\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n```\n\nAs usual, this output tells us exactly what has gone wrong.\n\n### Matching on Different Errors\n\nThe code in Listing 9-4 will `panic!` no matter why `File::open` failed. What\nwe want to do instead is take different actions for different failure reasons:\nif `File::open` failed because the file doesn’t exist, we want to create the\nfile and return the handle to the new file. If `File::open` failed for any\nother reason—for example, because we didn’t have permission to open the file—we\nstill want the code to `panic!` in the same way as it did in Listing 9-4. Look\nat Listing 9-5, which adds an inner `match` expression.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- ignore this test because otherwise it creates hello.txt which causes other\ntests to fail lol -->\n\n```rust,ignore\nuse std::fs::File;\nuse std::io::ErrorKind;\n\nfn main() {\n    let f = File::open(\"hello.txt\");\n\n    let f = match f {\n        Ok(file) => file,\n        Err(error) => match error.kind() {\n            ErrorKind::NotFound => match File::create(\"hello.txt\") {\n                Ok(fc) => fc,\n                Err(e) => panic!(\"Problem creating the file: {:?}\", e),\n            },\n            other_error => {\n                panic!(\"Problem opening the file: {:?}\", other_error)\n            }\n        },\n    };\n}\n```\n\n<span class=\"caption\">Listing 9-5: Handling different kinds of errors in\ndifferent ways</span>\n\nThe type of the value that `File::open` returns inside the `Err` variant is\n`io::Error`, which is a struct provided by the standard library. This struct\nhas a method `kind` that we can call to get an `io::ErrorKind` value. The enum\n`io::ErrorKind` is provided by the standard library and has variants\nrepresenting the different kinds of errors that might result from an `io`\noperation. The variant we want to use is `ErrorKind::NotFound`, which indicates\nthe file we’re trying to open doesn’t exist yet. So we match on `f`, but we\nalso have an inner match on `error.kind()`.\n\nThe condition we want to check in the inner match is whether the value returned\nby `error.kind()` is the `NotFound` variant of the `ErrorKind` enum. If it is,\nwe try to create the file with `File::create`. However, because `File::create`\ncould also fail, we need a second arm in the inner `match` expression. When the\nfile can’t be created, a different error message is printed. The second arm of\nthe outer `match` stays the same, so the program panics on any error besides\nthe missing file error.\n\nThat’s a lot of `match`! The `match` expression is very useful but also very\nmuch a primitive. In Chapter 13, you’ll learn about closures; the `Result<T,\nE>` type has many methods that accept a closure and are implemented using\n`match` expressions. Using those methods will make your code more concise. A\nmore seasoned Rustacean might write this code instead of Listing 9-5:\n\n```rust,ignore\nuse std::fs::File;\nuse std::io::ErrorKind;\n\nfn main() {\n    let f = File::open(\"hello.txt\").unwrap_or_else(|error| {\n        if error.kind() == ErrorKind::NotFound {\n            File::create(\"hello.txt\").unwrap_or_else(|error| {\n                panic!(\"Problem creating the file: {:?}\", error);\n            })\n        } else {\n            panic!(\"Problem opening the file: {:?}\", error);\n        }\n    });\n}\n```\n\nAlthough this code has the same behavior as Listing 9-5, it doesn’t contain any\n`match` expressions and is cleaner to read. Come back to this example after\nyou’ve read Chapter 13, and look up the `unwrap_or_else` method in the standard\nlibrary documentation. Many more of these methods can clean up huge nested\n`match` expressions when you’re dealing with errors.\n\n### Shortcuts for Panic on Error: `unwrap` and `expect`\n\nUsing `match` works well enough, but it can be a bit verbose and doesn’t always\ncommunicate intent well. The `Result<T, E>` type has many helper methods\ndefined on it to do various tasks. One of those methods, called `unwrap`, is a\nshortcut method that is implemented just like the `match` expression we wrote in\nListing 9-4. If the `Result` value is the `Ok` variant, `unwrap` will return\nthe value inside the `Ok`. If the `Result` is the `Err` variant, `unwrap` will\ncall the `panic!` macro for us. Here is an example of `unwrap` in action:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic\nuse std::fs::File;\n\nfn main() {\n    let f = File::open(\"hello.txt\").unwrap();\n}\n```\n\nIf we run this code without a *hello.txt* file, we’ll see an error message from\nthe `panic!` call that the `unwrap` method makes:\n\n```text\nthread \'main\' panicked at \'called `Result::unwrap()` on an `Err` value: Error {\nrepr: Os { code: 2, message: \"No such file or directory\" } }\',\nsrc/libcore/result.rs:906:4\n```\n\nAnother method, `expect`, which is similar to `unwrap`, lets us also choose the\n`panic!` error message. Using `expect` instead of `unwrap` and providing good\nerror messages can convey your intent and make tracking down the source of a\npanic easier. The syntax of `expect` looks like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic\nuse std::fs::File;\n\nfn main() {\n    let f = File::open(\"hello.txt\").expect(\"Failed to open hello.txt\");\n}\n```\n\nWe use `expect` in the same way as `unwrap`: to return the file handle or call\nthe `panic!` macro. The error message used by `expect` in its call to `panic!`\nwill be the parameter that we pass to `expect`, rather than the default\n`panic!` message that `unwrap` uses. Here’s what it looks like:\n\n```text\nthread \'main\' panicked at \'Failed to open hello.txt: Error { repr: Os { code:\n2, message: \"No such file or directory\" } }\', src/libcore/result.rs:906:4\n```\n\nBecause this error message starts with the text we specified, `Failed to open\nhello.txt`, it will be easier to find where in the code this error message is\ncoming from. If we use `unwrap` in multiple places, it can take more time to\nfigure out exactly which `unwrap` is causing the panic because all `unwrap`\ncalls that panic print the same message.\n\n### Propagating Errors\n\nWhen you’re writing a function whose implementation calls something that might\nfail, instead of handling the error within this function, you can return the\nerror to the calling code so that it can decide what to do. This is known as\n*propagating* the error and gives more control to the calling code, where there\nmight be more information or logic that dictates how the error should be\nhandled than what you have available in the context of your code.\n\nFor example, Listing 9-6 shows a function that reads a username from a file. If\nthe file doesn’t exist or can’t be read, this function will return those errors\nto the code that called this function.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon\'t want to include it for rustdoc testing purposes. -->\n\n```rust\nuse std::fs::File;\nuse std::io;\nuse std::io::Read;\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    let f = File::open(\"hello.txt\");\n\n    let mut f = match f {\n        Ok(file) => file,\n        Err(e) => return Err(e),\n    };\n\n    let mut s = String::new();\n\n    match f.read_to_string(&mut s) {\n        Ok(_) => Ok(s),\n        Err(e) => Err(e),\n    }\n}\n```\n\n<span class=\"caption\">Listing 9-6: A function that returns errors to the\ncalling code using `match`</span>\n\nThis function can be written in a much shorter way, but we’re going to start by\ndoing a lot of it manually in order to explore error handling; at the end,\nwe’ll show the shorter way. Let’s look at the return type of the function first:\n`Result<String, io::Error>`. This means the function is returning a value of\nthe type `Result<T, E>` where the generic parameter `T` has been filled in\nwith the concrete type `String` and the generic type `E` has been filled in\nwith the concrete type `io::Error`. If this function succeeds without any\nproblems, the code that calls this function will receive an `Ok` value that\nholds a `String`—the username that this function read from the file. If this\nfunction encounters any problems, the code that calls this function will\nreceive an `Err` value that holds an instance of `io::Error` that contains\nmore information about what the problems were. We chose `io::Error` as the\nreturn type of this function because that happens to be the type of the error\nvalue returned from both of the operations we’re calling in this function’s\nbody that might fail: the `File::open` function and the `read_to_string`\nmethod.\n\nThe body of the function starts by calling the `File::open` function. Then we\nhandle the `Result` value returned with a `match` similar to the `match` in\nListing 9-4, only instead of calling `panic!` in the `Err` case, we return\nearly from this function and pass the error value from `File::open` back to the\ncalling code as this function’s error value. If `File::open` succeeds, we store\nthe file handle in the variable `f` and continue.\n\nThen we create a new `String` in variable `s` and call the `read_to_string`\nmethod on the file handle in `f` to read the contents of the file into `s`. The\n`read_to_string` method also returns a `Result` because it might fail, even\nthough `File::open` succeeded. So we need another `match` to handle that\n`Result`: if `read_to_string` succeeds, then our function has succeeded, and we\nreturn the username from the file that’s now in `s` wrapped in an `Ok`. If\n`read_to_string` fails, we return the error value in the same way that we\nreturned the error value in the `match` that handled the return value of\n`File::open`. However, we don’t need to explicitly say `return`, because this\nis the last expression in the function.\n\nThe code that calls this code will then handle getting either an `Ok` value\nthat contains a username or an `Err` value that contains an `io::Error`. We\ndon’t know what the calling code will do with those values. If the calling code\ngets an `Err` value, it could call `panic!` and crash the program, use a\ndefault username, or look up the username from somewhere other than a file, for\nexample. We don’t have enough information on what the calling code is actually\ntrying to do, so we propagate all the success or error information upward for\nit to handle appropriately.\n\nThis pattern of propagating errors is so common in Rust that Rust provides the\nquestion mark operator `?` to make this easier.\n\n#### A Shortcut for Propagating Errors: the `?` Operator\n\nListing 9-7 shows an implementation of `read_username_from_file` that has the\nsame functionality as it had in Listing 9-6, but this implementation uses the\n`?` operator.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon\'t want to include it for rustdoc testing purposes. -->\n\n```rust\nuse std::fs::File;\nuse std::io;\nuse std::io::Read;\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    let mut f = File::open(\"hello.txt\")?;\n    let mut s = String::new();\n    f.read_to_string(&mut s)?;\n    Ok(s)\n}\n```\n\n<span class=\"caption\">Listing 9-7: A function that returns errors to the\ncalling code using the `?` operator</span>\n\nThe `?` placed after a `Result` value is defined to work in almost the same way\nas the `match` expressions we defined to handle the `Result` values in Listing\n9-6. If the value of the `Result` is an `Ok`, the value inside the `Ok` will\nget returned from this expression, and the program will continue. If the value\nis an `Err`, the `Err` will be returned from the whole function as if we had\nused the `return` keyword so the error value gets propagated to the calling\ncode.\n\nThere is a difference between what the `match` expression from Listing 9-6 does\nand what the `?` operator does: error values that have the `?` operator called\non them go through the `from` function, defined in the `From` trait in the\nstandard library, which is used to convert errors from one type into another.\nWhen the `?` operator calls the `from` function, the error type received is\nconverted into the error type defined in the return type of the current\nfunction. This is useful when a function returns one error type to represent all\nthe ways a function might fail, even if parts might fail for many different\nreasons. As long as each error type implements the `from` function to define how\nto convert itself to the returned error type, the `?` operator takes care of the\nconversion automatically.\n\nIn the context of Listing 9-7, the `?` at the end of the `File::open` call will\nreturn the value inside an `Ok` to the variable `f`. If an error occurs, the\n`?` operator will return early out of the whole function and give any `Err`\nvalue to the calling code. The same thing applies to the `?` at the end of the\n`read_to_string` call.\n\nThe `?` operator eliminates a lot of boilerplate and makes this function’s\nimplementation simpler. We could even shorten this code further by chaining\nmethod calls immediately after the `?`, as shown in Listing 9-8.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon\'t want to include it for rustdoc testing purposes. -->\n\n```rust\nuse std::fs::File;\nuse std::io;\nuse std::io::Read;\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    let mut s = String::new();\n\n    File::open(\"hello.txt\")?.read_to_string(&mut s)?;\n\n    Ok(s)\n}\n```\n\n<span class=\"caption\">Listing 9-8: Chaining method calls after the `?`\noperator</span>\n\nWe’ve moved the creation of the new `String` in `s` to the beginning of the\nfunction; that part hasn’t changed. Instead of creating a variable `f`, we’ve\nchained the call to `read_to_string` directly onto the result of\n`File::open(\"hello.txt\")?`. We still have a `?` at the end of the\n`read_to_string` call, and we still return an `Ok` value containing the\nusername in `s` when both `File::open` and `read_to_string` succeed rather than\nreturning errors. The functionality is again the same as in Listing 9-6 and\nListing 9-7; this is just a different, more ergonomic way to write it.\n\nSpeaking of different ways to write this function, Listing 9-9 shows that\nthere’s a way to make this even shorter.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon\'t want to include it for rustdoc testing purposes. -->\n\n```rust\nuse std::fs;\nuse std::io;\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    fs::read_to_string(\"hello.txt\")\n}\n```\n\n<span class=\"caption\">Listing 9-9: Using `fs::read_to_string` instead of\nopening and then reading the file</span>\n\nReading a file into a string is a fairly common operation, so Rust provides the\nconvenient `fs::read_to_string` function that opens the file, creates a new\n`String`, reads the contents of the file, puts the contents into that `String`,\nand returns it. Of course, using `fs::read_to_string` doesn’t give us the\nopportunity to explain all the error handling, so we did it the longer way\nfirst.\n\n#### The `?` Operator Can Be Used in Functions That Return `Result`\n\nThe `?` operator can be used in functions that have a return type of\n`Result`, because it is defined to work in the same way as the `match`\nexpression we defined in Listing 9-6. The part of the `match` that requires a\nreturn type of `Result` is `return Err(e)`, so the return type of the function\ncan be a `Result` to be compatible with this `return`.\n\nLet’s look at what happens if we use the `?` operator in the `main` function,\nwhich you’ll recall has a return type of `()`:\n\n```rust,ignore,does_not_compile\nuse std::fs::File;\n\nfn main() {\n    let f = File::open(\"hello.txt\")?;\n}\n```\n\nWhen we compile this code, we get the following error message:\n\n```text\n$ cargo run\n   Compiling error-handling v0.1.0 (file:///projects/error-handling)\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n --> src/main.rs:4:13\n  |\n3 | / fn main() {\n4 | |     let f = File::open(\"hello.txt\")?;\n  | |             ^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n5 | | }\n  | |_- this function should return `Result` or `Option` to accept `?`\n  |\n  = help: the trait `std::ops::Try` is not implemented for `()`\n  = note: required by `std::ops::Try::from_error`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `error-handling`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThis error points out that we’re only allowed to use the `?` operator in a\nfunction that returns `Result` or `Option` or another type that implements\n`std::ops::Try`. When you’re writing code in a function\nthat doesn’t return one of these types, and you want to use `?` when you call other\nfunctions that return `Result<T, E>`, you have two choices to fix this problem.\nOne technique is to change the return type of your function to be `Result<T,\nE>` if you have no restrictions preventing that. The other technique is to use\na `match` or one of the `Result<T, E>` methods to handle the `Result<T, E>` in\nwhatever way is appropriate.\n\nThe `main` function is special, and there are restrictions on what its return\ntype must be. One valid return type for main is `()`, and conveniently, another\nvalid return type is `Result<T, E>`, as shown here:\n\n```rust,ignore\nuse std::error::Error;\nuse std::fs::File;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let f = File::open(\"hello.txt\")?;\n\n    Ok(())\n}\n```\n\nThe `Box<dyn Error>` type is called a trait object, which we’ll talk about in\nthe [“Using Trait Objects that Allow for Values of Different\nTypes”][trait-objects]<!-- ignore --> section in Chapter 17. For now, you can\nread `Box<dyn Error>` to mean “any kind of error.” Using `?` in a `main`\nfunction with this return type is allowed.\n\nNow that we’ve discussed the details of calling `panic!` or returning `Result`,\nlet’s return to the topic of how to decide which is appropriate to use in which\ncases.\n\n[trait-objects]: ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n", number: Some(SectionNumber([9, 2])), sub_items: [], path: "ch09-02-recoverable-errors-with-result.md", parent_names: ["Error Handling"] }), Chapter(Chapter { name: "To panic! or Not To panic!", content: "## To `panic!` or Not to `panic!`\n\nSo how do you decide when you should call `panic!` and when you should return\n`Result`? When code panics, there’s no way to recover. You could call `panic!`\nfor any error situation, whether there’s a possible way to recover or not, but\nthen you’re making the decision on behalf of the code calling your code that a\nsituation is unrecoverable. When you choose to return a `Result` value, you\ngive the calling code options rather than making the decision for it. The\ncalling code could choose to attempt to recover in a way that’s appropriate for\nits situation, or it could decide that an `Err` value in this case is\nunrecoverable, so it can call `panic!` and turn your recoverable error into an\nunrecoverable one. Therefore, returning `Result` is a good default choice when\nyou’re defining a function that might fail.\n\nIn rare situations, it’s more appropriate to write code that panics instead of\nreturning a `Result`. Let’s explore why it’s appropriate to panic in examples,\nprototype code, and tests. Then we’ll discuss situations in which the compiler\ncan’t tell that failure is impossible, but you as a human can. The chapter will\nconclude with some general guidelines on how to decide whether to panic in\nlibrary code.\n\n### Examples, Prototype Code, and Tests\n\nWhen you’re writing an example to illustrate some concept, having robust\nerror-handling code in the example as well can make the example less clear. In\nexamples, it’s understood that a call to a method like `unwrap` that could\npanic is meant as a placeholder for the way you’d want your application to\nhandle errors, which can differ based on what the rest of your code is doing.\n\nSimilarly, the `unwrap` and `expect` methods are very handy when prototyping,\nbefore you’re ready to decide how to handle errors. They leave clear markers in\nyour code for when you’re ready to make your program more robust.\n\nIf a method call fails in a test, you’d want the whole test to fail, even if\nthat method isn’t the functionality under test. Because `panic!` is how a test\nis marked as a failure, calling `unwrap` or `expect` is exactly what should\nhappen.\n\n### Cases in Which You Have More Information Than the Compiler\n\nIt would also be appropriate to call `unwrap` when you have some other logic\nthat ensures the `Result` will have an `Ok` value, but the logic isn’t\nsomething the compiler understands. You’ll still have a `Result` value that you\nneed to handle: whatever operation you’re calling still has the possibility of\nfailing in general, even though it’s logically impossible in your particular\nsituation. If you can ensure by manually inspecting the code that you’ll never\nhave an `Err` variant, it’s perfectly acceptable to call `unwrap`. Here’s an\nexample:\n\n```rust\n# fn main() {\n    use std::net::IpAddr;\n\n    let home: IpAddr = \"127.0.0.1\".parse().unwrap();\n# }\n```\n\nWe’re creating an `IpAddr` instance by parsing a hardcoded string. We can see\nthat `127.0.0.1` is a valid IP address, so it’s acceptable to use `unwrap`\nhere. However, having a hardcoded, valid string doesn’t change the return type\nof the `parse` method: we still get a `Result` value, and the compiler will\nstill make us handle the `Result` as if the `Err` variant is a possibility\nbecause the compiler isn’t smart enough to see that this string is always a\nvalid IP address. If the IP address string came from a user rather than being\nhardcoded into the program and therefore *did* have a possibility of failure,\nwe’d definitely want to handle the `Result` in a more robust way instead.\n\n### Guidelines for Error Handling\n\nIt’s advisable to have your code panic when it’s possible that your code\ncould end up in a bad state. In this context, a *bad state* is when some\nassumption, guarantee, contract, or invariant has been broken, such as when\ninvalid values, contradictory values, or missing values are passed to your\ncode—plus one or more of the following:\n\n* The bad state is not something that’s *expected* to happen occasionally.\n* Your code after this point needs to rely on not being in this bad state.\n* There’s not a good way to encode this information in the types you use.\n\nIf someone calls your code and passes in values that don’t make sense, the best\nchoice might be to call `panic!` and alert the person using your library to the\nbug in their code so they can fix it during development. Similarly, `panic!` is\noften appropriate if you’re calling external code that is out of your control\nand it returns an invalid state that you have no way of fixing.\n\nHowever, when failure is expected, it’s more appropriate to return a `Result`\nthan to make a `panic!` call. Examples include a parser being given malformed\ndata or an HTTP request returning a status that indicates you have hit a rate\nlimit. In these cases, returning a `Result` indicates that failure is an\nexpected possibility that the calling code must decide how to handle.\n\nWhen your code performs operations on values, your code should verify the\nvalues are valid first and panic if the values aren’t valid. This is mostly for\nsafety reasons: attempting to operate on invalid data can expose your code to\nvulnerabilities. This is the main reason the standard library will call\n`panic!` if you attempt an out-of-bounds memory access: trying to access memory\nthat doesn’t belong to the current data structure is a common security problem.\nFunctions often have *contracts*: their behavior is only guaranteed if the\ninputs meet particular requirements. Panicking when the contract is violated\nmakes sense because a contract violation always indicates a caller-side bug and\nit’s not a kind of error you want the calling code to have to explicitly\nhandle. In fact, there’s no reasonable way for calling code to recover; the\ncalling *programmers* need to fix the code. Contracts for a function,\nespecially when a violation will cause a panic, should be explained in the API\ndocumentation for the function.\n\nHowever, having lots of error checks in all of your functions would be verbose\nand annoying. Fortunately, you can use Rust’s type system (and thus the type\nchecking the compiler does) to do many of the checks for you. If your function\nhas a particular type as a parameter, you can proceed with your code’s logic\nknowing that the compiler has already ensured you have a valid value. For\nexample, if you have a type rather than an `Option`, your program expects to\nhave *something* rather than *nothing*. Your code then doesn’t have to handle\ntwo cases for the `Some` and `None` variants: it will only have one case for\ndefinitely having a value. Code trying to pass nothing to your function won’t\neven compile, so your function doesn’t have to check for that case at runtime.\nAnother example is using an unsigned integer type such as `u32`, which ensures\nthe parameter is never negative.\n\n### Creating Custom Types for Validation\n\nLet’s take the idea of using Rust’s type system to ensure we have a valid value\none step further and look at creating a custom type for validation. Recall the\nguessing game in Chapter 2 in which our code asked the user to guess a number\nbetween 1 and 100. We never validated that the user’s guess was between those\nnumbers before checking it against our secret number; we only validated that\nthe guess was positive. In this case, the consequences were not very dire: our\noutput of “Too high” or “Too low” would still be correct. But it would be a\nuseful enhancement to guide the user toward valid guesses and have different\nbehavior when a user guesses a number that’s out of range versus when a user\ntypes, for example, letters instead.\n\nOne way to do this would be to parse the guess as an `i32` instead of only a\n`u32` to allow potentially negative numbers, and then add a check for the\nnumber being in range, like so:\n\n```rust,ignore\n# use rand::Rng;\n# use std::cmp::Ordering;\n# use std::io;\n# \n# fn main() {\n#     println!(\"Guess the number!\");\n# \n#     let secret_number = rand::thread_rng().gen_range(1, 101);\n# \n    loop {\n        // --snip--\n\n#         println!(\"Please input your guess.\");\n# \n#         let mut guess = String::new();\n# \n#         io::stdin()\n#             .read_line(&mut guess)\n#             .expect(\"Failed to read line\");\n# \n        let guess: i32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        if guess < 1 || guess > 100 {\n            println!(\"The secret number will be between 1 and 100.\");\n            continue;\n        }\n\n        match guess.cmp(&secret_number) {\n            // --snip--\n#             Ordering::Less => println!(\"Too small!\"),\n#             Ordering::Greater => println!(\"Too big!\"),\n#             Ordering::Equal => {\n#                 println!(\"You win!\");\n#                 break;\n#             }\n#         }\n    }\n# }\n```\n\nThe `if` expression checks whether our value is out of range, tells the user\nabout the problem, and calls `continue` to start the next iteration of the loop\nand ask for another guess. After the `if` expression, we can proceed with the\ncomparisons between `guess` and the secret number knowing that `guess` is\nbetween 1 and 100.\n\nHowever, this is not an ideal solution: if it was absolutely critical that the\nprogram only operated on values between 1 and 100, and it had many functions\nwith this requirement, having a check like this in every function would be\ntedious (and might impact performance).\n\nInstead, we can make a new type and put the validations in a function to create\nan instance of the type rather than repeating the validations everywhere. That\nway, it’s safe for functions to use the new type in their signatures and\nconfidently use the values they receive. Listing 9-10 shows one way to define a\n`Guess` type that will only create an instance of `Guess` if the `new` function\nreceives a value between 1 and 100.\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile requires the `rand` crate. We do want to include it for reader\nexperimentation purposes, but don\'t want to include it for rustdoc testing\npurposes. -->\n\n```rust\npub struct Guess {\n    value: i32,\n}\n\nimpl Guess {\n    pub fn new(value: i32) -> Guess {\n        if value < 1 || value > 100 {\n            panic!(\"Guess value must be between 1 and 100, got {}.\", value);\n        }\n\n        Guess { value }\n    }\n\n    pub fn value(&self) -> i32 {\n        self.value\n    }\n}\n```\n\n<span class=\"caption\">Listing 9-10: A `Guess` type that will only continue with\nvalues between 1 and 100</span>\n\nFirst, we define a struct named `Guess` that has a field named `value` that\nholds an `i32`. This is where the number will be stored.\n\nThen we implement an associated function named `new` on `Guess` that creates\ninstances of `Guess` values. The `new` function is defined to have one\nparameter named `value` of type `i32` and to return a `Guess`. The code in the\nbody of the `new` function tests `value` to make sure it’s between 1 and 100.\nIf `value` doesn’t pass this test, we make a `panic!` call, which will alert\nthe programmer who is writing the calling code that they have a bug they need\nto fix, because creating a `Guess` with a `value` outside this range would\nviolate the contract that `Guess::new` is relying on. The conditions in which\n`Guess::new` might panic should be discussed in its public-facing API\ndocumentation; we’ll cover documentation conventions indicating the possibility\nof a `panic!` in the API documentation that you create in Chapter 14. If\n`value` does pass the test, we create a new `Guess` with its `value` field set\nto the `value` parameter and return the `Guess`.\n\nNext, we implement a method named `value` that borrows `self`, doesn’t have any\nother parameters, and returns an `i32`. This kind of method is sometimes called\na *getter*, because its purpose is to get some data from its fields and return\nit. This public method is necessary because the `value` field of the `Guess`\nstruct is private. It’s important that the `value` field be private so code\nusing the `Guess` struct is not allowed to set `value` directly: code outside\nthe module *must* use the `Guess::new` function to create an instance of\n`Guess`, thereby ensuring there’s no way for a `Guess` to have a `value` that\nhasn’t been checked by the conditions in the `Guess::new` function.\n\nA function that has a parameter or returns only numbers between 1 and 100 could\nthen declare in its signature that it takes or returns a `Guess` rather than an\n`i32` and wouldn’t need to do any additional checks in its body.\n\n## Summary\n\nRust’s error handling features are designed to help you write more robust code.\nThe `panic!` macro signals that your program is in a state it can’t handle and\nlets you tell the process to stop instead of trying to proceed with invalid or\nincorrect values. The `Result` enum uses Rust’s type system to indicate that\noperations might fail in a way that your code could recover from. You can use\n`Result` to tell code that calls your code that it needs to handle potential\nsuccess or failure as well. Using `panic!` and `Result` in the appropriate\nsituations will make your code more reliable in the face of inevitable problems.\n\nNow that you’ve seen useful ways that the standard library uses generics with\nthe `Option` and `Result` enums, we’ll talk about how generics work and how you\ncan use them in your code.\n", number: Some(SectionNumber([9, 3])), sub_items: [], path: "ch09-03-to-panic-or-not-to-panic.md", parent_names: ["Error Handling"] })], path: "ch09-00-error-handling.md", parent_names: [] }), Chapter(Chapter { name: "Generic Types, Traits, and Lifetimes", content: "# Generic Types, Traits, and Lifetimes\n\nEvery programming language has tools for effectively handling the duplication\nof concepts. In Rust, one such tool is *generics*. Generics are abstract\nstand-ins for concrete types or other properties. When we’re writing code, we\ncan express the behavior of generics or how they relate to other generics\nwithout knowing what will be in their place when compiling and running the code.\n\nSimilar to the way a function takes parameters with unknown values to run the\nsame code on multiple concrete values, functions can take parameters of some\ngeneric type instead of a concrete type, like `i32` or `String`. In fact, we’ve\nalready used generics in Chapter 6 with `Option<T>`, Chapter 8 with `Vec<T>`\nand `HashMap<K, V>`, and Chapter 9 with `Result<T, E>`. In this chapter, you’ll\nexplore how to define your own types, functions, and methods with generics!\n\nFirst, we’ll review how to extract a function to reduce code duplication. Next,\nwe’ll use the same technique to make a generic function from two functions that\ndiffer only in the types of their parameters. We’ll also explain how to use\ngeneric types in struct and enum definitions.\n\nThen you’ll learn how to use *traits* to define behavior in a generic way. You\ncan combine traits with generic types to constrain a generic type to only\nthose types that have a particular behavior, as opposed to just any type.\n\nFinally, we’ll discuss *lifetimes*, a variety of generics that give the\ncompiler information about how references relate to each other. Lifetimes allow\nus to borrow values in many situations while still enabling the compiler to\ncheck that the references are valid.\n\n## Removing Duplication by Extracting a Function\n\nBefore diving into generics syntax, let’s first look at how to remove\nduplication that doesn’t involve generic types by extracting a function. Then\nwe’ll apply this technique to extract a generic function! In the same way that\nyou recognize duplicated code to extract into a function, you’ll start to\nrecognize duplicated code that can use generics.\n\nConsider a short program that finds the largest number in a list, as shown in\nListing 10-1.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n\n    let mut largest = number_list[0];\n\n    for number in number_list {\n        if number > largest {\n            largest = number;\n        }\n    }\n\n    println!(\"The largest number is {}\", largest);\n#     assert_eq!(largest, 100);\n}\n```\n\n<span class=\"caption\">Listing 10-1: Code to find the largest number in a list\nof numbers</span>\n\nThis code stores a list of integers in the variable `number_list` and places\nthe first number in the list in a variable named `largest`. Then it iterates\nthrough all the numbers in the list, and if the current number is greater than\nthe number stored in `largest`, it replaces the number in that variable.\nHowever, if the current number is less than or equal to the largest number seen\nso far, the variable doesn’t change, and the code moves on to the next number\nin the list. After considering all the numbers in the list, `largest` should\nhold the largest number, which in this case is 100.\n\nTo find the largest number in two different lists of numbers, we can duplicate\nthe code in Listing 10-1 and use the same logic at two different places in the\nprogram, as shown in Listing 10-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n\n    let mut largest = number_list[0];\n\n    for number in number_list {\n        if number > largest {\n            largest = number;\n        }\n    }\n\n    println!(\"The largest number is {}\", largest);\n\n    let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];\n\n    let mut largest = number_list[0];\n\n    for number in number_list {\n        if number > largest {\n            largest = number;\n        }\n    }\n\n    println!(\"The largest number is {}\", largest);\n}\n```\n\n<span class=\"caption\">Listing 10-2: Code to find the largest number in *two*\nlists of numbers</span>\n\nAlthough this code works, duplicating code is tedious and error prone. We also\nhave to update the code in multiple places when we want to change it.\n\nTo eliminate this duplication, we can create an abstraction by defining a\nfunction that operates on any list of integers given to it in a parameter. This\nsolution makes our code clearer and lets us express the concept of finding the\nlargest number in a list abstractly.\n\nIn Listing 10-3, we extracted the code that finds the largest number into a\nfunction named `largest`. Unlike the code in Listing 10-1, which can find the\nlargest number in only one particular list, this program can find the largest\nnumber in two different lists.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn largest(list: &[i32]) -> i32 {\n    let mut largest = list[0];\n\n    for &item in list {\n        if item > largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n\n    let result = largest(&number_list);\n    println!(\"The largest number is {}\", result);\n#     assert_eq!(result, 100);\n\n    let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];\n\n    let result = largest(&number_list);\n    println!(\"The largest number is {}\", result);\n#     assert_eq!(result, 6000);\n}\n```\n\n<span class=\"caption\">Listing 10-3: Abstracted code to find the largest number\nin two lists</span>\n\nThe `largest` function has a parameter called `list`, which represents any\nconcrete slice of `i32` values that we might pass into the function. As a\nresult, when we call the function, the code runs on the specific values that we\npass in.\n\nIn sum, here are the steps we took to change the code from Listing 10-2 to\nListing 10-3:\n\n1. Identify duplicate code.\n2. Extract the duplicate code into the body of the function and specify the\n   inputs and return values of that code in the function signature.\n3. Update the two instances of duplicated code to call the function instead.\n\nNext, we’ll use these same steps with generics to reduce code duplication in\ndifferent ways. In the same way that the function body can operate on an\nabstract `list` instead of specific values, generics allow code to operate on\nabstract types.\n\nFor example, say we had two functions: one that finds the largest item in a\nslice of `i32` values and one that finds the largest item in a slice of `char`\nvalues. How would we eliminate that duplication? Let’s find out!\n", number: Some(SectionNumber([10])), sub_items: [Chapter(Chapter { name: "Generic Data Types", content: "## Generic Data Types\n\nWe can use generics to create definitions for items like function signatures or\nstructs, which we can then use with many different concrete data types. Let’s\nfirst look at how to define functions, structs, enums, and methods using\ngenerics. Then we’ll discuss how generics affect code performance.\n\n### In Function Definitions\n\nWhen defining a function that uses generics, we place the generics in the\nsignature of the function where we would usually specify the data types of the\nparameters and return value. Doing so makes our code more flexible and provides\nmore functionality to callers of our function while preventing code duplication.\n\nContinuing with our `largest` function, Listing 10-4 shows two functions that\nboth find the largest value in a slice.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn largest_i32(list: &[i32]) -> i32 {\n    let mut largest = list[0];\n\n    for &item in list {\n        if item > largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\nfn largest_char(list: &[char]) -> char {\n    let mut largest = list[0];\n\n    for &item in list {\n        if item > largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n\n    let result = largest_i32(&number_list);\n    println!(\"The largest number is {}\", result);\n#     assert_eq!(result, 100);\n\n    let char_list = vec![\'y\', \'m\', \'a\', \'q\'];\n\n    let result = largest_char(&char_list);\n    println!(\"The largest char is {}\", result);\n#     assert_eq!(result, \'y\');\n}\n```\n\n<span class=\"caption\">Listing 10-4: Two functions that differ only in their\nnames and the types in their signatures</span>\n\nThe `largest_i32` function is the one we extracted in Listing 10-3 that finds\nthe largest `i32` in a slice. The `largest_char` function finds the largest\n`char` in a slice. The function bodies have the same code, so let’s eliminate\nthe duplication by introducing a generic type parameter in a single function.\n\nTo parameterize the types in the new function we’ll define, we need to name the\ntype parameter, just as we do for the value parameters to a function. You can\nuse any identifier as a type parameter name. But we’ll use `T` because, by\nconvention, parameter names in Rust are short, often just a letter, and Rust’s\ntype-naming convention is CamelCase. Short for “type,” `T` is the default\nchoice of most Rust programmers.\n\nWhen we use a parameter in the body of the function, we have to declare the\nparameter name in the signature so the compiler knows what that name means.\nSimilarly, when we use a type parameter name in a function signature, we have\nto declare the type parameter name before we use it. To define the generic\n`largest` function, place type name declarations inside angle brackets, `<>`,\nbetween the name of the function and the parameter list, like this:\n\n```rust,ignore\nfn largest<T>(list: &[T]) -> T {\n```\n\nWe read this definition as: the function `largest` is generic over some type\n`T`. This function has one parameter named `list`, which is a slice of values\nof type `T`. The `largest` function will return a value of the same type `T`.\n\nListing 10-5 shows the combined `largest` function definition using the generic\ndata type in its signature. The listing also shows how we can call the function\nwith either a slice of `i32` values or `char` values. Note that this code won’t\ncompile yet, but we’ll fix it later in this chapter.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn largest<T>(list: &[T]) -> T {\n    let mut largest = list[0];\n\n    for &item in list {\n        if item > largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n\n    let result = largest(&number_list);\n    println!(\"The largest number is {}\", result);\n\n    let char_list = vec![\'y\', \'m\', \'a\', \'q\'];\n\n    let result = largest(&char_list);\n    println!(\"The largest char is {}\", result);\n}\n```\n\n<span class=\"caption\">Listing 10-5: A definition of the `largest` function that\nuses generic type parameters but doesn’t compile yet</span>\n\nIf we compile this code right now, we’ll get this error:\n\n```text\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0369]: binary operation `>` cannot be applied to type `T`\n --> src/main.rs:5:17\n  |\n5 |         if item > largest {\n  |            ---- ^ ------- T\n  |            |\n  |            T\n  |\n  = note: `T` might need a bound for `std::cmp::PartialOrd`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0369`.\nerror: could not compile `chapter10`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe note mentions `std::cmp::PartialOrd`, which is a *trait*. We’ll talk about\ntraits in the next section. For now, this error states that the body of\n`largest` won’t work for all possible types that `T` could be. Because we want\nto compare values of type `T` in the body, we can only use types whose values\ncan be ordered. To enable comparisons, the standard library has the\n`std::cmp::PartialOrd` trait that you can implement on types (see Appendix C\nfor more on this trait). You’ll learn how to specify that a generic type has a\nparticular trait in the [“Traits as Parameters”][traits-as-parameters]<!--\nignore --> section, but let’s first explore other ways of using generic type\nparameters.\n\n### In Struct Definitions\n\nWe can also define structs to use a generic type parameter in one or more\nfields using the `<>` syntax. Listing 10-6 shows how to define a `Point<T>`\nstruct to hold `x` and `y` coordinate values of any type.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nstruct Point<T> {\n    x: T,\n    y: T,\n}\n\nfn main() {\n    let integer = Point { x: 5, y: 10 };\n    let float = Point { x: 1.0, y: 4.0 };\n}\n```\n\n<span class=\"caption\">Listing 10-6: A `Point<T>` struct that holds `x` and `y`\nvalues of type `T`</span>\n\nThe syntax for using generics in struct definitions is similar to that used in\nfunction definitions. First, we declare the name of the type parameter inside\nangle brackets just after the name of the struct. Then we can use the generic\ntype in the struct definition where we would otherwise specify concrete data\ntypes.\n\nNote that because we’ve used only one generic type to define `Point<T>`, this\ndefinition says that the `Point<T>` struct is generic over some type `T`, and\nthe fields `x` and `y` are *both* that same type, whatever that type may be. If\nwe create an instance of a `Point<T>` that has values of different types, as in\nListing 10-7, our code won’t compile.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nstruct Point<T> {\n    x: T,\n    y: T,\n}\n\nfn main() {\n    let wont_work = Point { x: 5, y: 4.0 };\n}\n```\n\n<span class=\"caption\">Listing 10-7: The fields `x` and `y` must be the same\ntype because both have the same generic data type `T`.</span>\n\nIn this example, when we assign the integer value 5 to `x`, we let the\ncompiler know that the generic type `T` will be an integer for this instance of\n`Point<T>`. Then when we specify 4.0 for `y`, which we’ve defined to have the\nsame type as `x`, we’ll get a type mismatch error like this:\n\n```text\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0308]: mismatched types\n --> src/main.rs:7:38\n  |\n7 |     let wont_work = Point { x: 5, y: 4.0 };\n  |                                      ^^^ expected integer, found floating-point number\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `chapter10`.\n\nTo learn more, run the command again with --verbose.\n```\n\nTo define a `Point` struct where `x` and `y` are both generics but could have\ndifferent types, we can use multiple generic type parameters. For example, in\nListing 10-8, we can change the definition of `Point` to be generic over types\n`T` and `U` where `x` is of type `T` and `y` is of type `U`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nstruct Point<T, U> {\n    x: T,\n    y: U,\n}\n\nfn main() {\n    let both_integer = Point { x: 5, y: 10 };\n    let both_float = Point { x: 1.0, y: 4.0 };\n    let integer_and_float = Point { x: 5, y: 4.0 };\n}\n```\n\n<span class=\"caption\">Listing 10-8: A `Point<T, U>` generic over two types so\nthat `x` and `y` can be values of different types</span>\n\nNow all the instances of `Point` shown are allowed! You can use as many generic\ntype parameters in a definition as you want, but using more than a few makes\nyour code hard to read. When you need lots of generic types in your code, it\ncould indicate that your code needs restructuring into smaller pieces.\n\n### In Enum Definitions\n\nAs we did with structs, we can define enums to hold generic data types in their\nvariants. Let’s take another look at the `Option<T>` enum that the standard\nlibrary provides, which we used in Chapter 6:\n\n```rust\nenum Option<T> {\n    Some(T),\n    None,\n}\n```\n\nThis definition should now make more sense to you. As you can see, `Option<T>`\nis an enum that is generic over type `T` and has two variants: `Some`, which\nholds one value of type `T`, and a `None` variant that doesn’t hold any value.\nBy using the `Option<T>` enum, we can express the abstract concept of having an\noptional value, and because `Option<T>` is generic, we can use this abstraction\nno matter what the type of the optional value is.\n\nEnums can use multiple generic types as well. The definition of the `Result`\nenum that we used in Chapter 9 is one example:\n\n```rust\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n```\n\nThe `Result` enum is generic over two types, `T` and `E`, and has two variants:\n`Ok`, which holds a value of type `T`, and `Err`, which holds a value of type\n`E`. This definition makes it convenient to use the `Result` enum anywhere we\nhave an operation that might succeed (return a value of some type `T`) or fail\n(return an error of some type `E`). In fact, this is what we used to open a\nfile in Listing 9-3, where `T` was filled in with the type `std::fs::File` when\nthe file was opened successfully and `E` was filled in with the type\n`std::io::Error` when there were problems opening the file.\n\nWhen you recognize situations in your code with multiple struct or enum\ndefinitions that differ only in the types of the values they hold, you can\navoid duplication by using generic types instead.\n\n### In Method Definitions\n\nWe can implement methods on structs and enums (as we did in Chapter 5) and use\ngeneric types in their definitions, too. Listing 10-9 shows the `Point<T>`\nstruct we defined in Listing 10-6 with a method named `x` implemented on it.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nstruct Point<T> {\n    x: T,\n    y: T,\n}\n\nimpl<T> Point<T> {\n    fn x(&self) -> &T {\n        &self.x\n    }\n}\n\nfn main() {\n    let p = Point { x: 5, y: 10 };\n\n    println!(\"p.x = {}\", p.x());\n}\n```\n\n<span class=\"caption\">Listing 10-9: Implementing a method named `x` on the\n`Point<T>` struct that will return a reference to the `x` field of type\n`T`</span>\n\nHere, we’ve defined a method named `x` on `Point<T>` that returns a reference\nto the data in the field `x`.\n\nNote that we have to declare `T` just after `impl` so we can use it to specify\nthat we’re implementing methods on the type `Point<T>`.  By declaring `T` as a\ngeneric type after `impl`, Rust can identify that the type in the angle\nbrackets in `Point` is a generic type rather than a concrete type.\n\nWe could, for example, implement methods only on `Point<f32>` instances rather\nthan on `Point<T>` instances with any generic type. In Listing 10-10 we use the\nconcrete type `f32`, meaning we don’t declare any types after `impl`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# struct Point<T> {\n#     x: T,\n#     y: T,\n# }\n# \n# impl<T> Point<T> {\n#     fn x(&self) -> &T {\n#         &self.x\n#     }\n# }\n# \nimpl Point<f32> {\n    fn distance_from_origin(&self) -> f32 {\n        (self.x.powi(2) + self.y.powi(2)).sqrt()\n    }\n}\n# \n# fn main() {\n#     let p = Point { x: 5, y: 10 };\n# \n#     println!(\"p.x = {}\", p.x());\n# }\n```\n\n<span class=\"caption\">Listing 10-10: An `impl` block that only applies to a\nstruct with a particular concrete type for the generic type parameter `T`</span>\n\nThis code means the type `Point<f32>` will have a method named\n`distance_from_origin` and other instances of `Point<T>` where `T` is not of\ntype `f32` will not have this method defined. The method measures how far our\npoint is from the point at coordinates (0.0, 0.0) and uses mathematical\noperations that are available only for floating point types.\n\nGeneric type parameters in a struct definition aren’t always the same as those\nyou use in that struct’s method signatures. For example, Listing 10-11 defines\nthe method `mixup` on the `Point<T, U>` struct from Listing 10-8. The method\ntakes another `Point` as a parameter, which might have different types from the\n`self` `Point` we’re calling `mixup` on. The method creates a new `Point`\ninstance with the `x` value from the `self` `Point` (of type `T`) and the `y`\nvalue from the passed-in `Point` (of type `W`).\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nstruct Point<T, U> {\n    x: T,\n    y: U,\n}\n\nimpl<T, U> Point<T, U> {\n    fn mixup<V, W>(self, other: Point<V, W>) -> Point<T, W> {\n        Point {\n            x: self.x,\n            y: other.y,\n        }\n    }\n}\n\nfn main() {\n    let p1 = Point { x: 5, y: 10.4 };\n    let p2 = Point { x: \"Hello\", y: \'c\' };\n\n    let p3 = p1.mixup(p2);\n\n    println!(\"p3.x = {}, p3.y = {}\", p3.x, p3.y);\n}\n```\n\n<span class=\"caption\">Listing 10-11: A method that uses different generic types\nfrom its struct’s definition</span>\n\nIn `main`, we’ve defined a `Point` that has an `i32` for `x` (with value `5`)\nand an `f64` for `y` (with value `10.4`). The `p2` variable is a `Point` struct\nthat has a string slice for `x` (with value `\"Hello\"`) and a `char` for `y`\n(with value `c`). Calling `mixup` on `p1` with the argument `p2` gives us `p3`,\nwhich will have an `i32` for `x`, because `x` came from `p1`. The `p3` variable\nwill have a `char` for `y`, because `y` came from `p2`. The `println!` macro\ncall will print `p3.x = 5, p3.y = c`.\n\nThe purpose of this example is to demonstrate a situation in which some generic\nparameters are declared with `impl` and some are declared with the method\ndefinition. Here, the generic parameters `T` and `U` are declared after `impl`,\nbecause they go with the struct definition. The generic parameters `V` and `W`\nare declared after `fn mixup`, because they’re only relevant to the method.\n\n### Performance of Code Using Generics\n\nYou might be wondering whether there is a runtime cost when you’re using\ngeneric type parameters. The good news is that Rust implements generics in such\na way that your code doesn’t run any slower using generic types than it would\nwith concrete types.\n\nRust accomplishes this by performing monomorphization of the code that is using\ngenerics at compile time. *Monomorphization* is the process of turning generic\ncode into specific code by filling in the concrete types that are used when\ncompiled.\n\nIn this process, the compiler does the opposite of the steps we used to create\nthe generic function in Listing 10-5: the compiler looks at all the places\nwhere generic code is called and generates code for the concrete types the\ngeneric code is called with.\n\nLet’s look at how this works with an example that uses the standard library’s\n`Option<T>` enum:\n\n```rust\nlet integer = Some(5);\nlet float = Some(5.0);\n```\n\nWhen Rust compiles this code, it performs monomorphization. During that\nprocess, the compiler reads the values that have been used in `Option<T>`\ninstances and identifies two kinds of `Option<T>`: one is `i32` and the other\nis `f64`. As such, it expands the generic definition of `Option<T>` into\n`Option_i32` and `Option_f64`, thereby replacing the generic definition with\nthe specific ones.\n\nThe monomorphized version of the code looks like the following. The generic\n`Option<T>` is replaced with the specific definitions created by the compiler:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nenum Option_i32 {\n    Some(i32),\n    None,\n}\n\nenum Option_f64 {\n    Some(f64),\n    None,\n}\n\nfn main() {\n    let integer = Option_i32::Some(5);\n    let float = Option_f64::Some(5.0);\n}\n```\n\nBecause Rust compiles generic code into code that specifies the type in each\ninstance, we pay no runtime cost for using generics. When the code runs, it\nperforms just as it would if we had duplicated each definition by hand. The\nprocess of monomorphization makes Rust’s generics extremely efficient at\nruntime.\n\n[traits-as-parameters]: ch10-02-traits.html#traits-as-parameters\n", number: Some(SectionNumber([10, 1])), sub_items: [], path: "ch10-01-syntax.md", parent_names: ["Generic Types, Traits, and Lifetimes"] }), Chapter(Chapter { name: "Traits: Defining Shared Behavior", content: "## Traits: Defining Shared Behavior\n\nA *trait* tells the Rust compiler about functionality a particular type has and\ncan share with other types. We can use traits to define shared behavior in an\nabstract way. We can use trait bounds to specify that a generic can be any type\nthat has certain behavior.\n\n> Note: Traits are similar to a feature often called *interfaces* in other\n> languages, although with some differences.\n\n### Defining a Trait\n\nA type’s behavior consists of the methods we can call on that type. Different\ntypes share the same behavior if we can call the same methods on all of those\ntypes. Trait definitions are a way to group method signatures together to\ndefine a set of behaviors necessary to accomplish some purpose.\n\nFor example, let’s say we have multiple structs that hold various kinds and\namounts of text: a `NewsArticle` struct that holds a news story filed in a\nparticular location and a `Tweet` that can have at most 280 characters along\nwith metadata that indicates whether it was a new tweet, a retweet, or a reply\nto another tweet.\n\nWe want to make a media aggregator library that can display summaries of data\nthat might be stored in a `NewsArticle` or `Tweet` instance. To do this, we\nneed a summary from each type, and we need to request that summary by calling a\n`summarize` method on an instance. Listing 10-12 shows the definition of a\n`Summary` trait that expresses this behavior.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub trait Summary {\n    fn summarize(&self) -> String;\n}\n```\n\n<span class=\"caption\">Listing 10-12: A `Summary` trait that consists of the\nbehavior provided by a `summarize` method</span>\n\nHere, we declare a trait using the `trait` keyword and then the trait’s name,\nwhich is `Summary` in this case. Inside the curly brackets, we declare the\nmethod signatures that describe the behaviors of the types that implement this\ntrait, which in this case is `fn summarize(&self) -> String`.\n\nAfter the method signature, instead of providing an implementation within curly\nbrackets, we use a semicolon. Each type implementing this trait must provide\nits own custom behavior for the body of the method. The compiler will enforce\nthat any type that has the `Summary` trait will have the method `summarize`\ndefined with this signature exactly.\n\nA trait can have multiple methods in its body: the method signatures are listed\none per line and each line ends in a semicolon.\n\n### Implementing a Trait on a Type\n\nNow that we’ve defined the desired behavior using the `Summary` trait, we can\nimplement it on the types in our media aggregator. Listing 10-13 shows an\nimplementation of the `Summary` trait on the `NewsArticle` struct that uses the\nheadline, the author, and the location to create the return value of\n`summarize`. For the `Tweet` struct, we define `summarize` as the username\nfollowed by the entire text of the tweet, assuming that tweet content is\nalready limited to 280 characters.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub trait Summary {\n#     fn summarize(&self) -> String;\n# }\n# \npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\n\nimpl Summary for NewsArticle {\n    fn summarize(&self) -> String {\n        format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\n    }\n}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!(\"{}: {}\", self.username, self.content)\n    }\n}\n```\n\n<span class=\"caption\">Listing 10-13: Implementing the `Summary` trait on the\n`NewsArticle` and `Tweet` types</span>\n\nImplementing a trait on a type is similar to implementing regular methods. The\ndifference is that after `impl`, we put the trait name that we want to\nimplement, then use the `for` keyword, and then specify the name of the type we\nwant to implement the trait for. Within the `impl` block, we put the method\nsignatures that the trait definition has defined. Instead of adding a semicolon\nafter each signature, we use curly brackets and fill in the method body with\nthe specific behavior that we want the methods of the trait to have for the\nparticular type.\n\nAfter implementing the trait, we can call the methods on instances of\n`NewsArticle` and `Tweet` in the same way we call regular methods, like this:\n\n```rust,ignore\n# use chapter10::{self, Summary, Tweet};\n# \n# fn main() {\n    let tweet = Tweet {\n        username: String::from(\"horse_ebooks\"),\n        content: String::from(\n            \"of course, as you probably already know, people\",\n        ),\n        reply: false,\n        retweet: false,\n    };\n\n    println!(\"1 new tweet: {}\", tweet.summarize());\n# }\n```\n\nThis code prints `1 new tweet: horse_ebooks: of course, as you probably already\nknow, people`.\n\nNote that because we defined the `Summary` trait and the `NewsArticle` and\n`Tweet` types in the same *lib.rs* in Listing 10-13, they’re all in the same\nscope. Let’s say this *lib.rs* is for a crate we’ve called `aggregator` and\nsomeone else wants to use our crate’s functionality to implement the `Summary`\ntrait on a struct defined within their library’s scope. They would need to\nbring the trait into their scope first. They would do so by specifying `use\naggregator::Summary;`, which then would enable them to implement `Summary` for\ntheir type. The `Summary` trait would also need to be a public trait for\nanother crate to implement it, which it is because we put the `pub` keyword\nbefore `trait` in Listing 10-12.\n\nOne restriction to note with trait implementations is that we can implement a\ntrait on a type only if either the trait or the type is local to our crate.\nFor example, we can implement standard library traits like `Display` on a\ncustom type like `Tweet` as part of our `aggregator` crate functionality,\nbecause the type `Tweet` is local to our `aggregator` crate. We can also\nimplement `Summary` on `Vec<T>` in our `aggregator` crate, because the\ntrait `Summary` is local to our `aggregator` crate.\n\nBut we can’t implement external traits on external types. For example, we can’t\nimplement the `Display` trait on `Vec<T>` within our `aggregator` crate,\nbecause `Display` and `Vec<T>` are defined in the standard library and aren’t\nlocal to our `aggregator` crate. This restriction is part of a property of\nprograms called *coherence*, and more specifically the *orphan rule*, so named\nbecause the parent type is not present. This rule ensures that other people’s\ncode can’t break your code and vice versa. Without the rule, two crates could\nimplement the same trait for the same type, and Rust wouldn’t know which\nimplementation to use.\n\n### Default Implementations\n\nSometimes it’s useful to have default behavior for some or all of the methods\nin a trait instead of requiring implementations for all methods on every type.\nThen, as we implement the trait on a particular type, we can keep or override\neach method’s default behavior.\n\nListing 10-14 shows how to specify a default string for the `summarize` method\nof the `Summary` trait instead of only defining the method signature, as we did\nin Listing 10-12.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub trait Summary {\n    fn summarize(&self) -> String {\n        String::from(\"(Read more...)\")\n    }\n}\n# \n# pub struct NewsArticle {\n#     pub headline: String,\n#     pub location: String,\n#     pub author: String,\n#     pub content: String,\n# }\n# \n# impl Summary for NewsArticle {}\n# \n# pub struct Tweet {\n#     pub username: String,\n#     pub content: String,\n#     pub reply: bool,\n#     pub retweet: bool,\n# }\n# \n# impl Summary for Tweet {\n#     fn summarize(&self) -> String {\n#         format!(\"{}: {}\", self.username, self.content)\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 10-14: Definition of a `Summary` trait with a\ndefault implementation of the `summarize` method</span>\n\nTo use a default implementation to summarize instances of `NewsArticle` instead\nof defining a custom implementation, we specify an empty `impl` block with\n`impl Summary for NewsArticle {}`.\n\nEven though we’re no longer defining the `summarize` method on `NewsArticle`\ndirectly, we’ve provided a default implementation and specified that\n`NewsArticle` implements the `Summary` trait. As a result, we can still call\nthe `summarize` method on an instance of `NewsArticle`, like this:\n\n```rust,ignore\n# use chapter10::{self, NewsArticle, Summary};\n# \n# fn main() {\n    let article = NewsArticle {\n        headline: String::from(\"Penguins win the Stanley Cup Championship!\"),\n        location: String::from(\"Pittsburgh, PA, USA\"),\n        author: String::from(\"Iceburgh\"),\n        content: String::from(\n            \"The Pittsburgh Penguins once again are the best \\\n             hockey team in the NHL.\",\n        ),\n    };\n\n    println!(\"New article available! {}\", article.summarize());\n# }\n```\n\nThis code prints `New article available! (Read more...)`.\n\nCreating a default implementation for `summarize` doesn’t require us to change\nanything about the implementation of `Summary` on `Tweet` in Listing 10-13. The\nreason is that the syntax for overriding a default implementation is the same\nas the syntax for implementing a trait method that doesn’t have a default\nimplementation.\n\nDefault implementations can call other methods in the same trait, even if those\nother methods don’t have a default implementation. In this way, a trait can\nprovide a lot of useful functionality and only require implementors to specify\na small part of it. For example, we could define the `Summary` trait to have a\n`summarize_author` method whose implementation is required, and then define a\n`summarize` method that has a default implementation that calls the\n`summarize_author` method:\n\n```rust\npub trait Summary {\n    fn summarize_author(&self) -> String;\n\n    fn summarize(&self) -> String {\n        format!(\"(Read more from {}...)\", self.summarize_author())\n    }\n}\n# \n# pub struct Tweet {\n#     pub username: String,\n#     pub content: String,\n#     pub reply: bool,\n#     pub retweet: bool,\n# }\n# \n# impl Summary for Tweet {\n#     fn summarize_author(&self) -> String {\n#         format!(\"@{}\", self.username)\n#     }\n# }\n```\n\nTo use this version of `Summary`, we only need to define `summarize_author`\nwhen we implement the trait on a type:\n\n```rust,ignore\n# pub trait Summary {\n#     fn summarize_author(&self) -> String;\n# \n#     fn summarize(&self) -> String {\n#         format!(\"(Read more from {}...)\", self.summarize_author())\n#     }\n# }\n# \n# pub struct Tweet {\n#     pub username: String,\n#     pub content: String,\n#     pub reply: bool,\n#     pub retweet: bool,\n# }\n# \nimpl Summary for Tweet {\n    fn summarize_author(&self) -> String {\n        format!(\"@{}\", self.username)\n    }\n}\n```\n\nAfter we define `summarize_author`, we can call `summarize` on instances of the\n`Tweet` struct, and the default implementation of `summarize` will call the\ndefinition of `summarize_author` that we’ve provided. Because we’ve implemented\n`summarize_author`, the `Summary` trait has given us the behavior of the\n`summarize` method without requiring us to write any more code.\n\n```rust,ignore\n# use chapter10::{self, Summary, Tweet};\n# \n# fn main() {\n    let tweet = Tweet {\n        username: String::from(\"horse_ebooks\"),\n        content: String::from(\n            \"of course, as you probably already know, people\",\n        ),\n        reply: false,\n        retweet: false,\n    };\n\n    println!(\"1 new tweet: {}\", tweet.summarize());\n# }\n```\n\nThis code prints `1 new tweet: (Read more from @horse_ebooks...)`.\n\nNote that it isn’t possible to call the default implementation from an\noverriding implementation of that same method.\n\n### Traits as Parameters\n\nNow that you know how to define and implement traits, we can explore how to use\ntraits to define functions that accept many different types.\n\nFor example, in Listing 10-13, we implemented the `Summary` trait on the\n`NewsArticle` and `Tweet` types. We can define a `notify` function that calls\nthe `summarize` method on its `item` parameter, which is of some type that\nimplements the `Summary` trait. To do this, we can use the `impl Trait`\nsyntax, like this:\n\n```rust,ignore\n# pub trait Summary {\n#     fn summarize(&self) -> String;\n# }\n# \n# pub struct NewsArticle {\n#     pub headline: String,\n#     pub location: String,\n#     pub author: String,\n#     pub content: String,\n# }\n# \n# impl Summary for NewsArticle {\n#     fn summarize(&self) -> String {\n#         format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\n#     }\n# }\n# \n# pub struct Tweet {\n#     pub username: String,\n#     pub content: String,\n#     pub reply: bool,\n#     pub retweet: bool,\n# }\n# \n# impl Summary for Tweet {\n#     fn summarize(&self) -> String {\n#         format!(\"{}: {}\", self.username, self.content)\n#     }\n# }\n# \npub fn notify(item: &impl Summary) {\n    println!(\"Breaking news! {}\", item.summarize());\n}\n```\n\nInstead of a concrete type for the `item` parameter, we specify the `impl`\nkeyword and the trait name. This parameter accepts any type that implements the\nspecified trait. In the body of `notify`, we can call any methods on `item`\nthat come from the `Summary` trait, such as `summarize`. We can call `notify`\nand pass in any instance of `NewsArticle` or `Tweet`. Code that calls the\nfunction with any other type, such as a `String` or an `i32`, won’t compile\nbecause those types don’t implement `Summary`.\n\n#### Trait Bound Syntax\n\nThe `impl Trait` syntax works for straightforward cases but is actually\nsyntax sugar for a longer form, which is called a *trait bound*; it looks like\nthis:\n\n```rust,ignore\npub fn notify<T: Summary>(item: &T) {\n    println!(\"Breaking news! {}\", item.summarize());\n}\n```\n\nThis longer form is equivalent to the example in the previous section but is\nmore verbose. We place trait bounds with the declaration of the generic type\nparameter after a colon and inside angle brackets.\n\nThe `impl Trait` syntax is convenient and makes for more concise code in simple\ncases. The trait bound syntax can express more complexity in other cases. For\nexample, we can have two parameters that implement `Summary`. Using the `impl\nTrait` syntax looks like this:\n\n```rust,ignore\npub fn notify(item1: &impl Summary, item2: &impl Summary) {\n```\n\nIf we wanted this function to allow `item1` and `item2` to have different\ntypes, using `impl Trait` would be appropriate (as long as both types implement\n`Summary`). If we wanted to force both parameters to have the same type, that’s\nonly possible to express using a trait bound, like this:\n\n```rust,ignore\npub fn notify<T: Summary>(item1: &T, item2: &T) {\n```\n\nThe generic type `T` specified as the type of the `item1` and `item2`\nparameters constrains the function such that the concrete type of the value\npassed as an argument for `item1` and `item2` must be the same.\n\n#### Specifying Multiple Trait Bounds with the `+` Syntax\n\nWe can also specify more than one trait bound. Say we wanted `notify` to use\ndisplay formatting on `item` as well as the `summarize` method: we specify in\nthe `notify` definition that `item` must implement both `Display` and\n`Summary`. We can do so using the `+` syntax:\n\n```rust,ignore\npub fn notify(item: &(impl Summary + Display)) {\n```\n\nThe `+` syntax is also valid with trait bounds on generic types:\n\n```rust,ignore\npub fn notify<T: Summary + Display>(item: &T) {\n```\n\nWith the two trait bounds specified, the body of `notify` can call `summarize`\nand use `{}` to format `item`.\n\n#### Clearer Trait Bounds with `where` Clauses\n\nUsing too many trait bounds has its downsides. Each generic has its own trait\nbounds, so functions with multiple generic type parameters can contain lots of\ntrait bound information between the function’s name and its parameter list,\nmaking the function signature hard to read. For this reason, Rust has alternate\nsyntax for specifying trait bounds inside a `where` clause after the function\nsignature. So instead of writing this:\n\n```rust,ignore\nfn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) -> i32 {\n```\n\nwe can use a `where` clause, like this:\n\n```rust,ignore\nfn some_function<T, U>(t: &T, u: &U) -> i32\n    where T: Display + Clone,\n          U: Clone + Debug\n{\n```\n\nThis function’s signature is less cluttered: the function name, parameter list,\nand return type are close together, similar to a function without lots of trait\nbounds.\n\n### Returning Types that Implement Traits\n\nWe can also use the `impl Trait` syntax in the return position to return a\nvalue of some type that implements a trait, as shown here:\n\n```rust,ignore\n# pub trait Summary {\n#     fn summarize(&self) -> String;\n# }\n# \n# pub struct NewsArticle {\n#     pub headline: String,\n#     pub location: String,\n#     pub author: String,\n#     pub content: String,\n# }\n# \n# impl Summary for NewsArticle {\n#     fn summarize(&self) -> String {\n#         format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\n#     }\n# }\n# \n# pub struct Tweet {\n#     pub username: String,\n#     pub content: String,\n#     pub reply: bool,\n#     pub retweet: bool,\n# }\n# \n# impl Summary for Tweet {\n#     fn summarize(&self) -> String {\n#         format!(\"{}: {}\", self.username, self.content)\n#     }\n# }\n# \nfn returns_summarizable() -> impl Summary {\n    Tweet {\n        username: String::from(\"horse_ebooks\"),\n        content: String::from(\n            \"of course, as you probably already know, people\",\n        ),\n        reply: false,\n        retweet: false,\n    }\n}\n```\n\nBy using `impl Summary` for the return type, we specify that the\n`returns_summarizable` function returns some type that implements the `Summary`\ntrait without naming the concrete type. In this case, `returns_summarizable`\nreturns a `Tweet`, but the code calling this function doesn’t know that.\n\nThe ability to return a type that is only specified by the trait it implements\nis especially useful in the context of closures and iterators, which we cover\nin Chapter 13. Closures and iterators create types that only the compiler knows\nor types that are very long to specify. The `impl Trait` syntax lets you\nconcisely specify that a function returns some type that implements the\n`Iterator` trait without needing to write out a very long type.\n\nHowever, you can only use `impl Trait` if you’re returning a single type. For\nexample, this code that returns either a `NewsArticle` or a `Tweet` with the\nreturn type specified as `impl Summary` wouldn’t work:\n\n```rust,ignore,does_not_compile\n# pub trait Summary {\n#     fn summarize(&self) -> String;\n# }\n# \n# pub struct NewsArticle {\n#     pub headline: String,\n#     pub location: String,\n#     pub author: String,\n#     pub content: String,\n# }\n# \n# impl Summary for NewsArticle {\n#     fn summarize(&self) -> String {\n#         format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\n#     }\n# }\n# \n# pub struct Tweet {\n#     pub username: String,\n#     pub content: String,\n#     pub reply: bool,\n#     pub retweet: bool,\n# }\n# \n# impl Summary for Tweet {\n#     fn summarize(&self) -> String {\n#         format!(\"{}: {}\", self.username, self.content)\n#     }\n# }\n# \nfn returns_summarizable(switch: bool) -> impl Summary {\n    if switch {\n        NewsArticle {\n            headline: String::from(\n                \"Penguins win the Stanley Cup Championship!\",\n            ),\n            location: String::from(\"Pittsburgh, PA, USA\"),\n            author: String::from(\"Iceburgh\"),\n            content: String::from(\n                \"The Pittsburgh Penguins once again are the best \\\n                 hockey team in the NHL.\",\n            ),\n        }\n    } else {\n        Tweet {\n            username: String::from(\"horse_ebooks\"),\n            content: String::from(\n                \"of course, as you probably already know, people\",\n            ),\n            reply: false,\n            retweet: false,\n        }\n    }\n}\n```\n\nReturning either a `NewsArticle` or a `Tweet` isn’t allowed due to restrictions\naround how the `impl Trait` syntax is implemented in the compiler. We’ll cover\nhow to write a function with this behavior in the [“Using Trait Objects That\nAllow for Values of Different\nTypes”][using-trait-objects-that-allow-for-values-of-different-types]<!--\nignore --> section of Chapter 17.\n\n### Fixing the `largest` Function with Trait Bounds\n\nNow that you know how to specify the behavior you want to use using the generic\ntype parameter’s bounds, let’s return to Listing 10-5 to fix the definition of\nthe `largest` function that uses a generic type parameter! Last time we tried\nto run that code, we received this error:\n\n```text\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0369]: binary operation `>` cannot be applied to type `T`\n --> src/main.rs:5:17\n  |\n5 |         if item > largest {\n  |            ---- ^ ------- T\n  |            |\n  |            T\n  |\n  = note: `T` might need a bound for `std::cmp::PartialOrd`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0369`.\nerror: could not compile `chapter10`.\n\nTo learn more, run the command again with --verbose.\n```\n\nIn the body of `largest` we wanted to compare two values of type `T` using the\ngreater than (`>`) operator. Because that operator is defined as a default\nmethod on the standard library trait `std::cmp::PartialOrd`, we need to specify\n`PartialOrd` in the trait bounds for `T` so the `largest` function can work on\nslices of any type that we can compare. We don’t need to bring `PartialOrd`\ninto scope because it’s in the prelude. Change the signature of `largest` to\nlook like this:\n\n```rust,ignore\nfn largest<T: PartialOrd>(list: &[T]) -> T {\n#     let mut largest = list[0];\n# \n#     for &item in list {\n#         if item > largest {\n#             largest = item;\n#         }\n#     }\n# \n#     largest\n# }\n# \n# fn main() {\n#     let number_list = vec![34, 50, 25, 100, 65];\n# \n#     let result = largest(&number_list);\n#     println!(\"The largest number is {}\", result);\n# \n#     let char_list = vec![\'y\', \'m\', \'a\', \'q\'];\n# \n#     let result = largest(&char_list);\n#     println!(\"The largest char is {}\", result);\n# }\n```\n\nThis time when we compile the code, we get a different set of errors:\n\n```text\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0508]: cannot move out of type `[T]`, a non-copy slice\n --> src/main.rs:2:23\n  |\n2 |     let mut largest = list[0];\n  |                       ^^^^^^^\n  |                       |\n  |                       cannot move out of here\n  |                       move occurs because `list[_]` has type `T`, which does not implement the `Copy` trait\n  |                       help: consider borrowing here: `&list[0]`\n\nerror[E0507]: cannot move out of a shared reference\n --> src/main.rs:4:18\n  |\n4 |     for &item in list {\n  |         -----    ^^^^\n  |         ||\n  |         |data moved here\n  |         |move occurs because `item` has type `T`, which does not implement the `Copy` trait\n  |         help: consider removing the `&`: `item`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0507, E0508.\nFor more information about an error, try `rustc --explain E0507`.\nerror: could not compile `chapter10`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe key line in this error is `cannot move out of type [T], a non-copy slice`.\nWith our non-generic versions of the `largest` function, we were only trying to\nfind the largest `i32` or `char`. As discussed in the [“Stack-Only Data:\nCopy”][stack-only-data-copy]<!-- ignore --> section in Chapter 4, types like\n`i32` and `char` that have a known size can be stored on the stack, so they\nimplement the `Copy` trait. But when we made the `largest` function generic,\nit became possible for the `list` parameter to have types in it that don’t\nimplement the `Copy` trait. Consequently, we wouldn’t be able to move the\nvalue out of `list[0]` and into the `largest` variable, resulting in this\nerror.\n\nTo call this code with only those types that implement the `Copy` trait, we can\nadd `Copy` to the trait bounds of `T`! Listing 10-15 shows the complete code of\na generic `largest` function that will compile as long as the types of the\nvalues in the slice that we pass into the function implement the `PartialOrd`\n*and* `Copy` traits, like `i32` and `char` do.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn largest<T: PartialOrd + Copy>(list: &[T]) -> T {\n    let mut largest = list[0];\n\n    for &item in list {\n        if item > largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n\n    let result = largest(&number_list);\n    println!(\"The largest number is {}\", result);\n\n    let char_list = vec![\'y\', \'m\', \'a\', \'q\'];\n\n    let result = largest(&char_list);\n    println!(\"The largest char is {}\", result);\n}\n```\n\n<span class=\"caption\">Listing 10-15: A working definition of the `largest`\nfunction that works on any generic type that implements the `PartialOrd` and\n`Copy` traits</span>\n\nIf we don’t want to restrict the `largest` function to the types that implement\nthe `Copy` trait, we could specify that `T` has the trait bound `Clone` instead\nof `Copy`. Then we could clone each value in the slice when we want the\n`largest` function to have ownership. Using the `clone` function means we’re\npotentially making more heap allocations in the case of types that own heap\ndata like `String`, and heap allocations can be slow if we’re working with\nlarge amounts of data.\n\nAnother way we could implement `largest` is for the function to return a\nreference to a `T` value in the slice. If we change the return type to `&T`\ninstead of `T`, thereby changing the body of the function to return a\nreference, we wouldn’t need the `Clone` or `Copy` trait bounds and we could\navoid heap allocations. Try implementing these alternate solutions on your own!\n\n### Using Trait Bounds to Conditionally Implement Methods\n\nBy using a trait bound with an `impl` block that uses generic type parameters,\nwe can implement methods conditionally for types that implement the specified\ntraits. For example, the type `Pair<T>` in Listing 10-16 always implements the\n`new` function. But `Pair<T>` only implements the `cmp_display` method if its\ninner type `T` implements the `PartialOrd` trait that enables comparison *and*\nthe `Display` trait that enables printing.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nuse std::fmt::Display;\n\nstruct Pair<T> {\n    x: T,\n    y: T,\n}\n\nimpl<T> Pair<T> {\n    fn new(x: T, y: T) -> Self {\n        Self { x, y }\n    }\n}\n\nimpl<T: Display + PartialOrd> Pair<T> {\n    fn cmp_display(&self) {\n        if self.x >= self.y {\n            println!(\"The largest member is x = {}\", self.x);\n        } else {\n            println!(\"The largest member is y = {}\", self.y);\n        }\n    }\n}\n```\n\n<span class=\"caption\">Listing 10-16: Conditionally implement methods on a\ngeneric type depending on trait bounds</span>\n\nWe can also conditionally implement a trait for any type that implements\nanother trait. Implementations of a trait on any type that satisfies the trait\nbounds are called *blanket implementations* and are extensively used in the\nRust standard library. For example, the standard library implements the\n`ToString` trait on any type that implements the `Display` trait. The `impl`\nblock in the standard library looks similar to this code:\n\n```rust,ignore\nimpl<T: Display> ToString for T {\n    // --snip--\n}\n```\n\nBecause the standard library has this blanket implementation, we can call the\n`to_string` method defined by the `ToString` trait on any type that implements\nthe `Display` trait. For example, we can turn integers into their corresponding\n`String` values like this because integers implement `Display`:\n\n```rust\nlet s = 3.to_string();\n```\n\nBlanket implementations appear in the documentation for the trait in the\n“Implementors” section.\n\nTraits and trait bounds let us write code that uses generic type parameters to\nreduce duplication but also specify to the compiler that we want the generic\ntype to have particular behavior. The compiler can then use the trait bound\ninformation to check that all the concrete types used with our code provide the\ncorrect behavior. In dynamically typed languages, we would get an error at\nruntime if we called a method on a type which didn’t define the method. But Rust\nmoves these errors to compile time so we’re forced to fix the problems before\nour code is even able to run. Additionally, we don’t have to write code that\nchecks for behavior at runtime because we’ve already checked at compile time.\nDoing so improves performance without having to give up the flexibility of\ngenerics.\n\nAnother kind of generic that we’ve already been using is called *lifetimes*.\nRather than ensuring that a type has the behavior we want, lifetimes ensure\nthat references are valid as long as we need them to be. Let’s look at how\nlifetimes do that.\n\n[stack-only-data-copy]:\nch04-01-what-is-ownership.html#stack-only-data-copy\n[using-trait-objects-that-allow-for-values-of-different-types]:\nch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n", number: Some(SectionNumber([10, 2])), sub_items: [], path: "ch10-02-traits.md", parent_names: ["Generic Types, Traits, and Lifetimes"] }), Chapter(Chapter { name: "Validating References with Lifetimes", content: "## Validating References with Lifetimes\n\nOne detail we didn’t discuss in the [“References and\nBorrowing”][references-and-borrowing]<!-- ignore --> section in Chapter 4 is\nthat every reference in Rust has a *lifetime*, which is the scope for which\nthat reference is valid. Most of the time, lifetimes are implicit and\ninferred, just like most of the time, types are inferred. We must annotate\ntypes when multiple types are possible. In a similar way, we must annotate\nlifetimes when the lifetimes of references could be related in a few different\nways. Rust requires us to annotate the relationships using generic lifetime\nparameters to ensure the actual references used at runtime will definitely be\nvalid.\n\nThe concept of lifetimes is somewhat different from tools in other programming\nlanguages, arguably making lifetimes Rust’s most distinctive feature. Although\nwe won’t cover lifetimes in their entirety in this chapter, we’ll discuss\ncommon ways you might encounter lifetime syntax so you can become familiar with\nthe concepts.\n\n### Preventing Dangling References with Lifetimes\n\nThe main aim of lifetimes is to prevent dangling references, which cause a\nprogram to reference data other than the data it’s intended to reference.\nConsider the program in Listing 10-17, which has an outer scope and an inner\nscope.\n\n```rust,ignore,does_not_compile\n# fn main() {\n    {\n        let r;\n\n        {\n            let x = 5;\n            r = &x;\n        }\n\n        println!(\"r: {}\", r);\n    }\n# }\n```\n\n<span class=\"caption\">Listing 10-17: An attempt to use a reference whose value\nhas gone out of scope</span>\n\n> Note: The examples in Listings 10-17, 10-18, and 10-24 declare variables\n> without giving them an initial value, so the variable name exists in the\n> outer scope. At first glance, this might appear to be in conflict with Rust’s\n> having no null values. However, if we try to use a variable before giving it\n> a value, we’ll get a compile-time error, which shows that Rust indeed does\n> not allow null values.\n\nThe outer scope declares a variable named `r` with no initial value, and the\ninner scope declares a variable named `x` with the initial value of 5. Inside\nthe inner scope, we attempt to set the value of `r` as a reference to `x`. Then\nthe inner scope ends, and we attempt to print the value in `r`. This code won’t\ncompile because the value `r` is referring to has gone out of scope before we\ntry to use it. Here is the error message:\n\n```text\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0597]: `x` does not live long enough\n  --> src/main.rs:7:17\n   |\n7  |             r = &x;\n   |                 ^^ borrowed value does not live long enough\n8  |         }\n   |         - `x` dropped here while still borrowed\n9  | \n10 |         println!(\"r: {}\", r);\n   |                           - borrow later used here\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0597`.\nerror: could not compile `chapter10`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe variable `x` doesn’t “live long enough.” The reason is that `x` will be out\nof scope when the inner scope ends on line 7. But `r` is still valid for the\nouter scope; because its scope is larger, we say that it “lives longer.” If\nRust allowed this code to work, `r` would be referencing memory that was\ndeallocated when `x` went out of scope, and anything we tried to do with `r`\nwouldn’t work correctly. So how does Rust determine that this code is invalid?\nIt uses a borrow checker.\n\n### The Borrow Checker\n\nThe Rust compiler has a *borrow checker* that compares scopes to determine\nwhether all borrows are valid. Listing 10-18 shows the same code as Listing\n10-17 but with annotations showing the lifetimes of the variables.\n\n```rust,ignore,does_not_compile\n# fn main() {\n    {\n        let r;                // ---------+-- \'a\n                              //          |\n        {                     //          |\n            let x = 5;        // -+-- \'b  |\n            r = &x;           //  |       |\n        }                     // -+       |\n                              //          |\n        println!(\"r: {}\", r); //          |\n    }                         // ---------+\n# }\n```\n\n<span class=\"caption\">Listing 10-18: Annotations of the lifetimes of `r` and\n`x`, named `\'a` and `\'b`, respectively</span>\n\nHere, we’ve annotated the lifetime of `r` with `\'a` and the lifetime of `x`\nwith `\'b`. As you can see, the inner `\'b` block is much smaller than the outer\n`\'a` lifetime block. At compile time, Rust compares the size of the two\nlifetimes and sees that `r` has a lifetime of `\'a` but that it refers to memory\nwith a lifetime of `\'b`. The program is rejected because `\'b` is shorter than\n`\'a`: the subject of the reference doesn’t live as long as the reference.\n\nListing 10-19 fixes the code so it doesn’t have a dangling reference and\ncompiles without any errors.\n\n```rust\n# fn main() {\n    {\n        let x = 5;            // ----------+-- \'b\n                              //           |\n        let r = &x;           // --+-- \'a  |\n                              //   |       |\n        println!(\"r: {}\", r); //   |       |\n                              // --+       |\n    }                         // ----------+\n# }\n```\n\n<span class=\"caption\">Listing 10-19: A valid reference because the data has a\nlonger lifetime than the reference</span>\n\nHere, `x` has the lifetime `\'b`, which in this case is larger than `\'a`. This\nmeans `r` can reference `x` because Rust knows that the reference in `r` will\nalways be valid while `x` is valid.\n\nNow that you know where the lifetimes of references are and how Rust analyzes\nlifetimes to ensure references will always be valid, let’s explore generic\nlifetimes of parameters and return values in the context of functions.\n\n### Generic Lifetimes in Functions\n\nLet’s write a function that returns the longer of two string slices. This\nfunction will take two string slices and return a string slice. After we’ve\nimplemented the `longest` function, the code in Listing 10-20 should print `The\nlongest string is abcd`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\nfn main() {\n    let string1 = String::from(\"abcd\");\n    let string2 = \"xyz\";\n\n    let result = longest(string1.as_str(), string2);\n    println!(\"The longest string is {}\", result);\n}\n```\n\n<span class=\"caption\">Listing 10-20: A `main` function that calls the `longest`\nfunction to find the longer of two string slices</span>\n\nNote that we want the function to take string slices, which are references,\nbecause we don’t want the `longest` function to take ownership of its\nparameters. We want to allow the function to accept slices of a `String` (the\ntype stored in the variable `string1`) as well as string literals (which is\nwhat variable `string2` contains).\n\nRefer to the [“String Slices as Parameters”][string-slices-as-parameters]<!--\nignore --> section in Chapter 4 for more discussion about why the parameters we\nuse in Listing 10-20 are the ones we want.\n\nIf we try to implement the `longest` function as shown in Listing 10-21, it\nwon’t compile.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n# fn main() {\n#     let string1 = String::from(\"abcd\");\n#     let string2 = \"xyz\";\n# \n#     let result = longest(string1.as_str(), string2);\n#     println!(\"The longest string is {}\", result);\n# }\n# \nfn longest(x: &str, y: &str) -> &str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\n\n<span class=\"caption\">Listing 10-21: An implementation of the `longest`\nfunction that returns the longer of two string slices but does not yet\ncompile</span>\n\nInstead, we get the following error that talks about lifetimes:\n\n```text\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0106]: missing lifetime specifier\n --> src/main.rs:9:33\n  |\n9 | fn longest(x: &str, y: &str) -> &str {\n  |                                 ^ expected lifetime parameter\n  |\n  = help: this function\'s return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0106`.\nerror: could not compile `chapter10`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe help text reveals that the return type needs a generic lifetime parameter\non it because Rust can’t tell whether the reference being returned refers to\n`x` or `y`. Actually, we don’t know either, because the `if` block in the body\nof this function returns a reference to `x` and the `else` block returns a\nreference to `y`!\n\nWhen we’re defining this function, we don’t know the concrete values that will\nbe passed into this function, so we don’t know whether the `if` case or the\n`else` case will execute. We also don’t know the concrete lifetimes of the\nreferences that will be passed in, so we can’t look at the scopes as we did in\nListings 10-18 and 10-19 to determine whether the reference we return will\nalways be valid. The borrow checker can’t determine this either, because it\ndoesn’t know how the lifetimes of `x` and `y` relate to the lifetime of the\nreturn value. To fix this error, we’ll add generic lifetime parameters that\ndefine the relationship between the references so the borrow checker can\nperform its analysis.\n\n### Lifetime Annotation Syntax\n\nLifetime annotations don’t change how long any of the references live. Just\nas functions can accept any type when the signature specifies a generic type\nparameter, functions can accept references with any lifetime by specifying a\ngeneric lifetime parameter. Lifetime annotations describe the relationships of\nthe lifetimes of multiple references to each other without affecting the\nlifetimes.\n\nLifetime annotations have a slightly unusual syntax: the names of lifetime\nparameters must start with an apostrophe (`\'`) and are usually all lowercase and\nvery short, like generic types. Most people use the name `\'a`. We place\nlifetime parameter annotations after the `&` of a reference, using a space to\nseparate the annotation from the reference’s type.\n\nHere are some examples: a reference to an `i32` without a lifetime parameter, a\nreference to an `i32` that has a lifetime parameter named `\'a`, and a mutable\nreference to an `i32` that also has the lifetime `\'a`.\n\n```rust,ignore\n&i32        // a reference\n&\'a i32     // a reference with an explicit lifetime\n&\'a mut i32 // a mutable reference with an explicit lifetime\n```\n\nOne lifetime annotation by itself doesn’t have much meaning, because the\nannotations are meant to tell Rust how generic lifetime parameters of multiple\nreferences relate to each other. For example, let’s say we have a function with\nthe parameter `first` that is a reference to an `i32` with lifetime `\'a`. The\nfunction also has another parameter named `second` that is another reference to\nan `i32` that also has the lifetime `\'a`. The lifetime annotations indicate\nthat the references `first` and `second` must both live as long as that generic\nlifetime.\n\n### Lifetime Annotations in Function Signatures\n\nNow let’s examine lifetime annotations in the context of the `longest`\nfunction. As with generic type parameters, we need to declare generic lifetime\nparameters inside angle brackets between the function name and the parameter\nlist. The constraint we want to express in this signature is that all the\nreferences in the parameters and the return value must have the same lifetime.\nWe’ll name the lifetime `\'a` and then add it to each reference, as shown in\nListing 10-22.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# fn main() {\n#     let string1 = String::from(\"abcd\");\n#     let string2 = \"xyz\";\n# \n#     let result = longest(string1.as_str(), string2);\n#     println!(\"The longest string is {}\", result);\n# }\n# \nfn longest<\'a>(x: &\'a str, y: &\'a str) -> &\'a str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\n\n<span class=\"caption\">Listing 10-22: The `longest` function definition\nspecifying that all the references in the signature must have the same lifetime\n`\'a`</span>\n\nThis code should compile and produce the result we want when we use it with the\n`main` function in Listing 10-20.\n\nThe function signature now tells Rust that for some lifetime `\'a`, the function\ntakes two parameters, both of which are string slices that live at least as\nlong as lifetime `\'a`. The function signature also tells Rust that the string\nslice returned from the function will live at least as long as lifetime `\'a`.\nIn practice, it means that the lifetime of the reference returned by the\n`longest` function is the same as the smaller of the lifetimes of the\nreferences passed in. These constraints are what we want Rust to enforce.\nRemember, when we specify the lifetime parameters in this function signature,\nwe’re not changing the lifetimes of any values passed in or returned. Rather,\nwe’re specifying that the borrow checker should reject any values that don’t\nadhere to these constraints. Note that the `longest` function doesn’t need to\nknow exactly how long `x` and `y` will live, only that some scope can be\nsubstituted for `\'a` that will satisfy this signature.\n\nWhen annotating lifetimes in functions, the annotations go in the function\nsignature, not in the function body. Rust can analyze the code within the\nfunction without any help. However, when a function has references to or from\ncode outside that function, it becomes almost impossible for Rust to figure out\nthe lifetimes of the parameters or return values on its own. The lifetimes\nmight be different each time the function is called. This is why we need to\nannotate the lifetimes manually.\n\nWhen we pass concrete references to `longest`, the concrete lifetime that is\nsubstituted for `\'a` is the part of the scope of `x` that overlaps with the\nscope of `y`. In other words, the generic lifetime `\'a` will get the concrete\nlifetime that is equal to the smaller of the lifetimes of `x` and `y`. Because\nwe’ve annotated the returned reference with the same lifetime parameter `\'a`,\nthe returned reference will also be valid for the length of the smaller of the\nlifetimes of `x` and `y`.\n\nLet’s look at how the lifetime annotations restrict the `longest` function by\npassing in references that have different concrete lifetimes. Listing 10-23 is\na straightforward example.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let string1 = String::from(\"long string is long\");\n\n    {\n        let string2 = String::from(\"xyz\");\n        let result = longest(string1.as_str(), string2.as_str());\n        println!(\"The longest string is {}\", result);\n    }\n}\n# \n# fn longest<\'a>(x: &\'a str, y: &\'a str) -> &\'a str {\n#     if x.len() > y.len() {\n#         x\n#     } else {\n#         y\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 10-23: Using the `longest` function with\nreferences to `String` values that have different concrete lifetimes</span>\n\nIn this example, `string1` is valid until the end of the outer scope, `string2`\nis valid until the end of the inner scope, and `result` references something\nthat is valid until the end of the inner scope. Run this code, and you’ll see\nthat the borrow checker approves of this code; it will compile and print `The\nlongest string is long string is long`.\n\nNext, let’s try an example that shows that the lifetime of the reference in\n`result` must be the smaller lifetime of the two arguments. We’ll move the\ndeclaration of the `result` variable outside the inner scope but leave the\nassignment of the value to the `result` variable inside the scope with\n`string2`. Then we’ll move the `println!` that uses `result` outside the inner\nscope, after the inner scope has ended. The code in Listing 10-24 will not\ncompile.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn main() {\n    let string1 = String::from(\"long string is long\");\n    let result;\n    {\n        let string2 = String::from(\"xyz\");\n        result = longest(string1.as_str(), string2.as_str());\n    }\n    println!(\"The longest string is {}\", result);\n}\n# \n# fn longest<\'a>(x: &\'a str, y: &\'a str) -> &\'a str {\n#     if x.len() > y.len() {\n#         x\n#     } else {\n#         y\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 10-24: Attempting to use `result` after `string2`\nhas gone out of scope</span>\n\nWhen we try to compile this code, we’ll get this error:\n\n```text\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0597]: `string2` does not live long enough\n --> src/main.rs:6:44\n  |\n6 |         result = longest(string1.as_str(), string2.as_str());\n  |                                            ^^^^^^^ borrowed value does not live long enough\n7 |     }\n  |     - `string2` dropped here while still borrowed\n8 |     println!(\"The longest string is {}\", result);\n  |                                          ------ borrow later used here\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0597`.\nerror: could not compile `chapter10`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe error shows that for `result` to be valid for the `println!` statement,\n`string2` would need to be valid until the end of the outer scope. Rust knows\nthis because we annotated the lifetimes of the function parameters and return\nvalues using the same lifetime parameter `\'a`.\n\nAs humans, we can look at this code and see that `string1` is longer than\n`string2` and therefore `result` will contain a reference to `string1`.\nBecause `string1` has not gone out of scope yet, a reference to `string1` will\nstill be valid for the `println!` statement. However, the compiler can’t see\nthat the reference is valid in this case. We’ve told Rust that the lifetime of\nthe reference returned by the `longest` function is the same as the smaller of\nthe lifetimes of the references passed in. Therefore, the borrow checker\ndisallows the code in Listing 10-24 as possibly having an invalid reference.\n\nTry designing more experiments that vary the values and lifetimes of the\nreferences passed in to the `longest` function and how the returned reference\nis used. Make hypotheses about whether or not your experiments will pass the\nborrow checker before you compile; then check to see if you’re right!\n\n### Thinking in Terms of Lifetimes\n\nThe way in which you need to specify lifetime parameters depends on what your\nfunction is doing. For example, if we changed the implementation of the\n`longest` function to always return the first parameter rather than the longest\nstring slice, we wouldn’t need to specify a lifetime on the `y` parameter. The\nfollowing code will compile:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# fn main() {\n#     let string1 = String::from(\"abcd\");\n#     let string2 = \"efghijklmnopqrstuvwxyz\";\n# \n#     let result = longest(string1.as_str(), string2);\n#     println!(\"The longest string is {}\", result);\n# }\n# \nfn longest<\'a>(x: &\'a str, y: &str) -> &\'a str {\n    x\n}\n```\n\nIn this example, we’ve specified a lifetime parameter `\'a` for the parameter\n`x` and the return type, but not for the parameter `y`, because the lifetime of\n`y` does not have any relationship with the lifetime of `x` or the return value.\n\nWhen returning a reference from a function, the lifetime parameter for the\nreturn type needs to match the lifetime parameter for one of the parameters. If\nthe reference returned does *not* refer to one of the parameters, it must refer\nto a value created within this function, which would be a dangling reference\nbecause the value will go out of scope at the end of the function. Consider\nthis attempted implementation of the `longest` function that won’t compile:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n# fn main() {\n#     let string1 = String::from(\"abcd\");\n#     let string2 = \"xyz\";\n# \n#     let result = longest(string1.as_str(), string2);\n#     println!(\"The longest string is {}\", result);\n# }\n# \nfn longest<\'a>(x: &str, y: &str) -> &\'a str {\n    let result = String::from(\"really long string\");\n    result.as_str()\n}\n```\n\nHere, even though we’ve specified a lifetime parameter `\'a` for the return\ntype, this implementation will fail to compile because the return value\nlifetime is not related to the lifetime of the parameters at all. Here is the\nerror message we get:\n\n```text\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0515]: cannot return value referencing local variable `result`\n  --> src/main.rs:11:5\n   |\n11 |     result.as_str()\n   |     ------^^^^^^^^^\n   |     |\n   |     returns a value referencing data owned by the current function\n   |     `result` is borrowed here\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0515`.\nerror: could not compile `chapter10`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe problem is that `result` goes out of scope and gets cleaned up at the end\nof the `longest` function. We’re also trying to return a reference to `result`\nfrom the function. There is no way we can specify lifetime parameters that\nwould change the dangling reference, and Rust won’t let us create a dangling\nreference. In this case, the best fix would be to return an owned data type\nrather than a reference so the calling function is then responsible for\ncleaning up the value.\n\nUltimately, lifetime syntax is about connecting the lifetimes of various\nparameters and return values of functions. Once they’re connected, Rust has\nenough information to allow memory-safe operations and disallow operations that\nwould create dangling pointers or otherwise violate memory safety.\n\n### Lifetime Annotations in Struct Definitions\n\nSo far, we’ve only defined structs to hold owned types. It’s possible for\nstructs to hold references, but in that case we would need to add a lifetime\nannotation on every reference in the struct’s definition. Listing 10-25 has a\nstruct named `ImportantExcerpt` that holds a string slice.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nstruct ImportantExcerpt<\'a> {\n    part: &\'a str,\n}\n\nfn main() {\n    let novel = String::from(\"Call me Ishmael. Some years ago...\");\n    let first_sentence = novel.split(\'.\').next().expect(\"Could not find a \'.\'\");\n    let i = ImportantExcerpt {\n        part: first_sentence,\n    };\n}\n```\n\n<span class=\"caption\">Listing 10-25: A struct that holds a reference, so its\ndefinition needs a lifetime annotation</span>\n\nThis struct has one field, `part`, that holds a string slice, which is a\nreference. As with generic data types, we declare the name of the generic\nlifetime parameter inside angle brackets after the name of the struct so we can\nuse the lifetime parameter in the body of the struct definition. This\nannotation means an instance of `ImportantExcerpt` can’t outlive the reference\nit holds in its `part` field.\n\nThe `main` function here creates an instance of the `ImportantExcerpt` struct\nthat holds a reference to the first sentence of the `String` owned by the\nvariable `novel`. The data in `novel` exists before the `ImportantExcerpt`\ninstance is created. In addition, `novel` doesn’t go out of scope until after\nthe `ImportantExcerpt` goes out of scope, so the reference in the\n`ImportantExcerpt` instance is valid.\n\n### Lifetime Elision\n\nYou’ve learned that every reference has a lifetime and that you need to specify\nlifetime parameters for functions or structs that use references. However, in\nChapter 4 we had a function in Listing 4-9, which is shown again in Listing\n10-26, that compiled without lifetime annotations.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nfn first_word(s: &str) -> &str {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b\' \' {\n            return &s[0..i];\n        }\n    }\n\n    &s[..]\n}\n# \n# fn main() {\n#     let my_string = String::from(\"hello world\");\n# \n#     // first_word works on slices of `String`s\n#     let word = first_word(&my_string[..]);\n# \n#     let my_string_literal = \"hello world\";\n# \n#     // first_word works on slices of string literals\n#     let word = first_word(&my_string_literal[..]);\n# \n#     // Because string literals *are* string slices already,\n#     // this works too, without the slice syntax!\n#     let word = first_word(my_string_literal);\n# }\n```\n\n<span class=\"caption\">Listing 10-26: A function we defined in Listing 4-9 that\ncompiled without lifetime annotations, even though the parameter and return\ntype are references</span>\n\nThe reason this function compiles without lifetime annotations is historical:\nin early versions (pre-1.0) of Rust, this code wouldn’t have compiled because\nevery reference needed an explicit lifetime. At that time, the function\nsignature would have been written like this:\n\n```rust,ignore\nfn first_word<\'a>(s: &\'a str) -> &\'a str {\n```\n\nAfter writing a lot of Rust code, the Rust team found that Rust programmers\nwere entering the same lifetime annotations over and over in particular\nsituations. These situations were predictable and followed a few deterministic\npatterns. The developers programmed these patterns into the compiler’s code so\nthe borrow checker could infer the lifetimes in these situations and wouldn’t\nneed explicit annotations.\n\nThis piece of Rust history is relevant because it’s possible that more\ndeterministic patterns will emerge and be added to the compiler. In the future,\neven fewer lifetime annotations might be required.\n\nThe patterns programmed into Rust’s analysis of references are called the\n*lifetime elision rules*. These aren’t rules for programmers to follow; they’re\na set of particular cases that the compiler will consider, and if your code\nfits these cases, you don’t need to write the lifetimes explicitly.\n\nThe elision rules don’t provide full inference. If Rust deterministically\napplies the rules but there is still ambiguity as to what lifetimes the\nreferences have, the compiler won’t guess what the lifetime of the remaining\nreferences should be. In this case, instead of guessing, the compiler will give\nyou an error that you can resolve by adding the lifetime annotations that\nspecify how the references relate to each other.\n\nLifetimes on function or method parameters are called *input lifetimes*, and\nlifetimes on return values are called *output lifetimes*.\n\nThe compiler uses three rules to figure out what lifetimes references have when\nthere aren’t explicit annotations. The first rule applies to input lifetimes,\nand the second and third rules apply to output lifetimes. If the compiler gets\nto the end of the three rules and there are still references for which it can’t\nfigure out lifetimes, the compiler will stop with an error. These rules apply\nto `fn` definitions as well as `impl` blocks.\n\nThe first rule is that each parameter that is a reference gets its own lifetime\nparameter. In other words, a function with one parameter gets one lifetime\nparameter: `fn foo<\'a>(x: &\'a i32)`; a function with two parameters gets two\nseparate lifetime parameters: `fn foo<\'a, \'b>(x: &\'a i32, y: &\'b i32)`; and so\non.\n\nThe second rule is if there is exactly one input lifetime parameter, that\nlifetime is assigned to all output lifetime parameters: `fn foo<\'a>(x: &\'a i32)\n-> &\'a i32`.\n\nThe third rule is if there are multiple input lifetime parameters, but one of\nthem is `&self` or `&mut self` because this is a method, the lifetime of `self`\nis assigned to all output lifetime parameters. This third rule makes methods\nmuch nicer to read and write because fewer symbols are necessary.\n\nLet’s pretend we’re the compiler. We’ll apply these rules to figure out what\nthe lifetimes of the references in the signature of the `first_word` function\nin Listing 10-26 are. The signature starts without any lifetimes associated\nwith the references:\n\n```rust,ignore\nfn first_word(s: &str) -> &str {\n```\n\nThen the compiler applies the first rule, which specifies that each parameter\ngets its own lifetime. We’ll call it `\'a` as usual, so now the signature is\nthis:\n\n```rust,ignore\nfn first_word<\'a>(s: &\'a str) -> &str {\n```\n\nThe second rule applies because there is exactly one input lifetime. The second\nrule specifies that the lifetime of the one input parameter gets assigned to\nthe output lifetime, so the signature is now this:\n\n```rust,ignore\nfn first_word<\'a>(s: &\'a str) -> &\'a str {\n```\n\nNow all the references in this function signature have lifetimes, and the\ncompiler can continue its analysis without needing the programmer to annotate\nthe lifetimes in this function signature.\n\nLet’s look at another example, this time using the `longest` function that had\nno lifetime parameters when we started working with it in Listing 10-21:\n\n```rust,ignore\nfn longest(x: &str, y: &str) -> &str {\n```\n\nLet’s apply the first rule: each parameter gets its own lifetime. This time we\nhave two parameters instead of one, so we have two lifetimes:\n\n```rust,ignore\nfn longest<\'a, \'b>(x: &\'a str, y: &\'b str) -> &str {\n```\n\nYou can see that the second rule doesn’t apply because there is more than one\ninput lifetime. The third rule doesn’t apply either, because `longest` is a\nfunction rather than a method, so none of the parameters are `self`. After\nworking through all three rules, we still haven’t figured out what the return\ntype’s lifetime is. This is why we got an error trying to compile the code in\nListing 10-21: the compiler worked through the lifetime elision rules but still\ncouldn’t figure out all the lifetimes of the references in the signature.\n\nBecause the third rule really only applies in method signatures, we’ll look at\nlifetimes in that context next to see why the third rule means we don’t have to\nannotate lifetimes in method signatures very often.\n\n### Lifetime Annotations in Method Definitions\n\nWhen we implement methods on a struct with lifetimes, we use the same syntax as\nthat of generic type parameters shown in Listing 10-11. Where we declare and\nuse the lifetime parameters depends on whether they’re related to the struct\nfields or the method parameters and return values.\n\nLifetime names for struct fields always need to be declared after the `impl`\nkeyword and then used after the struct’s name, because those lifetimes are part\nof the struct’s type.\n\nIn method signatures inside the `impl` block, references might be tied to the\nlifetime of references in the struct’s fields, or they might be independent. In\naddition, the lifetime elision rules often make it so that lifetime annotations\naren’t necessary in method signatures. Let’s look at some examples using the\nstruct named `ImportantExcerpt` that we defined in Listing 10-25.\n\nFirst, we’ll use a method named `level` whose only parameter is a reference to\n`self` and whose return value is an `i32`, which is not a reference to anything:\n\n```rust\n# struct ImportantExcerpt<\'a> {\n#     part: &\'a str,\n# }\n# \nimpl<\'a> ImportantExcerpt<\'a> {\n    fn level(&self) -> i32 {\n        3\n    }\n}\n# \n# impl<\'a> ImportantExcerpt<\'a> {\n#     fn announce_and_return_part(&self, announcement: &str) -> &str {\n#         println!(\"Attention please: {}\", announcement);\n#         self.part\n#     }\n# }\n# \n# fn main() {\n#     let novel = String::from(\"Call me Ishmael. Some years ago...\");\n#     let first_sentence = novel.split(\'.\').next().expect(\"Could not find a \'.\'\");\n#     let i = ImportantExcerpt {\n#         part: first_sentence,\n#     };\n# }\n```\n\nThe lifetime parameter declaration after `impl` and its use after the type name\nare required, but we’re not required to annotate the lifetime of the reference\nto `self` because of the first elision rule.\n\nHere is an example where the third lifetime elision rule applies:\n\n```rust\n# struct ImportantExcerpt<\'a> {\n#     part: &\'a str,\n# }\n# \n# impl<\'a> ImportantExcerpt<\'a> {\n#     fn level(&self) -> i32 {\n#         3\n#     }\n# }\n# \nimpl<\'a> ImportantExcerpt<\'a> {\n    fn announce_and_return_part(&self, announcement: &str) -> &str {\n        println!(\"Attention please: {}\", announcement);\n        self.part\n    }\n}\n# \n# fn main() {\n#     let novel = String::from(\"Call me Ishmael. Some years ago...\");\n#     let first_sentence = novel.split(\'.\').next().expect(\"Could not find a \'.\'\");\n#     let i = ImportantExcerpt {\n#         part: first_sentence,\n#     };\n# }\n```\n\nThere are two input lifetimes, so Rust applies the first lifetime elision rule\nand gives both `&self` and `announcement` their own lifetimes. Then, because\none of the parameters is `&self`, the return type gets the lifetime of `&self`,\nand all lifetimes have been accounted for.\n\n### The Static Lifetime\n\nOne special lifetime we need to discuss is `\'static`, which means that this\nreference *can* live for the entire duration of the program. All string\nliterals have the `\'static` lifetime, which we can annotate as follows:\n\n```rust\nlet s: &\'static str = \"I have a static lifetime.\";\n```\n\nThe text of this string is stored directly in the program’s binary, which\nis always available. Therefore, the lifetime of all string literals is\n`\'static`.\n\nYou might see suggestions to use the `\'static` lifetime in error messages. But\nbefore specifying `\'static` as the lifetime for a reference, think about\nwhether the reference you have actually lives the entire lifetime of your\nprogram or not. You might consider whether you want it to live that long, even\nif it could. Most of the time, the problem results from attempting to create a\ndangling reference or a mismatch of the available lifetimes. In such cases, the\nsolution is fixing those problems, not specifying the `\'static` lifetime.\n\n## Generic Type Parameters, Trait Bounds, and Lifetimes Together\n\nLet’s briefly look at the syntax of specifying generic type parameters, trait\nbounds, and lifetimes all in one function!\n\n```rust\n# fn main() {\n#     let string1 = String::from(\"abcd\");\n#     let string2 = \"xyz\";\n# \n#     let result = longest_with_an_announcement(\n#         string1.as_str(),\n#         string2,\n#         \"Today is someone\'s birthday!\",\n#     );\n#     println!(\"The longest string is {}\", result);\n# }\n# \nuse std::fmt::Display;\n\nfn longest_with_an_announcement<\'a, T>(\n    x: &\'a str,\n    y: &\'a str,\n    ann: T,\n) -> &\'a str\nwhere\n    T: Display,\n{\n    println!(\"Announcement! {}\", ann);\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\n\nThis is the `longest` function from Listing 10-22 that returns the longer of\ntwo string slices. But now it has an extra parameter named `ann` of the generic\ntype `T`, which can be filled in by any type that implements the `Display`\ntrait as specified by the `where` clause. This extra parameter will be printed\nbefore the function compares the lengths of the string slices, which is why the\n`Display` trait bound is necessary. Because lifetimes are a type of generic,\nthe declarations of the lifetime parameter `\'a` and the generic type parameter\n`T` go in the same list inside the angle brackets after the function name.\n\n## Summary\n\nWe covered a lot in this chapter! Now that you know about generic type\nparameters, traits and trait bounds, and generic lifetime parameters, you’re\nready to write code without repetition that works in many different situations.\nGeneric type parameters let you apply the code to different types. Traits and\ntrait bounds ensure that even though the types are generic, they’ll have the\nbehavior the code needs. You learned how to use lifetime annotations to ensure\nthat this flexible code won’t have any dangling references. And all of this\nanalysis happens at compile time, which doesn’t affect runtime performance!\n\nBelieve it or not, there is much more to learn on the topics we discussed in\nthis chapter: Chapter 17 discusses trait objects, which are another way to use\ntraits. Chapter 19 covers more complex scenarios involving lifetime annotations\nas well as some advanced type system features. But next, you’ll learn how to\nwrite tests in Rust so you can make sure your code is working the way it should.\n\n[references-and-borrowing]:\nch04-02-references-and-borrowing.html#references-and-borrowing\n[string-slices-as-parameters]:\nch04-03-slices.html#string-slices-as-parameters\n", number: Some(SectionNumber([10, 3])), sub_items: [], path: "ch10-03-lifetime-syntax.md", parent_names: ["Generic Types, Traits, and Lifetimes"] })], path: "ch10-00-generics.md", parent_names: [] }), Chapter(Chapter { name: "Writing Automated Tests", content: "# Writing Automated Tests\n\nIn his 1972 essay “The Humble Programmer,” Edsger W. Dijkstra said that\n“Program testing can be a very effective way to show the presence of bugs, but\nit is hopelessly inadequate for showing their absence.” That doesn’t mean we\nshouldn’t try to test as much as we can!\n\nCorrectness in our programs is the extent to which our code does what we intend\nit to do. Rust is designed with a high degree of concern about the correctness\nof programs, but correctness is complex and not easy to prove. Rust’s type\nsystem shoulders a huge part of this burden, but the type system cannot catch\nevery kind of incorrectness. As such, Rust includes support for writing\nautomated software tests within the language.\n\nAs an example, say we write a function called `add_two` that adds 2 to whatever\nnumber is passed to it. This function’s signature accepts an integer as a\nparameter and returns an integer as a result. When we implement and compile\nthat function, Rust does all the type checking and borrow checking that you’ve\nlearned so far to ensure that, for instance, we aren’t passing a `String` value\nor an invalid reference to this function. But Rust *can’t* check that this\nfunction will do precisely what we intend, which is return the parameter plus 2\nrather than, say, the parameter plus 10 or the parameter minus 50! That’s where\ntests come in.\n\nWe can write tests that assert, for example, that when we pass `3` to the\n`add_two` function, the returned value is `5`. We can run these tests whenever\nwe make changes to our code to make sure any existing correct behavior has not\nchanged.\n\nTesting is a complex skill: although we can’t cover every detail about how to\nwrite good tests in one chapter, we’ll discuss the mechanics of Rust’s testing\nfacilities. We’ll talk about the annotations and macros available to you when\nwriting your tests, the default behavior and options provided for running your\ntests, and how to organize tests into unit tests and integration tests.\n", number: Some(SectionNumber([11])), sub_items: [Chapter(Chapter { name: "How to Write Tests", content: "## How to Write Tests\n\nTests are Rust functions that verify that the non-test code is functioning in\nthe expected manner. The bodies of test functions typically perform these three\nactions:\n\n1. Set up any needed data or state.\n2. Run the code you want to test.\n3. Assert the results are what you expect.\n\nLet’s look at the features Rust provides specifically for writing tests that\ntake these actions, which include the `test` attribute, a few macros, and the\n`should_panic` attribute.\n\n### The Anatomy of a Test Function\n\nAt its simplest, a test in Rust is a function that’s annotated with the `test`\nattribute. Attributes are metadata about pieces of Rust code; one example is\nthe `derive` attribute we used with structs in Chapter 5. To change a function\ninto a test function, add `#[test]` on the line before `fn`. When you run your\ntests with the `cargo test` command, Rust builds a test runner binary that runs\nthe functions annotated with the `test` attribute and reports on whether each\ntest function passes or fails.\n\nWhen we make a new library project with Cargo, a test module with a test\nfunction in it is automatically generated for us. This module helps you start\nwriting your tests so you don’t have to look up the exact structure and syntax\nof test functions every time you start a new project. You can add as many\nadditional test functions and as many test modules as you want!\n\nWe’ll explore some aspects of how tests work by experimenting with the template\ntest generated for us without actually testing any code. Then we’ll write some\nreal-world tests that call some code that we’ve written and assert that its\nbehavior is correct.\n\nLet’s create a new library project called `adder`:\n\n```text\n$ cargo new adder --lib\n     Created library `adder` project\n$ cd adder\n```\n\nThe contents of the *src/lib.rs* file in your `adder` library should look like\nListing 11-1.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn it_works() {\n        assert_eq!(2 + 2, 4);\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 11-1: The test module and function generated\nautomatically by `cargo new`</span>\n\nFor now, let’s ignore the top two lines and focus on the function to see how it\nworks. Note the `#[test]` annotation before the `fn` line: this attribute\nindicates this is a test function, so the test runner knows to treat this\nfunction as a test. We could also have non-test functions in the `tests` module\nto help set up common scenarios or perform common operations, so we need to\nindicate which functions are tests by using the `#[test]` attribute.\n\nThe function body uses the `assert_eq!` macro to assert that 2 + 2 equals 4.\nThis assertion serves as an example of the format for a typical test. Let’s run\nit to see that this test passes.\n\nThe `cargo test` command runs all tests in our project, as shown in Listing\n11-2.\n\n```text\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.57s\n     Running target/debug/deps/adder-92948b65e88960b4\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\n<span class=\"caption\">Listing 11-2: The output from running the automatically\ngenerated test</span>\n\nCargo compiled and ran the test. After the `Compiling`, `Finished`, and\n`Running` lines is the line `running 1 test`. The next line shows the name\nof the generated test function, called `it_works`, and the result of running\nthat test, `ok`. The overall summary of running the tests appears next. The\ntext `test result: ok.` means that all the tests passed, and the portion that\nreads `1 passed; 0 failed` totals the number of tests that passed or failed.\n\nBecause we don’t have any tests we’ve marked as ignored, the summary shows `0\nignored`. We also haven’t filtered the tests being run, so the end of the\nsummary shows `0 filtered out`. We’ll talk about ignoring and filtering out\ntests in the next section, [“Controlling How Tests Are\nRun.”][controlling-how-tests-are-run]<!-- ignore -->\n\nThe `0 measured` statistic is for benchmark tests that measure performance.\nBenchmark tests are, as of this writing, only available in nightly Rust. See\n[the documentation about benchmark tests][bench] to learn more.\n\n[bench]: ../unstable-book/library-features/test.html\n\nThe next part of the test output, which starts with `Doc-tests adder`, is for\nthe results of any documentation tests. We don’t have any documentation tests\nyet, but Rust can compile any code examples that appear in our API\ndocumentation. This feature helps us keep our docs and our code in sync! We’ll\ndiscuss how to write documentation tests in the [“Documentation Comments as\nTests”][doc-comments]<!-- ignore --> section of Chapter 14. For now, we’ll\nignore the `Doc-tests` output.\n\nLet’s change the name of our test to see how that changes the test output.\nChange the `it_works` function to a different name, such as `exploration`, like\nso:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn exploration() {\n        assert_eq!(2 + 2, 4);\n    }\n}\n# \n# fn main() {}\n```\n\nThen run `cargo test` again. The output now shows `exploration` instead of\n`it_works`:\n\n```text\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.59s\n     Running target/debug/deps/adder-92948b65e88960b4\n\nrunning 1 test\ntest tests::exploration ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\nLet’s add another test, but this time we’ll make a test that fails! Tests fail\nwhen something in the test function panics. Each test is run in a new thread,\nand when the main thread sees that a test thread has died, the test is marked\nas failed. We talked about the simplest way to cause a panic in Chapter 9,\nwhich is to call the `panic!` macro. Enter the new test, `another`, so your\n*src/lib.rs* file looks like Listing 11-3.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,panics\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn exploration() {\n        assert_eq!(2 + 2, 4);\n    }\n\n    #[test]\n    fn another() {\n        panic!(\"Make this test fail\");\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 11-3: Adding a second test that will fail because\nwe call the `panic!` macro</span>\n\nRun the tests again using `cargo test`. The output should look like Listing\n11-4, which shows that our `exploration` test passed and `another` failed.\n\n```text\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.72s\n     Running target/debug/deps/adder-92948b65e88960b4\n\nrunning 2 tests\ntest tests::another ... FAILED\ntest tests::exploration ... ok\n\nfailures:\n\n---- tests::another stdout ----\nthread \'main\' panicked at \'Make this test fail\', src/lib.rs:10:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\n\nfailures:\n    tests::another\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass \'--lib\'\n```\n\n<span class=\"caption\">Listing 11-4: Test results when one test passes and one\ntest fails</span>\n\nInstead of `ok`, the line `test tests::another` shows `FAILED`. Two new\nsections appear between the individual results and the summary: the first\nsection displays the detailed reason for each test failure. In this case,\n`another` failed because it `panicked at \'Make this test fail\'`, which happened\non line 10 in the *src/lib.rs* file. The next section lists just the names of\nall the failing tests, which is useful when there are lots of tests and lots of\ndetailed failing test output. We can use the name of a failing test to run just\nthat test to more easily debug it; we’ll talk more about ways to run tests in\nthe [“Controlling How Tests Are Run”][controlling-how-tests-are-run]<!-- ignore\n--> section.\n\nThe summary line displays at the end: overall, our test result is `FAILED`.\nWe had one test pass and one test fail.\n\nNow that you’ve seen what the test results look like in different scenarios,\nlet’s look at some macros other than `panic!` that are useful in tests.\n\n### Checking Results with the `assert!` Macro\n\nThe `assert!` macro, provided by the standard library, is useful when you want\nto ensure that some condition in a test evaluates to `true`. We give the\n`assert!` macro an argument that evaluates to a Boolean. If the value is\n`true`, `assert!` does nothing and the test passes. If the value is `false`,\nthe `assert!` macro calls the `panic!` macro, which causes the test to fail.\nUsing the `assert!` macro helps us check that our code is functioning in the\nway we intend.\n\nIn Chapter 5, Listing 5-15, we used a `Rectangle` struct and a `can_hold`\nmethod, which are repeated here in Listing 11-5. Let’s put this code in the\n*src/lib.rs* file and write some tests for it using the `assert!` macro.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width > other.width && self.height > other.height\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 11-5: Using the `Rectangle` struct and its\n`can_hold` method from Chapter 5</span>\n\nThe `can_hold` method returns a Boolean, which means it’s a perfect use case\nfor the `assert!` macro. In Listing 11-6, we write a test that exercises the\n`can_hold` method by creating a `Rectangle` instance that has a width of 8 and\na height of 7 and asserting that it can hold another `Rectangle` instance that\nhas a width of 5 and a height of 1.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# #[derive(Debug)]\n# struct Rectangle {\n#     width: u32,\n#     height: u32,\n# }\n# \n# impl Rectangle {\n#     fn can_hold(&self, other: &Rectangle) -> bool {\n#         self.width > other.width && self.height > other.height\n#     }\n# }\n# \n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn larger_can_hold_smaller() {\n        let larger = Rectangle {\n            width: 8,\n            height: 7,\n        };\n        let smaller = Rectangle {\n            width: 5,\n            height: 1,\n        };\n\n        assert!(larger.can_hold(&smaller));\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 11-6: A test for `can_hold` that checks whether a\nlarger rectangle can indeed hold a smaller rectangle</span>\n\nNote that we’ve added a new line inside the `tests` module: `use super::*;`.\nThe `tests` module is a regular module that follows the usual visibility rules\nwe covered in Chapter 7 in the [“Paths for Referring to an Item in the Module\nTree”][paths-for-referring-to-an-item-in-the-module-tree]<!-- ignore -->\nsection. Because the `tests` module is an inner module, we need to bring the\ncode under test in the outer module into the scope of the inner module. We use\na glob here so anything we define in the outer module is available to this\n`tests` module.\n\nWe’ve named our test `larger_can_hold_smaller`, and we’ve created the two\n`Rectangle` instances that we need. Then we called the `assert!` macro and\npassed it the result of calling `larger.can_hold(&smaller)`. This expression\nis supposed to return `true`, so our test should pass. Let’s find out!\n\n```text\n$ cargo test\n   Compiling rectangle v0.1.0 (file:///projects/rectangle)\n    Finished test [unoptimized + debuginfo] target(s) in 0.66s\n     Running target/debug/deps/rectangle-6584c4561e48942e\n\nrunning 1 test\ntest tests::larger_can_hold_smaller ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests rectangle\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\nIt does pass! Let’s add another test, this time asserting that a smaller\nrectangle cannot hold a larger rectangle:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# #[derive(Debug)]\n# struct Rectangle {\n#     width: u32,\n#     height: u32,\n# }\n# \n# impl Rectangle {\n#     fn can_hold(&self, other: &Rectangle) -> bool {\n#         self.width > other.width && self.height > other.height\n#     }\n# }\n# \n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn larger_can_hold_smaller() {\n        // --snip--\n#         let larger = Rectangle {\n#             width: 8,\n#             height: 7,\n#         };\n#         let smaller = Rectangle {\n#             width: 5,\n#             height: 1,\n#         };\n# \n#         assert!(larger.can_hold(&smaller));\n    }\n\n    #[test]\n    fn smaller_cannot_hold_larger() {\n        let larger = Rectangle {\n            width: 8,\n            height: 7,\n        };\n        let smaller = Rectangle {\n            width: 5,\n            height: 1,\n        };\n\n        assert!(!smaller.can_hold(&larger));\n    }\n}\n# \n# fn main() {}\n```\n\nBecause the correct result of the `can_hold` function in this case is `false`,\nwe need to negate that result before we pass it to the `assert!` macro. As a\nresult, our test will pass if `can_hold` returns `false`:\n\n```text\n$ cargo test\n   Compiling rectangle v0.1.0 (file:///projects/rectangle)\n    Finished test [unoptimized + debuginfo] target(s) in 0.66s\n     Running target/debug/deps/rectangle-6584c4561e48942e\n\nrunning 2 tests\ntest tests::larger_can_hold_smaller ... ok\ntest tests::smaller_cannot_hold_larger ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests rectangle\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\nTwo tests that pass! Now let’s see what happens to our test results when we\nintroduce a bug in our code. Let’s change the implementation of the `can_hold`\nmethod by replacing the greater than sign with a less than sign when it\ncompares the widths:\n\n```rust,not_desired_behavior\n# #[derive(Debug)]\n# struct Rectangle {\n#     width: u32,\n#     height: u32,\n# }\n# \n// --snip--\nimpl Rectangle {\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width < other.width && self.height > other.height\n    }\n}\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn larger_can_hold_smaller() {\n#         let larger = Rectangle {\n#             width: 8,\n#             height: 7,\n#         };\n#         let smaller = Rectangle {\n#             width: 5,\n#             height: 1,\n#         };\n# \n#         assert!(larger.can_hold(&smaller));\n#     }\n# \n#     #[test]\n#     fn smaller_cannot_hold_larger() {\n#         let larger = Rectangle {\n#             width: 8,\n#             height: 7,\n#         };\n#         let smaller = Rectangle {\n#             width: 5,\n#             height: 1,\n#         };\n# \n#         assert!(!smaller.can_hold(&larger));\n#     }\n# }\n# \n# fn main() {}\n```\n\nRunning the tests now produces the following:\n\n```text\n$ cargo test\n   Compiling rectangle v0.1.0 (file:///projects/rectangle)\n    Finished test [unoptimized + debuginfo] target(s) in 0.66s\n     Running target/debug/deps/rectangle-6584c4561e48942e\n\nrunning 2 tests\ntest tests::larger_can_hold_smaller ... FAILED\ntest tests::smaller_cannot_hold_larger ... ok\n\nfailures:\n\n---- tests::larger_can_hold_smaller stdout ----\nthread \'main\' panicked at \'assertion failed: larger.can_hold(&smaller)\', src/lib.rs:28:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\n\nfailures:\n    tests::larger_can_hold_smaller\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass \'--lib\'\n```\n\nOur tests caught the bug! Because `larger.width` is 8 and `smaller.width` is\n5, the comparison of the widths in `can_hold` now returns `false`: 8 is not\nless than 5.\n\n### Testing Equality with the `assert_eq!` and `assert_ne!` Macros\n\nA common way to test functionality is to compare the result of the code under\ntest to the value you expect the code to return to make sure they’re equal. You\ncould do this using the `assert!` macro and passing it an expression using the\n`==` operator. However, this is such a common test that the standard library\nprovides a pair of macros—`assert_eq!` and `assert_ne!`—to perform this test\nmore conveniently. These macros compare two arguments for equality or\ninequality, respectively. They’ll also print the two values if the assertion\nfails, which makes it easier to see *why* the test failed; conversely, the\n`assert!` macro only indicates that it got a `false` value for the `==`\nexpression, not the values that lead to the `false` value.\n\nIn Listing 11-7, we write a function named `add_two` that adds `2` to its\nparameter and returns the result. Then we test this function using the\n`assert_eq!` macro.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub fn add_two(a: i32) -> i32 {\n    a + 2\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn it_adds_two() {\n        assert_eq!(4, add_two(2));\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 11-7: Testing the function `add_two` using the\n`assert_eq!` macro</span>\n\nLet’s check that it passes!\n\n```text\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.58s\n     Running target/debug/deps/adder-92948b65e88960b4\n\nrunning 1 test\ntest tests::it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\nThe first argument we gave to the `assert_eq!` macro, `4`, is equal to the\nresult of calling `add_two(2)`. The line for this test is `test\ntests::it_adds_two ... ok`, and the `ok` text indicates that our test passed!\n\nLet’s introduce a bug into our code to see what it looks like when a test that\nuses `assert_eq!` fails. Change the implementation of the `add_two` function to\ninstead add `3`:\n\n```rust,not_desired_behavior\npub fn add_two(a: i32) -> i32 {\n    a + 3\n}\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn it_adds_two() {\n#         assert_eq!(4, add_two(2));\n#     }\n# }\n# \n# fn main() {}\n```\n\nRun the tests again:\n\n```text\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.61s\n     Running target/debug/deps/adder-92948b65e88960b4\n\nrunning 1 test\ntest tests::it_adds_two ... FAILED\n\nfailures:\n\n---- tests::it_adds_two stdout ----\nthread \'main\' panicked at \'assertion failed: `(left == right)`\n  left: `4`,\n right: `5`\', src/lib.rs:11:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\n\nfailures:\n    tests::it_adds_two\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass \'--lib\'\n```\n\nOur test caught the bug! The `it_adds_two` test failed, displaying the message\n`` assertion failed: `(left == right)` `` and showing that `left` was `4` and\n`right` was `5`. This message is useful and helps us start debugging: it means\nthe `left` argument to `assert_eq!` was `4` but the `right` argument, where we\nhad `add_two(2)`, was `5`.\n\nNote that in some languages and test frameworks, the parameters to the\nfunctions that assert two values are equal are called `expected` and `actual`,\nand the order in which we specify the arguments matters. However, in Rust,\nthey’re called `left` and `right`, and the order in which we specify the value\nwe expect and the value that the code under test produces doesn’t matter. We\ncould write the assertion in this test as `assert_eq!(add_two(2), 4)`, which\nwould result in a failure message that displays `` assertion failed: `(left ==\nright)` `` and that `left` was `5` and `right` was `4`.\n\nThe `assert_ne!` macro will pass if the two values we give it are not equal and\nfail if they’re equal. This macro is most useful for cases when we’re not sure\nwhat a value *will* be, but we know what the value definitely *won’t* be if our\ncode is functioning as we intend. For example, if we’re testing a function that\nis guaranteed to change its input in some way, but the way in which the input\nis changed depends on the day of the week that we run our tests, the best thing\nto assert might be that the output of the function is not equal to the input.\n\nUnder the surface, the `assert_eq!` and `assert_ne!` macros use the operators\n`==` and `!=`, respectively. When the assertions fail, these macros print their\narguments using debug formatting, which means the values being compared must\nimplement the `PartialEq` and `Debug` traits. All the primitive types and most\nof the standard library types implement these traits. For structs and enums\nthat you define, you’ll need to implement `PartialEq` to assert that values of\nthose types are equal or not equal. You’ll need to implement `Debug` to print\nthe values when the assertion fails. Because both traits are derivable traits,\nas mentioned in Listing 5-12 in Chapter 5, this is usually as straightforward\nas adding the `#[derive(PartialEq, Debug)]` annotation to your struct or enum\ndefinition. See Appendix C, [“Derivable Traits,”][derivable-traits]<!-- ignore\n--> for more details about these and other derivable traits.\n\n### Adding Custom Failure Messages\n\nYou can also add a custom message to be printed with the failure message as\noptional arguments to the `assert!`, `assert_eq!`, and `assert_ne!` macros. Any\narguments specified after the one required argument to `assert!` or the two\nrequired arguments to `assert_eq!` and `assert_ne!` are passed along to the\n`format!` macro (discussed in Chapter 8 in the [“Concatenation with the `+`\nOperator or the `format!`\nMacro”][concatenation-with-the--operator-or-the-format-macro]<!-- ignore -->\nsection), so you can pass a format string that contains `{}` placeholders and\nvalues to go in those placeholders. Custom messages are useful to document\nwhat an assertion means; when a test fails, you’ll have a better idea of what\nthe problem is with the code.\n\nFor example, let’s say we have a function that greets people by name and we\nwant to test that the name we pass into the function appears in the output:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub fn greeting(name: &str) -> String {\n    format!(\"Hello {}!\", name)\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn greeting_contains_name() {\n        let result = greeting(\"Carol\");\n        assert!(result.contains(\"Carol\"));\n    }\n}\n# \n# fn main() {}\n```\n\nThe requirements for this program haven’t been agreed upon yet, and we’re\npretty sure the `Hello` text at the beginning of the greeting will change. We\ndecided we don’t want to have to update the test when the requirements change,\nso instead of checking for exact equality to the value returned from the\n`greeting` function, we’ll just assert that the output contains the text of the\ninput parameter.\n\nLet’s introduce a bug into this code by changing `greeting` to not include\n`name` to see what this test failure looks like:\n\n```rust,not_desired_behavior\npub fn greeting(name: &str) -> String {\n    String::from(\"Hello!\")\n}\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn greeting_contains_name() {\n#         let result = greeting(\"Carol\");\n#         assert!(result.contains(\"Carol\"));\n#     }\n# }\n# \n# fn main() {}\n```\n\nRunning this test produces the following:\n\n```text\n$ cargo test\n   Compiling greeter v0.1.0 (file:///projects/greeter)\n    Finished test [unoptimized + debuginfo] target(s) in 0.91s\n     Running target/debug/deps/greeter-170b942eb5bf5e3a\n\nrunning 1 test\ntest tests::greeting_contains_name ... FAILED\n\nfailures:\n\n---- tests::greeting_contains_name stdout ----\nthread \'main\' panicked at \'assertion failed: result.contains(\"Carol\")\', src/lib.rs:12:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\n\nfailures:\n    tests::greeting_contains_name\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass \'--lib\'\n```\n\nThis result just indicates that the assertion failed and which line the\nassertion is on. A more useful failure message in this case would print the\nvalue we got from the `greeting` function. Let’s change the test function,\ngiving it a custom failure message made from a format string with a placeholder\nfilled in with the actual value we got from the `greeting` function:\n\n```rust,ignore\n# pub fn greeting(name: &str) -> String {\n#     String::from(\"Hello!\")\n# }\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n    #[test]\n    fn greeting_contains_name() {\n        let result = greeting(\"Carol\");\n        assert!(\n            result.contains(\"Carol\"),\n            \"Greeting did not contain name, value was `{}`\",\n            result\n        );\n    }\n# }\n```\n\nNow when we run the test, we’ll get a more informative error message:\n\n```text\n$ cargo test\n   Compiling greeter v0.1.0 (file:///projects/greeter)\n    Finished test [unoptimized + debuginfo] target(s) in 0.93s\n     Running target/debug/deps/greeter-170b942eb5bf5e3a\n\nrunning 1 test\ntest tests::greeting_contains_name ... FAILED\n\nfailures:\n\n---- tests::greeting_contains_name stdout ----\nthread \'main\' panicked at \'Greeting did not contain name, value was `Hello!`\', src/lib.rs:12:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\n\nfailures:\n    tests::greeting_contains_name\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass \'--lib\'\n```\n\nWe can see the value we actually got in the test output, which would help us\ndebug what happened instead of what we were expecting to happen.\n\n### Checking for Panics with `should_panic`\n\nIn addition to checking that our code returns the correct values we expect,\nit’s also important to check that our code handles error conditions as we\nexpect. For example, consider the `Guess` type that we created in Chapter 9,\nListing 9-10. Other code that uses `Guess` depends on the guarantee that `Guess`\ninstances will contain only values between 1 and 100. We can write a test that\nensures that attempting to create a `Guess` instance with a value outside that\nrange panics.\n\nWe do this by adding another attribute, `should_panic`, to our test function.\nThis attribute makes a test pass if the code inside the function panics; the\ntest will fail if the code inside the function doesn’t panic.\n\nListing 11-8 shows a test that checks that the error conditions of `Guess::new`\nhappen when we expect them to.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub struct Guess {\n    value: i32,\n}\n\nimpl Guess {\n    pub fn new(value: i32) -> Guess {\n        if value < 1 || value > 100 {\n            panic!(\"Guess value must be between 1 and 100, got {}.\", value);\n        }\n\n        Guess { value }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    #[should_panic]\n    fn greater_than_100() {\n        Guess::new(200);\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 11-8: Testing that a condition will cause a\n`panic!`</span>\n\nWe place the `#[should_panic]` attribute after the `#[test]` attribute and\nbefore the test function it applies to. Let’s look at the result when this test\npasses:\n\n```text\n$ cargo test\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished test [unoptimized + debuginfo] target(s) in 0.58s\n     Running target/debug/deps/guessing_game-57d70c3acb738f4d\n\nrunning 1 test\ntest tests::greater_than_100 ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests guessing_game\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\nLooks good! Now let’s introduce a bug in our code by removing the condition\nthat the `new` function will panic if the value is greater than 100:\n\n```rust,not_desired_behavior\n# pub struct Guess {\n#     value: i32,\n# }\n# \n// --snip--\nimpl Guess {\n    pub fn new(value: i32) -> Guess {\n        if value < 1 {\n            panic!(\"Guess value must be between 1 and 100, got {}.\", value);\n        }\n\n        Guess { value }\n    }\n}\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     #[should_panic]\n#     fn greater_than_100() {\n#         Guess::new(200);\n#     }\n# }\n# \n# fn main() {}\n```\n\nWhen we run the test in Listing 11-8, it will fail:\n\n```text\n$ cargo test\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished test [unoptimized + debuginfo] target(s) in 0.62s\n     Running target/debug/deps/guessing_game-57d70c3acb738f4d\n\nrunning 1 test\ntest tests::greater_than_100 ... FAILED\n\nfailures:\n\n---- tests::greater_than_100 stdout ----\nnote: test did not panic as expected\n\nfailures:\n    tests::greater_than_100\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass \'--lib\'\n```\n\nWe don’t get a very helpful message in this case, but when we look at the test\nfunction, we see that it’s annotated with `#[should_panic]`. The failure we got\nmeans that the code in the test function did not cause a panic.\n\nTests that use `should_panic` can be imprecise because they only indicate that\nthe code has caused some panic. A `should_panic` test would pass even if the\ntest panics for a different reason from the one we were expecting to happen. To\nmake `should_panic` tests more precise, we can add an optional `expected`\nparameter to the `should_panic` attribute. The test harness will make sure that\nthe failure message contains the provided text. For example, consider the\nmodified code for `Guess` in Listing 11-9 where the `new` function panics with\ndifferent messages depending on whether the value is too small or too large.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub struct Guess {\n#     value: i32,\n# }\n# \n// --snip--\nimpl Guess {\n    pub fn new(value: i32) -> Guess {\n        if value < 1 {\n            panic!(\n                \"Guess value must be greater than or equal to 1, got {}.\",\n                value\n            );\n        } else if value > 100 {\n            panic!(\n                \"Guess value must be less than or equal to 100, got {}.\",\n                value\n            );\n        }\n\n        Guess { value }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    #[should_panic(expected = \"Guess value must be less than or equal to 100\")]\n    fn greater_than_100() {\n        Guess::new(200);\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 11-9: Testing that a condition will cause a\n`panic!` with a particular panic message</span>\n\nThis test will pass because the value we put in the `should_panic` attribute’s\n`expected` parameter is a substring of the message that the `Guess::new`\nfunction panics with. We could have specified the entire panic message that we\nexpect, which in this case would be `Guess value must be less than or equal to\n100, got 200.` What you choose to specify in the expected parameter for\n`should_panic` depends on how much of the panic message is unique or dynamic\nand how precise you want your test to be. In this case, a substring of the\npanic message is enough to ensure that the code in the test function executes\nthe `else if value > 100` case.\n\nTo see what happens when a `should_panic` test with an `expected` message\nfails, let’s again introduce a bug into our code by swapping the bodies of the\n`if value < 1` and the `else if value > 100` blocks:\n\n```rust,ignore,not_desired_behavior\n# pub struct Guess {\n#     value: i32,\n# }\n# \n# impl Guess {\n#     pub fn new(value: i32) -> Guess {\n        if value < 1 {\n            panic!(\n                \"Guess value must be less than or equal to 100, got {}.\",\n                value\n            );\n        } else if value > 100 {\n            panic!(\n                \"Guess value must be greater than or equal to 1, got {}.\",\n                value\n            );\n        }\n# \n#         Guess { value }\n#     }\n# }\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     #[should_panic(expected = \"Guess value must be less than or equal to 100\")]\n#     fn greater_than_100() {\n#         Guess::new(200);\n#     }\n# }\n```\n\nThis time when we run the `should_panic` test, it will fail:\n\n```text\n$ cargo test\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished test [unoptimized + debuginfo] target(s) in 0.66s\n     Running target/debug/deps/guessing_game-57d70c3acb738f4d\n\nrunning 1 test\ntest tests::greater_than_100 ... FAILED\n\nfailures:\n\n---- tests::greater_than_100 stdout ----\nthread \'main\' panicked at \'Guess value must be greater than or equal to 1, got 200.\', src/lib.rs:13:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\nnote: panic did not contain expected string\n      panic message: `\"Guess value must be greater than or equal to 1, got 200.\"`,\n expected substring: `\"Guess value must be less than or equal to 100\"`\n\nfailures:\n    tests::greater_than_100\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass \'--lib\'\n```\n\nThe failure message indicates that this test did indeed panic as we expected,\nbut the panic message did not include the expected string `\'Guess value must be\nless than or equal to 100\'`. The panic message that we did get in this case was\n`Guess value must be greater than or equal to 1, got 200.` Now we can start\nfiguring out where our bug is!\n\n### Using `Result<T, E>` in Tests\n\nSo far, we’ve written tests that panic when they fail. We can also write tests\nthat use `Result<T, E>`! Here’s the test from Listing 11-1, rewritten to use\n`Result<T, E>` and return an `Err` instead of panicking:\n\n```rust\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn it_works() -> Result<(), String> {\n        if 2 + 2 == 4 {\n            Ok(())\n        } else {\n            Err(String::from(\"two plus two does not equal four\"))\n        }\n    }\n}\n```\n\nThe `it_works` function now has a return type, `Result<(), String>`. In the\nbody of the function, rather than calling the `assert_eq!` macro, we return\n`Ok(())` when the test passes and an `Err` with a `String` inside when the test\nfails.\n\nWriting tests so they return a `Result<T, E>` enables you to use the question\nmark operator in the body of tests, which can be a convenient way to write\ntests that should fail if any operation within them returns an `Err` variant.\n\nYou can’t use the `#[should_panic]` annotation on tests that use `Result<T,\nE>`. Instead, you should return an `Err` value directly when the test should\nfail.\n\nNow that you know several ways to write tests, let’s look at what is happening\nwhen we run our tests and explore the different options we can use with `cargo\ntest`.\n\n[concatenation-with-the--operator-or-the-format-macro]:\nch08-02-strings.html#concatenation-with-the--operator-or-the-format-macro\n[controlling-how-tests-are-run]:\nch11-02-running-tests.html#controlling-how-tests-are-run\n[derivable-traits]: appendix-03-derivable-traits.html\n[doc-comments]: ch14-02-publishing-to-crates-io.html#documentation-comments-as-tests\n[paths-for-referring-to-an-item-in-the-module-tree]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\n", number: Some(SectionNumber([11, 1])), sub_items: [], path: "ch11-01-writing-tests.md", parent_names: ["Writing Automated Tests"] }), Chapter(Chapter { name: "Controlling How Tests Are Run", content: "## Controlling How Tests Are Run\n\nJust as `cargo run` compiles your code and then runs the resulting binary,\n`cargo test` compiles your code in test mode and runs the resulting test\nbinary. You can specify command line options to change the default behavior of\n`cargo test`. For example, the default behavior of the binary produced by\n`cargo test` is to run all the tests in parallel and capture output generated\nduring test runs, preventing the output from being displayed and making it\neasier to read the output related to the test results.\n\nSome command line options go to `cargo test`, and some go to the resulting test\nbinary. To separate these two types of arguments, you list the arguments that\ngo to `cargo test` followed by the separator `--` and then the ones that go to\nthe test binary. Running `cargo test --help` displays the options you can use\nwith `cargo test`, and running `cargo test -- --help` displays the options you\ncan use after the separator `--`.\n\n### Running Tests in Parallel or Consecutively\n\nWhen you run multiple tests, by default they run in parallel using threads.\nThis means the tests will finish running faster so you can get feedback quicker\non whether or not your code is working. Because the tests are running at the\nsame time, make sure your tests don’t depend on each other or on any shared\nstate, including a shared environment, such as the current working directory or\nenvironment variables.\n\nFor example, say each of your tests runs some code that creates a file on disk\nnamed *test-output.txt* and writes some data to that file. Then each test reads\nthe data in that file and asserts that the file contains a particular value,\nwhich is different in each test. Because the tests run at the same time, one\ntest might overwrite the file between when another test writes and reads the\nfile. The second test will then fail, not because the code is incorrect but\nbecause the tests have interfered with each other while running in parallel.\nOne solution is to make sure each test writes to a different file; another\nsolution is to run the tests one at a time.\n\nIf you don’t want to run the tests in parallel or if you want more fine-grained\ncontrol over the number of threads used, you can send the `--test-threads` flag\nand the number of threads you want to use to the test binary. Take a look at\nthe following example:\n\n```text\n$ cargo test -- --test-threads=1\n```\n\nWe set the number of test threads to `1`, telling the program not to use any\nparallelism. Running the tests using one thread will take longer than running\nthem in parallel, but the tests won’t interfere with each other if they share\nstate.\n\n### Showing Function Output\n\nBy default, if a test passes, Rust’s test library captures anything printed to\nstandard output. For example, if we call `println!` in a test and the test\npasses, we won’t see the `println!` output in the terminal; we’ll see only the\nline that indicates the test passed. If a test fails, we’ll see whatever was\nprinted to standard output with the rest of the failure message.\n\nAs an example, Listing 11-10 has a silly function that prints the value of its\nparameter and returns 10, as well as a test that passes and a test that fails.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,panics\nfn prints_and_returns_10(a: i32) -> i32 {\n    println!(\"I got the value {}\", a);\n    10\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn this_test_will_pass() {\n        let value = prints_and_returns_10(4);\n        assert_eq!(10, value);\n    }\n\n    #[test]\n    fn this_test_will_fail() {\n        let value = prints_and_returns_10(8);\n        assert_eq!(5, value);\n    }\n}\n```\n\n<span class=\"caption\">Listing 11-10: Tests for a function that calls\n`println!`</span>\n\nWhen we run these tests with `cargo test`, we’ll see the following output:\n\n```text\n$ cargo test\n   Compiling silly-function v0.1.0 (file:///projects/silly-function)\n    Finished test [unoptimized + debuginfo] target(s) in 0.58s\n     Running target/debug/deps/silly_function-160869f38cff9166\n\nrunning 2 tests\ntest tests::this_test_will_fail ... FAILED\ntest tests::this_test_will_pass ... ok\n\nfailures:\n\n---- tests::this_test_will_fail stdout ----\nI got the value 8\nthread \'main\' panicked at \'assertion failed: `(left == right)`\n  left: `5`,\n right: `10`\', src/lib.rs:19:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\n\nfailures:\n    tests::this_test_will_fail\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass \'--lib\'\n```\n\nNote that nowhere in this output do we see `I got the value 4`, which is what\nis printed when the test that passes runs. That output has been captured. The\noutput from the test that failed, `I got the value 8`, appears in the section\nof the test summary output, which also shows the cause of the test failure.\n\nIf we want to see printed values for passing tests as well, we can tell Rust\nto also show the output of successful tests at the end with `--show-output`.\n\n```text\n$ cargo test -- --show-output\n```\n\nWhen we run the tests in Listing 11-10 again with the `--show-output` flag, we\nsee the following output:\n\n```text\n$ cargo test -- --show-output\n   Compiling silly-function v0.1.0 (file:///projects/silly-function)\n    Finished test [unoptimized + debuginfo] target(s) in 0.60s\n     Running target/debug/deps/silly_function-160869f38cff9166\n\nrunning 2 tests\ntest tests::this_test_will_fail ... FAILED\ntest tests::this_test_will_pass ... ok\n\nsuccesses:\n\n---- tests::this_test_will_pass stdout ----\nI got the value 4\n\n\nsuccesses:\n    tests::this_test_will_pass\n\nfailures:\n\n---- tests::this_test_will_fail stdout ----\nI got the value 8\nthread \'main\' panicked at \'assertion failed: `(left == right)`\n  left: `5`,\n right: `10`\', src/lib.rs:19:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\n\nfailures:\n    tests::this_test_will_fail\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass \'--lib\'\n```\n\n### Running a Subset of Tests by Name\n\nSometimes, running a full test suite can take a long time. If you’re working on\ncode in a particular area, you might want to run only the tests pertaining to\nthat code. You can choose which tests to run by passing `cargo test` the name\nor names of the test(s) you want to run as an argument.\n\nTo demonstrate how to run a subset of tests, we’ll create three tests for our\n`add_two` function, as shown in Listing 11-11, and choose which ones to run.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub fn add_two(a: i32) -> i32 {\n    a + 2\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn add_two_and_two() {\n        assert_eq!(4, add_two(2));\n    }\n\n    #[test]\n    fn add_three_and_two() {\n        assert_eq!(5, add_two(3));\n    }\n\n    #[test]\n    fn one_hundred() {\n        assert_eq!(102, add_two(100));\n    }\n}\n```\n\n<span class=\"caption\">Listing 11-11: Three tests with three different\nnames</span>\n\nIf we run the tests without passing any arguments, as we saw earlier, all the\ntests will run in parallel:\n\n```text\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.62s\n     Running target/debug/deps/adder-92948b65e88960b4\n\nrunning 3 tests\ntest tests::add_three_and_two ... ok\ntest tests::add_two_and_two ... ok\ntest tests::one_hundred ... ok\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\n#### Running Single Tests\n\nWe can pass the name of any test function to `cargo test` to run only that test:\n\n```text\n$ cargo test one_hundred\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.69s\n     Running target/debug/deps/adder-92948b65e88960b4\n\nrunning 1 test\ntest tests::one_hundred ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out\n\n```\n\nOnly the test with the name `one_hundred` ran; the other two tests didn’t match\nthat name. The test output lets us know we had more tests than what this\ncommand ran by displaying `2 filtered out` at the end of the summary line.\n\nWe can’t specify the names of multiple tests in this way; only the first value\ngiven to `cargo test` will be used. But there is a way to run multiple tests.\n\n#### Filtering to Run Multiple Tests\n\nWe can specify part of a test name, and any test whose name matches that value\nwill be run. For example, because two of our tests’ names contain `add`, we can\nrun those two by running `cargo test add`:\n\n```text\n$ cargo test add\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.61s\n     Running target/debug/deps/adder-92948b65e88960b4\n\nrunning 2 tests\ntest tests::add_three_and_two ... ok\ntest tests::add_two_and_two ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n\n```\n\nThis command ran all tests with `add` in the name and filtered out the test\nnamed `one_hundred`. Also note that the module in which a test appears becomes\npart of the test’s name, so we can run all the tests in a module by filtering\non the module’s name.\n\n### Ignoring Some Tests Unless Specifically Requested\n\nSometimes a few specific tests can be very time-consuming to execute, so you\nmight want to exclude them during most runs of `cargo test`. Rather than\nlisting as arguments all tests you do want to run, you can instead annotate the\ntime-consuming tests using the `ignore` attribute to exclude them, as shown\nhere:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n#[test]\nfn it_works() {\n    assert_eq!(2 + 2, 4);\n}\n\n#[test]\n#[ignore]\nfn expensive_test() {\n    // code that takes an hour to run\n}\n# \n# fn main() {}\n```\n\nAfter `#[test]` we add the `#[ignore]` line to the test we want to exclude. Now\nwhen we run our tests, `it_works` runs, but `expensive_test` doesn’t:\n\n```text\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.60s\n     Running target/debug/deps/adder-92948b65e88960b4\n\nrunning 2 tests\ntest expensive_test ... ignored\ntest it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\nThe `expensive_test` function is listed as `ignored`. If we want to run only\nthe ignored tests, we can use `cargo test -- --ignored`:\n\n```text\n$ cargo test -- --ignored\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.61s\n     Running target/debug/deps/adder-92948b65e88960b4\n\nrunning 1 test\ntest expensive_test ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\nBy controlling which tests run, you can make sure your `cargo test` results\nwill be fast. When you’re at a point where it makes sense to check the results\nof the `ignored` tests and you have time to wait for the results, you can run\n`cargo test -- --ignored` instead.\n", number: Some(SectionNumber([11, 2])), sub_items: [], path: "ch11-02-running-tests.md", parent_names: ["Writing Automated Tests"] }), Chapter(Chapter { name: "Test Organization", content: "## Test Organization\n\nAs mentioned at the start of the chapter, testing is a complex discipline, and\ndifferent people use different terminology and organization. The Rust community\nthinks about tests in terms of two main categories: *unit tests* and\n*integration tests*. Unit tests are small and more focused, testing one module\nin isolation at a time, and can test private interfaces. Integration tests are\nentirely external to your library and use your code in the same way any other\nexternal code would, using only the public interface and potentially exercising\nmultiple modules per test.\n\nWriting both kinds of tests is important to ensure that the pieces of your\nlibrary are doing what you expect them to, separately and together.\n\n### Unit Tests\n\nThe purpose of unit tests is to test each unit of code in isolation from the\nrest of the code to quickly pinpoint where code is and isn’t working as\nexpected. You’ll put unit tests in the *src* directory in each file with the\ncode that they’re testing. The convention is to create a module named `tests`\nin each file to contain the test functions and to annotate the module with\n`cfg(test)`.\n\n#### The Tests Module and `#[cfg(test)]`\n\nThe `#[cfg(test)]` annotation on the tests module tells Rust to compile and run\nthe test code only when you run `cargo test`, not when you run `cargo build`.\nThis saves compile time when you only want to build the library and saves space\nin the resulting compiled artifact because the tests are not included. You’ll\nsee that because integration tests go in a different directory, they don’t need\nthe `#[cfg(test)]` annotation. However, because unit tests go in the same files\nas the code, you’ll use `#[cfg(test)]` to specify that they shouldn’t be\nincluded in the compiled result.\n\nRecall that when we generated the new `adder` project in the first section of\nthis chapter, Cargo generated this code for us:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn it_works() {\n        assert_eq!(2 + 2, 4);\n    }\n}\n# \n# fn main() {}\n```\n\nThis code is the automatically generated test module. The attribute `cfg`\nstands for *configuration* and tells Rust that the following item should only\nbe included given a certain configuration option. In this case, the\nconfiguration option is `test`, which is provided by Rust for compiling and\nrunning tests. By using the `cfg` attribute, Cargo compiles our test code only\nif we actively run the tests with `cargo test`. This includes any helper\nfunctions that might be within this module, in addition to the functions\nannotated with `#[test]`.\n\n#### Testing Private Functions\n\nThere’s debate within the testing community about whether or not private\nfunctions should be tested directly, and other languages make it difficult or\nimpossible to test private functions. Regardless of which testing ideology you\nadhere to, Rust’s privacy rules do allow you to test private functions.\nConsider the code in Listing 11-12 with the private function `internal_adder`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub fn add_two(a: i32) -> i32 {\n    internal_adder(a, 2)\n}\n\nfn internal_adder(a: i32, b: i32) -> i32 {\n    a + b\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn internal() {\n        assert_eq!(4, internal_adder(2, 2));\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 11-12: Testing a private function</span>\n\nNote that the `internal_adder` function is not marked as `pub`, but because\ntests are just Rust code and the `tests` module is just another module, you can\nbring `internal_adder` into a test’s scope and call it. If you don’t think\nprivate functions should be tested, there’s nothing in Rust that will compel\nyou to do so.\n\n### Integration Tests\n\nIn Rust, integration tests are entirely external to your library. They use your\nlibrary in the same way any other code would, which means they can only call\nfunctions that are part of your library’s public API. Their purpose is to test\nwhether many parts of your library work together correctly. Units of code that\nwork correctly on their own could have problems when integrated, so test\ncoverage of the integrated code is important as well. To create integration\ntests, you first need a *tests* directory.\n\n#### The *tests* Directory\n\nWe create a *tests* directory at the top level of our project directory, next\nto *src*. Cargo knows to look for integration test files in this directory. We\ncan then make as many test files as we want to in this directory, and Cargo\nwill compile each of the files as an individual crate.\n\nLet’s create an integration test. With the code in Listing 11-12 still in the\n*src/lib.rs* file, make a *tests* directory, create a new file named\n*tests/integration_test.rs*, and enter the code in Listing 11-13.\n\n<span class=\"filename\">Filename: tests/integration_test.rs</span>\n\n```rust,ignore\nuse adder;\n\n#[test]\nfn it_adds_two() {\n    assert_eq!(4, adder::add_two(2));\n}\n```\n\n<span class=\"caption\">Listing 11-13: An integration test of a function in the\n`adder` crate</span>\n\nWe’ve added `use adder` at the top of the code, which we didn’t need in the\nunit tests. The reason is that each file in the `tests` directory is a separate\ncrate, so we need to bring our library into each test crate’s scope.\n\nWe don’t need to annotate any code in *tests/integration_test.rs* with\n`#[cfg(test)]`. Cargo treats the `tests` directory specially and compiles files\nin this directory only when we run `cargo test`. Run `cargo test` now:\n\n```text\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.73s\n     Running target/debug/deps/adder-92948b65e88960b4\n\nrunning 1 test\ntest tests::internal ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/debug/deps/integration_test-82e7799c1bc62298\n\nrunning 1 test\ntest it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\nThe three sections of output include the unit tests, the integration test, and\nthe doc tests. The first section for the unit tests is the same as we’ve been\nseeing: one line for each unit test (one named `internal` that we added in\nListing 11-12) and then a summary line for the unit tests.\n\nThe integration tests section starts with the line `Running\ntarget/debug/deps/integration_test-ce99bcc2479f4607` (the hash at the end of\nyour output will be different). Next, there is a line for each test function in\nthat integration test and a summary line for the results of the integration\ntest just before the `Doc-tests adder` section starts.\n\nSimilarly to how adding more unit test functions adds more result lines to the\nunit tests section, adding more test functions to the integration test file\nadds more result lines to this integration test file’s section. Each\nintegration test file has its own section, so if we add more files in the\n*tests* directory, there will be more integration test sections.\n\nWe can still run a particular integration test function by specifying the test\nfunction’s name as an argument to `cargo test`. To run all the tests in a\nparticular integration test file, use the `--test` argument of `cargo test`\nfollowed by the name of the file:\n\n```text\n$ cargo test --test integration_test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.64s\n     Running target/debug/deps/integration_test-82e7799c1bc62298\n\nrunning 1 test\ntest it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\nThis command runs only the tests in the *tests/integration_test.rs* file.\n\n#### Submodules in Integration Tests\n\nAs you add more integration tests, you might want to make more than one file in\nthe *tests* directory to help organize them; for example, you can group the\ntest functions by the functionality they’re testing. As mentioned earlier, each\nfile in the *tests* directory is compiled as its own separate crate.\n\nTreating each integration test file as its own crate is useful to create\nseparate scopes that are more like the way end users will be using your crate.\nHowever, this means files in the *tests* directory don’t share the same\nbehavior as files in *src* do, as you learned in Chapter 7 regarding how to\nseparate code into modules and files.\n\nThe different behavior of files in the *tests* directory is most noticeable\nwhen you have a set of helper functions that would be useful in multiple\nintegration test files and you try to follow the steps in the [“Separating\nModules into Different Files”][separating-modules-into-files]<!-- ignore -->\nsection of Chapter 7 to extract them into a common module. For example, if we\ncreate *tests/common.rs* and place a function named `setup` in it, we can add\nsome code to `setup` that we want to call from multiple test functions in\nmultiple test files:\n\n<span class=\"filename\">Filename: tests/common.rs</span>\n\n```rust\npub fn setup() {\n    // setup code specific to your library\'s tests would go here\n}\n```\n\nWhen we run the tests again, we’ll see a new section in the test output for the\n*common.rs* file, even though this file doesn’t contain any test functions nor\ndid we call the `setup` function from anywhere:\n\n```text\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.89s\n     Running target/debug/deps/adder-92948b65e88960b4\n\nrunning 1 test\ntest tests::internal ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/debug/deps/common-7064e1b6d2e271be\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/debug/deps/integration_test-82e7799c1bc62298\n\nrunning 1 test\ntest it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\nHaving `common` appear in the test results with `running 0 tests` displayed for\nit is not what we wanted. We just wanted to share some code with the other\nintegration test files.\n\nTo avoid having `common` appear in the test output, instead of creating\n*tests/common.rs*, we’ll create *tests/common/mod.rs*. This is an alternate\nnaming convention that Rust also understands. Naming the file this way tells\nRust not to treat the `common` module as an integration test file. When we move\nthe `setup` function code into *tests/common/mod.rs* and delete the\n*tests/common.rs* file, the section in the test output will no longer appear.\nFiles in subdirectories of the *tests* directory don’t get compiled as separate\ncrates or have sections in the test output.\n\nAfter we’ve created *tests/common/mod.rs*, we can use it from any of the\nintegration test files as a module. Here’s an example of calling the `setup`\nfunction from the `it_adds_two` test in *tests/integration_test.rs*:\n\n<span class=\"filename\">Filename: tests/integration_test.rs</span>\n\n```rust,ignore\nuse adder;\n\nmod common;\n\n#[test]\nfn it_adds_two() {\n    common::setup();\n    assert_eq!(4, adder::add_two(2));\n}\n```\n\nNote that the `mod common;` declaration is the same as the module declaration\nwe demonstrated in Listing 7-21. Then in the test function, we can call the\n`common::setup()` function.\n\n#### Integration Tests for Binary Crates\n\nIf our project is a binary crate that only contains a *src/main.rs* file and\ndoesn’t have a *src/lib.rs* file, we can’t create integration tests in the\n*tests* directory and bring functions defined in the *src/main.rs* file into\nscope with a `use` statement. Only library crates expose functions that other\ncrates can use; binary crates are meant to be run on their own.\n\nThis is one of the reasons Rust projects that provide a binary have a\nstraightforward *src/main.rs* file that calls logic that lives in the\n*src/lib.rs* file. Using that structure, integration tests *can* test the\nlibrary crate with `use` to make the important functionality available.\nIf the important functionality works, the small amount of code in the\n*src/main.rs* file will work as well, and that small amount of code doesn’t\nneed to be tested.\n\n## Summary\n\nRust’s testing features provide a way to specify how code should function to\nensure it continues to work as you expect, even as you make changes. Unit tests\nexercise different parts of a library separately and can test private\nimplementation details. Integration tests check that many parts of the library\nwork together correctly, and they use the library’s public API to test the code\nin the same way external code will use it. Even though Rust’s type system and\nownership rules help prevent some kinds of bugs, tests are still important to\nreduce logic bugs having to do with how your code is expected to behave.\n\nLet’s combine the knowledge you learned in this chapter and in previous\nchapters to work on a project!\n\n[separating-modules-into-files]:\nch07-05-separating-modules-into-different-files.html\n", number: Some(SectionNumber([11, 3])), sub_items: [], path: "ch11-03-test-organization.md", parent_names: ["Writing Automated Tests"] })], path: "ch11-00-testing.md", parent_names: [] }), Chapter(Chapter { name: "An I/O Project: Building a Command Line Program", content: "# An I/O Project: Building a Command Line Program\n\nThis chapter is a recap of the many skills you’ve learned so far and an\nexploration of a few more standard library features. We’ll build a command line\ntool that interacts with file and command line input/output to practice some of\nthe Rust concepts you now have under your belt.\n\nRust’s speed, safety, single binary output, and cross-platform support make it\nan ideal language for creating command line tools, so for our project, we’ll\nmake our own version of the classic command line tool `grep` (**g**lobally\nsearch a **r**egular **e**xpression and **p**rint). In the simplest use case,\n`grep` searches a specified file for a specified string. To do so, `grep` takes\nas its arguments a filename and a string. Then it reads the file, finds lines\nin that file that contain the string argument, and prints those lines.\n\nAlong the way, we’ll show how to make our command line tool use features of the\nterminal that many command line tools use. We’ll read the value of an\nenvironment variable to allow the user to configure the behavior of our tool.\nWe’ll also print error messages to the standard error console stream (`stderr`)\ninstead of standard output (`stdout`), so, for example, the user can redirect\nsuccessful output to a file while still seeing error messages onscreen.\n\nOne Rust community member, Andrew Gallant, has already created a fully\nfeatured, very fast version of `grep`, called `ripgrep`. By comparison, our\nversion of `grep` will be fairly simple, but this chapter will give you some of\nthe background knowledge you need to understand a real-world project such as\n`ripgrep`.\n\nOur `grep` project will combine a number of concepts you’ve learned so far:\n\n* Organizing code (using what you learned about modules in [Chapter 7][ch7]<!--\n  ignore -->)\n* Using vectors and strings (collections, [Chapter 8][ch8]<!-- ignore -->)\n* Handling errors ([Chapter 9][ch9]<!-- ignore -->)\n* Using traits and lifetimes where appropriate ([Chapter 10][ch10]<!-- ignore\n  -->)\n* Writing tests ([Chapter 11][ch11]<!-- ignore -->)\n\nWe’ll also briefly introduce closures, iterators, and trait objects, which\nChapters [13][ch13]<!-- ignore --> and [17][ch17]<!-- ignore --> will cover in\ndetail.\n\n[ch7]: ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\n[ch8]: ch08-00-common-collections.html\n[ch9]: ch09-00-error-handling.html\n[ch10]: ch10-00-generics.html\n[ch11]: ch11-00-testing.html\n[ch13]: ch13-00-functional-features.html\n[ch17]: ch17-00-oop.html\n", number: Some(SectionNumber([12])), sub_items: [Chapter(Chapter { name: "Accepting Command Line Arguments", content: "## Accepting Command Line Arguments\n\nLet’s create a new project with, as always, `cargo new`. We’ll call our project\n`minigrep` to distinguish it from the `grep` tool that you might already have\non your system.\n\n```text\n$ cargo new minigrep\n     Created binary (application) `minigrep` project\n$ cd minigrep\n```\n\nThe first task is to make `minigrep` accept its two command line arguments: the\nfilename and a string to search for. That is, we want to be able to run our\nprogram with `cargo run`, a string to search for, and a path to a file to\nsearch in, like so:\n\n```text\n$ cargo run searchstring example-filename.txt\n```\n\nRight now, the program generated by `cargo new` cannot process arguments we\ngive it. Some existing libraries on [crates.io](https://crates.io/) can help\nwith writing a program that accepts command line arguments, but because you’re\njust learning this concept, let’s implement this capability ourselves.\n\n### Reading the Argument Values\n\nTo enable `minigrep` to read the values of command line arguments we pass to\nit, we’ll need a function provided in Rust’s standard library, which is\n`std::env::args`. This function returns an iterator of the command line\narguments that were given to `minigrep`. We’ll cover iterators fully in\n[Chapter 13][ch13]<!-- ignore -->. For now, you only need to know two details\nabout iterators: iterators produce a series of values, and we can call the\n`collect` method on an iterator to turn it into a collection, such as a vector,\ncontaining all the elements the iterator produces.\n\nUse the code in Listing 12-1 to allow your `minigrep` program to read any\ncommand line arguments passed to it and then collect the values into a vector.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::env;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n    println!(\"{:?}\", args);\n}\n```\n\n<span class=\"caption\">Listing 12-1: Collecting the command line arguments into\na vector and printing them</span>\n\nFirst, we bring the `std::env` module into scope with a `use` statement so we\ncan use its `args` function. Notice that the `std::env::args` function is\nnested in two levels of modules. As we discussed in [Chapter\n7][ch7-idiomatic-use]<!-- ignore -->, in cases where the desired function is\nnested in more than one module, it’s conventional to bring the parent module\ninto scope rather than the function. By doing so, we can easily use other\nfunctions from `std::env`. It’s also less ambiguous than adding `use\nstd::env::args` and then calling the function with just `args`, because `args`\nmight easily be mistaken for a function that’s defined in the current module.\n\n> ### The `args` Function and Invalid Unicode\n>\n> Note that `std::env::args` will panic if any argument contains invalid\n> Unicode. If your program needs to accept arguments containing invalid\n> Unicode, use `std::env::args_os` instead. That function returns an iterator\n> that produces `OsString` values instead of `String` values. We’ve chosen to\n> use `std::env::args` here for simplicity, because `OsString` values differ\n> per platform and are more complex to work with than `String` values.\n\nOn the first line of `main`, we call `env::args`, and we immediately use\n`collect` to turn the iterator into a vector containing all the values produced\nby the iterator. We can use the `collect` function to create many kinds of\ncollections, so we explicitly annotate the type of `args` to specify that we\nwant a vector of strings. Although we very rarely need to annotate types in\nRust, `collect` is one function you do often need to annotate because Rust\nisn’t able to infer the kind of collection you want.\n\nFinally, we print the vector using the debug formatter, `:?`. Let’s try running\nthe code first with no arguments and then with two arguments:\n\n```text\n$ cargo run\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.61s\n     Running `target/debug/minigrep`\n[\"target/debug/minigrep\"]\n```\n\n```text\n$ cargo run needle haystack\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.57s\n     Running `target/debug/minigrep needle haystack`\n[\"target/debug/minigrep\", \"needle\", \"haystack\"]\n```\n\nNotice that the first value in the vector is `\"target/debug/minigrep\"`, which\nis the name of our binary. This matches the behavior of the arguments list in\nC, letting programs use the name by which they were invoked in their execution.\nIt’s often convenient to have access to the program name in case you want to\nprint it in messages or change behavior of the program based on what command\nline alias was used to invoke the program. But for the purposes of this\nchapter, we’ll ignore it and save only the two arguments we need.\n\n### Saving the Argument Values in Variables\n\nPrinting the value of the vector of arguments illustrated that the program is\nable to access the values specified as command line arguments. Now we need to\nsave the values of the two arguments in variables so we can use the values\nthroughout the rest of the program. We do that in Listing 12-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic\nuse std::env;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let query = &args[1];\n    let filename = &args[2];\n\n    println!(\"Searching for {}\", query);\n    println!(\"In file {}\", filename);\n}\n```\n\n<span class=\"caption\">Listing 12-2: Creating variables to hold the query\nargument and filename argument</span>\n\nAs we saw when we printed the vector, the program’s name takes up the first\nvalue in the vector at `args[0]`, so we’re starting at index `1`. The first\nargument `minigrep` takes is the string we’re searching for, so we put a\nreference to the first argument in the variable `query`. The second argument\nwill be the filename, so we put a reference to the second argument in the\nvariable `filename`.\n\nWe temporarily print the values of these variables to prove that the code is\nworking as we intend. Let’s run this program again with the arguments `test`\nand `sample.txt`:\n\n```text\n$ cargo run test sample.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep test sample.txt`\nSearching for test\nIn file sample.txt\n```\n\nGreat, the program is working! The values of the arguments we need are being\nsaved into the right variables. Later we’ll add some error handling to deal\nwith certain potential erroneous situations, such as when the user provides no\narguments; for now, we’ll ignore that situation and work on adding file-reading\ncapabilities instead.\n\n[ch13]: ch13-00-functional-features.html\n[ch7-idiomatic-use]: ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#creating-idiomatic-use-paths\n", number: Some(SectionNumber([12, 1])), sub_items: [], path: "ch12-01-accepting-command-line-arguments.md", parent_names: ["An I/O Project: Building a Command Line Program"] }), Chapter(Chapter { name: "Reading a File", content: "## Reading a File\n\nNow we’ll add functionality to read the file that is specified in the\n`filename` command line argument. First, we need a sample file to test it with:\nthe best kind of file to use to make sure `minigrep` is working is one with a\nsmall amount of text over multiple lines with some repeated words. Listing 12-3\nhas an Emily Dickinson poem that will work well! Create a file called\n*poem.txt* at the root level of your project, and enter the poem “I’m Nobody!\nWho are you?”\n\n<span class=\"filename\">Filename: poem.txt</span>\n\n```text\nI’m nobody! Who are you?\nAre you nobody, too?\nThen there’s a pair of us - don’t tell!\nThey’d banish us, you know.\n\nHow dreary to be somebody!\nHow public, like a frog\nTo tell your name the livelong day\nTo an admiring bog!\n```\n\n<span class=\"caption\">Listing 12-3: A poem by Emily Dickinson makes a good test\ncase</span>\n\nWith the text in place, edit *src/main.rs* and add code to read the file, as\nshown in Listing 12-4.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic\nuse std::env;\nuse std::fs;\n\nfn main() {\n    // --snip--\n#     let args: Vec<String> = env::args().collect();\n# \n#     let query = &args[1];\n#     let filename = &args[2];\n# \n#     println!(\"Searching for {}\", query);\n    println!(\"In file {}\", filename);\n\n    let contents = fs::read_to_string(filename)\n        .expect(\"Something went wrong reading the file\");\n\n    println!(\"With text:\\n{}\", contents);\n}\n```\n\n<span class=\"caption\">Listing 12-4: Reading the contents of the file specified\nby the second argument</span>\n\nFirst, we add another `use` statement to bring in a relevant part of the\nstandard library: we need `std::fs` to handle files.\n\nIn `main`, we’ve added a new statement: `fs::read_to_string` takes the\n`filename`, opens that file, and returns a `Result<String>` of the file’s\ncontents.\n\nAfter that statement, we’ve again added a temporary `println!` statement that\nprints the value of `contents` after the file is read, so we can check that the\nprogram is working so far.\n\nLet’s run this code with any string as the first command line argument (because\nwe haven’t implemented the searching part yet) and the *poem.txt* file as the\nsecond argument:\n\n```text\n$ cargo run the poem.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep the poem.txt`\nSearching for the\nIn file poem.txt\nWith text:\nI’m nobody! Who are you?\nAre you nobody, too?\nThen there’s a pair of us - don’t tell!\nThey’d banish us, you know.\n\nHow dreary to be somebody!\nHow public, like a frog\nTo tell your name the livelong day\nTo an admiring bog!\n\n```\n\nGreat! The code read and then printed the contents of the file. But the code\nhas a few flaws. The `main` function has multiple responsibilities: generally,\nfunctions are clearer and easier to maintain if each function is responsible\nfor only one idea. The other problem is that we’re not handling errors as well\nas we could. The program is still small, so these flaws aren’t a big problem,\nbut as the program grows, it will be harder to fix them cleanly. It’s good\npractice to begin refactoring early on when developing a program, because it’s\nmuch easier to refactor smaller amounts of code. We’ll do that next.\n", number: Some(SectionNumber([12, 2])), sub_items: [], path: "ch12-02-reading-a-file.md", parent_names: ["An I/O Project: Building a Command Line Program"] }), Chapter(Chapter { name: "Refactoring to Improve Modularity and Error Handling", content: "## Refactoring to Improve Modularity and Error Handling\n\nTo improve our program, we’ll fix four problems that have to do with the\nprogram’s structure and how it’s handling potential errors.\n\nFirst, our `main` function now performs two tasks: it parses arguments and\nreads files. For such a small function, this isn’t a major problem. However, if\nwe continue to grow our program inside `main`, the number of separate tasks the\n`main` function handles will increase. As a function gains responsibilities, it\nbecomes more difficult to reason about, harder to test, and harder to change\nwithout breaking one of its parts. It’s best to separate functionality so each\nfunction is responsible for one task.\n\nThis issue also ties into the second problem: although `query` and `filename`\nare configuration variables to our program, variables like `contents` are used\nto perform the program’s logic. The longer `main` becomes, the more variables\nwe’ll need to bring into scope; the more variables we have in scope, the harder\nit will be to keep track of the purpose of each. It’s best to group the\nconfiguration variables into one structure to make their purpose clear.\n\nThe third problem is that we’ve used `expect` to print an error message when\nreading the file fails, but the error message just prints `Something went wrong\nreading the file`. Reading a file can fail in a number of ways: for example,\nthe file could be missing, or we might not have permission to open it. Right\nnow, regardless of the situation, we’d print the `Something went wrong reading\nthe file` error message, which wouldn’t give the user any information!\n\nFourth, we use `expect` repeatedly to handle different errors, and if the user\nruns our program without specifying enough arguments, they’ll get an `index out\nof bounds` error from Rust that doesn’t clearly explain the problem. It would\nbe best if all the error-handling code were in one place so future maintainers\nhad only one place to consult in the code if the error-handling logic needed to\nchange. Having all the error-handling code in one place will also ensure that\nwe’re printing messages that will be meaningful to our end users.\n\nLet’s address these four problems by refactoring our project.\n\n### Separation of Concerns for Binary Projects\n\nThe organizational problem of allocating responsibility for multiple tasks to\nthe `main` function is common to many binary projects. As a result, the Rust\ncommunity has developed a process to use as a guideline for splitting the\nseparate concerns of a binary program when `main` starts getting large. The\nprocess has the following steps:\n\n* Split your program into a *main.rs* and a *lib.rs* and move your program’s\n  logic to *lib.rs*.\n* As long as your command line parsing logic is small, it can remain in\n  *main.rs*.\n* When the command line parsing logic starts getting complicated, extract it\n  from *main.rs* and move it to *lib.rs*.\n\nThe responsibilities that remain in the `main` function after this process\nshould be limited to the following:\n\n* Calling the command line parsing logic with the argument values\n* Setting up any other configuration\n* Calling a `run` function in *lib.rs*\n* Handling the error if `run` returns an error\n\nThis pattern is about separating concerns: *main.rs* handles running the\nprogram, and *lib.rs* handles all the logic of the task at hand. Because you\ncan’t test the `main` function directly, this structure lets you test all of\nyour program’s logic by moving it into functions in *lib.rs*. The only code\nthat remains in *main.rs* will be small enough to verify its correctness by\nreading it. Let’s rework our program by following this process.\n\n#### Extracting the Argument Parser\n\nWe’ll extract the functionality for parsing arguments into a function that\n`main` will call to prepare for moving the command line parsing logic to\n*src/lib.rs*. Listing 12-5 shows the new start of `main` that calls a new\nfunction `parse_config`, which we’ll define in *src/main.rs* for the moment.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use std::env;\n# use std::fs;\n# \nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let (query, filename) = parse_config(&args);\n\n    // --snip--\n# \n#     println!(\"Searching for {}\", query);\n#     println!(\"In file {}\", filename);\n# \n#     let contents = fs::read_to_string(filename)\n#         .expect(\"Something went wrong reading the file\");\n# \n#     println!(\"With text:\\n{}\", contents);\n}\n\nfn parse_config(args: &[String]) -> (&str, &str) {\n    let query = &args[1];\n    let filename = &args[2];\n\n    (query, filename)\n}\n```\n\n<span class=\"caption\">Listing 12-5: Extracting a `parse_config` function from\n`main`</span>\n\nWe’re still collecting the command line arguments into a vector, but instead of\nassigning the argument value at index 1 to the variable `query` and the\nargument value at index 2 to the variable `filename` within the `main`\nfunction, we pass the whole vector to the `parse_config` function. The\n`parse_config` function then holds the logic that determines which argument\ngoes in which variable and passes the values back to `main`. We still create\nthe `query` and `filename` variables in `main`, but `main` no longer has the\nresponsibility of determining how the command line arguments and variables\ncorrespond.\n\nThis rework may seem like overkill for our small program, but we’re refactoring\nin small, incremental steps. After making this change, run the program again to\nverify that the argument parsing still works. It’s good to check your progress\noften, to help identify the cause of problems when they occur.\n\n#### Grouping Configuration Values\n\nWe can take another small step to improve the `parse_config` function further.\nAt the moment, we’re returning a tuple, but then we immediately break that\ntuple into individual parts again. This is a sign that perhaps we don’t have\nthe right abstraction yet.\n\nAnother indicator that shows there’s room for improvement is the `config` part\nof `parse_config`, which implies that the two values we return are related and\nare both part of one configuration value. We’re not currently conveying this\nmeaning in the structure of the data other than by grouping the two values into\na tuple; we could put the two values into one struct and give each of the\nstruct fields a meaningful name. Doing so will make it easier for future\nmaintainers of this code to understand how the different values relate to each\nother and what their purpose is.\n\n> Note: Using primitive values when a complex type would be more appropriate is\n> an anti-pattern known as *primitive obsession*.\n\nListing 12-6 shows the improvements to the `parse_config` function.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic\n# use std::env;\n# use std::fs;\n# \nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = parse_config(&args);\n\n    println!(\"Searching for {}\", config.query);\n    println!(\"In file {}\", config.filename);\n\n    let contents = fs::read_to_string(config.filename)\n        .expect(\"Something went wrong reading the file\");\n\n    // --snip--\n# \n#     println!(\"With text:\\n{}\", contents);\n}\n\nstruct Config {\n    query: String,\n    filename: String,\n}\n\nfn parse_config(args: &[String]) -> Config {\n    let query = args[1].clone();\n    let filename = args[2].clone();\n\n    Config { query, filename }\n}\n```\n\n<span class=\"caption\">Listing 12-6: Refactoring `parse_config` to return an\ninstance of a `Config` struct</span>\n\nWe’ve added a struct named `Config` defined to have fields named `query` and\n`filename`. The signature of `parse_config` now indicates that it returns a\n`Config` value. In the body of `parse_config`, where we used to return string\nslices that reference `String` values in `args`, we now define `Config` to\ncontain owned `String` values. The `args` variable in `main` is the owner of\nthe argument values and is only letting the `parse_config` function borrow\nthem, which means we’d violate Rust’s borrowing rules if `Config` tried to take\nownership of the values in `args`.\n\nWe could manage the `String` data in a number of different ways, but the\neasiest, though somewhat inefficient, route is to call the `clone` method on\nthe values. This will make a full copy of the data for the `Config` instance to\nown, which takes more time and memory than storing a reference to the string\ndata. However, cloning the data also makes our code very straightforward\nbecause we don’t have to manage the lifetimes of the references; in this\ncircumstance, giving up a little performance to gain simplicity is a worthwhile\ntrade-off.\n\n> ### The Trade-Offs of Using `clone`\n>\n> There’s a tendency among many Rustaceans to avoid using `clone` to fix\n> ownership problems because of its runtime cost. In\n> [Chapter 13][ch13]<!-- ignore -->, you’ll learn how to use more efficient\n> methods in this type of situation. But for now, it’s okay to copy a few\n> strings to continue making progress because you’ll make these copies only\n> once and your filename and query string are very small. It’s better to have\n> a working program that’s a bit inefficient than to try to hyperoptimize code\n> on your first pass. As you become more experienced with Rust, it’ll be\n> easier to start with the most efficient solution, but for now, it’s\n> perfectly acceptable to call `clone`.\n\nWe’ve updated `main` so it places the instance of `Config` returned by\n`parse_config` into a variable named `config`, and we updated the code that\npreviously used the separate `query` and `filename` variables so it now uses\nthe fields on the `Config` struct instead.\n\nNow our code more clearly conveys that `query` and `filename` are related and\nthat their purpose is to configure how the program will work. Any code that\nuses these values knows to find them in the `config` instance in the fields\nnamed for their purpose.\n\n#### Creating a Constructor for `Config`\n\nSo far, we’ve extracted the logic responsible for parsing the command line\narguments from `main` and placed it in the `parse_config` function. Doing so\nhelped us to see that the `query` and `filename` values were related and that\nrelationship should be conveyed in our code. We then added a `Config` struct to\nname the related purpose of `query` and `filename` and to be able to return the\nvalues’ names as struct field names from the `parse_config` function.\n\nSo now that the purpose of the `parse_config` function is to create a `Config`\ninstance, we can change `parse_config` from a plain function to a function\nnamed `new` that is associated with the `Config` struct. Making this change\nwill make the code more idiomatic. We can create instances of types in the\nstandard library, such as `String`, by calling `String::new`. Similarly, by\nchanging `parse_config` into a `new` function associated with `Config`, we’ll\nbe able to create instances of `Config` by calling `Config::new`. Listing 12-7\nshows the changes we need to make.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic\n# use std::env;\n# use std::fs;\n# \nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::new(&args);\n# \n#     println!(\"Searching for {}\", config.query);\n#     println!(\"In file {}\", config.filename);\n# \n#     let contents = fs::read_to_string(config.filename)\n#         .expect(\"Something went wrong reading the file\");\n# \n#     println!(\"With text:\\n{}\", contents);\n\n    // --snip--\n}\n\n// --snip--\n\n# struct Config {\n#     query: String,\n#     filename: String,\n# }\n# \nimpl Config {\n    fn new(args: &[String]) -> Config {\n        let query = args[1].clone();\n        let filename = args[2].clone();\n\n        Config { query, filename }\n    }\n}\n```\n\n<span class=\"caption\">Listing 12-7: Changing `parse_config` into\n`Config::new`</span>\n\nWe’ve updated `main` where we were calling `parse_config` to instead call\n`Config::new`. We’ve changed the name of `parse_config` to `new` and moved it\nwithin an `impl` block, which associates the `new` function with `Config`. Try\ncompiling this code again to make sure it works.\n\n### Fixing the Error Handling\n\nNow we’ll work on fixing our error handling. Recall that attempting to access\nthe values in the `args` vector at index 1 or index 2 will cause the program to\npanic if the vector contains fewer than three items. Try running the program\nwithout any arguments; it will look like this:\n\n```text\n$ cargo run\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep`\nthread \'main\' panicked at \'index out of bounds: the len is 1 but the index is 1\', src/main.rs:27:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n```\n\nThe line `index out of bounds: the len is 1 but the index is 1` is an error\nmessage intended for programmers. It won’t help our end users understand what\nhappened and what they should do instead. Let’s fix that now.\n\n#### Improving the Error Message\n\nIn Listing 12-8, we add a check in the `new` function that will verify that the\nslice is long enough before accessing index 1 and 2. If the slice isn’t long\nenough, the program panics and displays a better error message than the `index\nout of bounds` message.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use std::env;\n# use std::fs;\n# \n# fn main() {\n#     let args: Vec<String> = env::args().collect();\n# \n#     let config = Config::new(&args);\n# \n#     println!(\"Searching for {}\", config.query);\n#     println!(\"In file {}\", config.filename);\n# \n#     let contents = fs::read_to_string(config.filename)\n#         .expect(\"Something went wrong reading the file\");\n# \n#     println!(\"With text:\\n{}\", contents);\n# }\n# \n# struct Config {\n#     query: String,\n#     filename: String,\n# }\n# \n# impl Config {\n    // --snip--\n    fn new(args: &[String]) -> Config {\n        if args.len() < 3 {\n            panic!(\"not enough arguments\");\n        }\n        // --snip--\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Config { query, filename }\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 12-8: Adding a check for the number of\narguments</span>\n\nThis code is similar to [the `Guess::new` function we wrote in Listing\n9-10][ch9-custom-types]<!-- ignore -->, where we called `panic!` when the\n`value` argument was out of the range of valid values. Instead of checking for\na range of values here, we’re checking that the length of `args` is at least 3\nand the rest of the function can operate under the assumption that this\ncondition has been met. If `args` has fewer than three items, this condition\nwill be true, and we call the `panic!` macro to end the program immediately.\n\nWith these extra few lines of code in `new`, let’s run the program without any\narguments again to see what the error looks like now:\n\n```text\n$ cargo run\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep`\nthread \'main\' panicked at \'not enough arguments\', src/main.rs:26:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n```\n\nThis output is better: we now have a reasonable error message. However, we also\nhave extraneous information we don’t want to give to our users. Perhaps using\nthe technique we used in Listing 9-10 isn’t the best to use here: a call to\n`panic!` is more appropriate for a programming problem than a usage problem,\n[as discussed in Chapter 9][ch9-error-guidelines]<!-- ignore -->. Instead, we\ncan use the other technique you learned about in Chapter 9—[returning a\n`Result`][ch9-result]<!-- ignore --> that indicates either success or an error.\n\n#### Returning a `Result` from `new` Instead of Calling `panic!`\n\nWe can instead return a `Result` value that will contain a `Config` instance in\nthe successful case and will describe the problem in the error case. When\n`Config::new` is communicating to `main`, we can use the `Result` type to\nsignal there was a problem. Then we can change `main` to convert an `Err`\nvariant into a more practical error for our users without the surrounding text\nabout `thread \'main\'` and `RUST_BACKTRACE` that a call to `panic!` causes.\n\nListing 12-9 shows the changes we need to make to the return value of\n`Config::new` and the body of the function needed to return a `Result`. Note\nthat this won’t compile until we update `main` as well, which we’ll do in the\nnext listing.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use std::env;\n# use std::fs;\n# \n# fn main() {\n#     let args: Vec<String> = env::args().collect();\n# \n#     let config = Config::new(&args);\n# \n#     println!(\"Searching for {}\", config.query);\n#     println!(\"In file {}\", config.filename);\n# \n#     let contents = fs::read_to_string(config.filename)\n#         .expect(\"Something went wrong reading the file\");\n# \n#     println!(\"With text:\\n{}\", contents);\n# }\n# \n# struct Config {\n#     query: String,\n#     filename: String,\n# }\n# \nimpl Config {\n    fn new(args: &[String]) -> Result<Config, &\'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let filename = args[2].clone();\n\n        Ok(Config { query, filename })\n    }\n}\n```\n\n<span class=\"caption\">Listing 12-9: Returning a `Result` from\n`Config::new`</span>\n\nOur `new` function now returns a `Result` with a `Config` instance in the\nsuccess case and a `&\'static str` in the error case. Recall from [“The Static\nLifetime”][the-static-lifetime]<!-- ignore --> section in Chapter 10 that\n`&\'static str` is the type of string literals, which is our error message type\nfor now.\n\nWe’ve made two changes in the body of the `new` function: instead of calling\n`panic!` when the user doesn’t pass enough arguments, we now return an `Err`\nvalue, and we’ve wrapped the `Config` return value in an `Ok`. These changes\nmake the function conform to its new type signature.\n\nReturning an `Err` value from `Config::new` allows the `main` function to\nhandle the `Result` value returned from the `new` function and exit the process\nmore cleanly in the error case.\n\n#### Calling `Config::new` and Handling Errors\n\nTo handle the error case and print a user-friendly message, we need to update\n`main` to handle the `Result` being returned by `Config::new`, as shown in\nListing 12-10. We’ll also take the responsibility of exiting the command line\ntool with a nonzero error code from `panic!` and implement it by hand. A\nnonzero exit status is a convention to signal to the process that called our\nprogram that the program exited with an error state.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use std::env;\n# use std::fs;\nuse std::process;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::new(&args).unwrap_or_else(|err| {\n        println!(\"Problem parsing arguments: {}\", err);\n        process::exit(1);\n    });\n\n    // --snip--\n# \n#     println!(\"Searching for {}\", config.query);\n#     println!(\"In file {}\", config.filename);\n# \n#     let contents = fs::read_to_string(config.filename)\n#         .expect(\"Something went wrong reading the file\");\n# \n#     println!(\"With text:\\n{}\", contents);\n# }\n# \n# struct Config {\n#     query: String,\n#     filename: String,\n# }\n# \n# impl Config {\n#     fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 12-10: Exiting with an error code if creating a\nnew `Config` fails</span>\n\nIn this listing, we’ve used a method we haven’t covered before:\n`unwrap_or_else`, which is defined on `Result<T, E>` by the standard library.\nUsing `unwrap_or_else` allows us to define some custom, non-`panic!` error\nhandling. If the `Result` is an `Ok` value, this method’s behavior is similar\nto `unwrap`: it returns the inner value `Ok` is wrapping. However, if the value\nis an `Err` value, this method calls the code in the *closure*, which is an\nanonymous function we define and pass as an argument to `unwrap_or_else`. We’ll\ncover closures in more detail in [Chapter 13][ch13]<!-- ignore -->. For now,\nyou just need to know that `unwrap_or_else` will pass the inner value of the\n`Err`, which in this case is the static string `not enough arguments` that we\nadded in Listing 12-9, to our closure in the argument `err` that appears\nbetween the vertical pipes. The code in the closure can then use the `err`\nvalue when it runs.\n\nWe’ve added a new `use` line to bring `process` from the standard library into\nscope. The code in the closure that will be run in the error case is only two\nlines: we print the `err` value and then call `process::exit`. The\n`process::exit` function will stop the program immediately and return the\nnumber that was passed as the exit status code. This is similar to the\n`panic!`-based handling we used in Listing 12-8, but we no longer get all the\nextra output. Let’s try it:\n\n```text\n$ cargo run\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/minigrep`\nProblem parsing arguments: not enough arguments\n```\n\nGreat! This output is much friendlier for our users.\n\n### Extracting Logic from `main`\n\nNow that we’ve finished refactoring the configuration parsing, let’s turn to\nthe program’s logic. As we stated in [“Separation of Concerns for Binary\nProjects”](#separation-of-concerns-for-binary-projects)<!-- ignore -->, we’ll\nextract a function named `run` that will hold all the logic currently in the\n`main` function that isn’t involved with setting up configuration or handling\nerrors. When we’re done, `main` will be concise and easy to verify by\ninspection, and we’ll be able to write tests for all the other logic.\n\nListing 12-11 shows the extracted `run` function. For now, we’re just making\nthe small, incremental improvement of extracting the function. We’re still\ndefining the function in *src/main.rs*.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use std::env;\n# use std::fs;\n# use std::process;\n# \nfn main() {\n    // --snip--\n\n#     let args: Vec<String> = env::args().collect();\n# \n#     let config = Config::new(&args).unwrap_or_else(|err| {\n#         println!(\"Problem parsing arguments: {}\", err);\n#         process::exit(1);\n#     });\n# \n    println!(\"Searching for {}\", config.query);\n    println!(\"In file {}\", config.filename);\n\n    run(config);\n}\n\nfn run(config: Config) {\n    let contents = fs::read_to_string(config.filename)\n        .expect(\"Something went wrong reading the file\");\n\n    println!(\"With text:\\n{}\", contents);\n}\n\n// --snip--\n# \n# struct Config {\n#     query: String,\n#     filename: String,\n# }\n# \n# impl Config {\n#     fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 12-11: Extracting a `run` function containing the\nrest of the program logic</span>\n\nThe `run` function now contains all the remaining logic from `main`, starting\nfrom reading the file. The `run` function takes the `Config` instance as an\nargument.\n\n#### Returning Errors from the `run` Function\n\nWith the remaining program logic separated into the `run` function, we can\nimprove the error handling, as we did with `Config::new` in Listing 12-9.\nInstead of allowing the program to panic by calling `expect`, the `run`\nfunction will return a `Result<T, E>` when something goes wrong. This will let\nus further consolidate into `main` the logic around handling errors in a\nuser-friendly way. Listing 12-12 shows the changes we need to make to the\nsignature and body of `run`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use std::env;\n# use std::fs;\n# use std::process;\nuse std::error::Error;\n\n// --snip--\n\n# \n# fn main() {\n#     let args: Vec<String> = env::args().collect();\n# \n#     let config = Config::new(&args).unwrap_or_else(|err| {\n#         println!(\"Problem parsing arguments: {}\", err);\n#         process::exit(1);\n#     });\n# \n#     println!(\"Searching for {}\", config.query);\n#     println!(\"In file {}\", config.filename);\n# \n#     run(config);\n# }\n# \nfn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.filename)?;\n\n    println!(\"With text:\\n{}\", contents);\n\n    Ok(())\n}\n# \n# struct Config {\n#     query: String,\n#     filename: String,\n# }\n# \n# impl Config {\n#     fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 12-12: Changing the `run` function to return\n`Result`</span>\n\nWe’ve made three significant changes here. First, we changed the return type of\nthe `run` function to `Result<(), Box<dyn Error>>`. This function previously\nreturned the unit type, `()`, and we keep that as the value returned in the\n`Ok` case.\n\nFor the error type, we used the *trait object* `Box<dyn Error>` (and we’ve\nbrought `std::error::Error` into scope with a `use` statement at the top).\nWe’ll cover trait objects in [Chapter 17][ch17]<!-- ignore -->. For now, just\nknow that `Box<dyn Error>` means the function will return a type that\nimplements the `Error` trait, but we don’t have to specify what particular type\nthe return value will be. This gives us flexibility to return error values that\nmay be of different types in different error cases. The `dyn` keyword is short\nfor “dynamic.”\n\nSecond, we’ve removed the call to `expect` in favor of the `?` operator, as we\ntalked about in [Chapter 9][ch9-question-mark]<!-- ignore -->. Rather than\n`panic!` on an error, `?` will return the error value from the current function\nfor the caller to handle.\n\nThird, the `run` function now returns an `Ok` value in the success case. We’ve\ndeclared the `run` function’s success type as `()` in the signature, which\nmeans we need to wrap the unit type value in the `Ok` value. This `Ok(())`\nsyntax might look a bit strange at first, but using `()` like this is the\nidiomatic way to indicate that we’re calling `run` for its side effects only;\nit doesn’t return a value we need.\n\nWhen you run this code, it will compile but will display a warning:\n\n```text\n$ cargo run the poem.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\nwarning: unused `std::result::Result` that must be used\n  --> src/main.rs:19:5\n   |\n19 |     run(config);\n   |     ^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_must_use)]` on by default\n   = note: this `Result` may be an `Err` variant, which should be handled\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.71s\n     Running `target/debug/minigrep the poem.txt`\nSearching for the\nIn file poem.txt\nWith text:\nI’m nobody! Who are you?\nAre you nobody, too?\nThen there’s a pair of us - don’t tell!\nThey’d banish us, you know.\n\nHow dreary to be somebody!\nHow public, like a frog\nTo tell your name the livelong day\nTo an admiring bog!\n\n```\n\nRust tells us that our code ignored the `Result` value and the `Result` value\nmight indicate that an error occurred. But we’re not checking to see whether or\nnot there was an error, and the compiler reminds us that we probably meant to\nhave some error-handling code here! Let’s rectify that problem now.\n\n#### Handling Errors Returned from `run` in `main`\n\nWe’ll check for errors and handle them using a technique similar to one we used\nwith `Config::new` in Listing 12-10, but with a slight difference:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use std::env;\n# use std::error::Error;\n# use std::fs;\n# use std::process;\n# \nfn main() {\n    // --snip--\n\n#     let args: Vec<String> = env::args().collect();\n# \n#     let config = Config::new(&args).unwrap_or_else(|err| {\n#         println!(\"Problem parsing arguments: {}\", err);\n#         process::exit(1);\n#     });\n# \n    println!(\"Searching for {}\", config.query);\n    println!(\"In file {}\", config.filename);\n\n    if let Err(e) = run(config) {\n        println!(\"Application error: {}\", e);\n\n        process::exit(1);\n    }\n}\n# \n# fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     println!(\"With text:\\n{}\", contents);\n# \n#     Ok(())\n# }\n# \n# struct Config {\n#     query: String,\n#     filename: String,\n# }\n# \n# impl Config {\n#     fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n```\n\nWe use `if let` rather than `unwrap_or_else` to check whether `run` returns an\n`Err` value and call `process::exit(1)` if it does. The `run` function doesn’t\nreturn a value that we want to `unwrap` in the same way that `Config::new`\nreturns the `Config` instance. Because `run` returns `()` in the success case,\nwe only care about detecting an error, so we don’t need `unwrap_or_else` to\nreturn the unwrapped value because it would only be `()`.\n\nThe bodies of the `if let` and the `unwrap_or_else` functions are the same in\nboth cases: we print the error and exit.\n\n### Splitting Code into a Library Crate\n\nOur `minigrep` project is looking good so far! Now we’ll split the\n*src/main.rs* file and put some code into the *src/lib.rs* file so we can test\nit and have a *src/main.rs* file with fewer responsibilities.\n\nLet’s move all the code that isn’t the `main` function from *src/main.rs* to\n*src/lib.rs*:\n\n* The `run` function definition\n* The relevant `use` statements\n* The definition of `Config`\n* The `Config::new` function definition\n\nThe contents of *src/lib.rs* should have the signatures shown in Listing 12-13\n(we’ve omitted the bodies of the functions for brevity). Note that this won’t\ncompile until we modify *src/main.rs* in Listing 12-14.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub filename: String,\n}\n\nimpl Config {\n    pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n        // --snip--\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    // --snip--\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     println!(\"With text:\\n{}\", contents);\n# \n#     Ok(())\n}\n```\n\n<span class=\"caption\">Listing 12-13: Moving `Config` and `run` into\n*src/lib.rs*</span>\n\nWe’ve made liberal use of the `pub` keyword: on `Config`, on its fields and its\n`new` method, and on the `run` function. We now have a library crate that has a\npublic API that we can test!\n\nNow we need to bring the code we moved to *src/lib.rs* into the scope of the\nbinary crate in *src/main.rs*, as shown in Listing 12-14.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\nuse std::env;\nuse std::process;\n\nuse minigrep::Config;\n\nfn main() {\n    // --snip--\n#     let args: Vec<String> = env::args().collect();\n# \n#     let config = Config::new(&args).unwrap_or_else(|err| {\n#         println!(\"Problem parsing arguments: {}\", err);\n#         process::exit(1);\n#     });\n# \n#     println!(\"Searching for {}\", config.query);\n#     println!(\"In file {}\", config.filename);\n# \n    if let Err(e) = minigrep::run(config) {\n        // --snip--\n#         println!(\"Application error: {}\", e);\n# \n#         process::exit(1);\n    }\n}\n```\n\n<span class=\"caption\">Listing 12-14: Using the `minigrep` library crate in\n*src/main.rs*</span>\n\nWe add a `use minigrep::Config` line to bring the `Config` type from the\nlibrary crate into the binary crate’s scope, and we prefix the `run` function\nwith our crate name. Now all the functionality should be connected and should\nwork. Run the program with `cargo run` and make sure everything works\ncorrectly.\n\nWhew! That was a lot of work, but we’ve set ourselves up for success in the\nfuture. Now it’s much easier to handle errors, and we’ve made the code more\nmodular. Almost all of our work will be done in *src/lib.rs* from here on out.\n\nLet’s take advantage of this newfound modularity by doing something that would\nhave been difficult with the old code but is easy with the new code: we’ll\nwrite some tests!\n\n[the-static-lifetime]: ch10-03-lifetime-syntax.html#the-static-lifetime\n[ch13]: ch13-00-functional-features.html\n[ch9-custom-types]: ch09-03-to-panic-or-not-to-panic.html#creating-custom-types-for-validation\n[ch9-error-guidelines]: ch09-03-to-panic-or-not-to-panic.html#guidelines-for-error-handling\n[ch9-result]: ch09-02-recoverable-errors-with-result.html\n[ch17]: ch17-00-oop.html\n[ch9-question-mark]: ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator\n", number: Some(SectionNumber([12, 3])), sub_items: [], path: "ch12-03-improving-error-handling-and-modularity.md", parent_names: ["An I/O Project: Building a Command Line Program"] }), Chapter(Chapter { name: "Developing the Library’s Functionality with Test Driven Development", content: "## Developing the Library’s Functionality with Test-Driven Development\n\nNow that we’ve extracted the logic into *src/lib.rs* and left the argument\ncollecting and error handling in *src/main.rs*, it’s much easier to write tests\nfor the core functionality of our code. We can call functions directly with\nvarious arguments and check return values without having to call our binary\nfrom the command line. Feel free to write some tests for the functionality in\nthe `Config::new` and `run` functions on your own.\n\nIn this section, we’ll add the searching logic to the `minigrep` program by\nusing the Test-driven development (TDD) process. This software development\ntechnique follows these steps:\n\n1. Write a test that fails and run it to make sure it fails for the reason you\n   expect.\n2. Write or modify just enough code to make the new test pass.\n3. Refactor the code you just added or changed and make sure the tests\n   continue to pass.\n4. Repeat from step 1!\n\nThis process is just one of many ways to write software, but TDD can help drive\ncode design as well. Writing the test before you write the code that makes the\ntest pass helps to maintain high test coverage throughout the process.\n\nWe’ll test drive the implementation of the functionality that will actually do\nthe searching for the query string in the file contents and produce a list of\nlines that match the query. We’ll add this functionality in a function called\n`search`.\n\n### Writing a Failing Test\n\nBecause we don’t need them anymore, let’s remove the `println!` statements from\n*src/lib.rs* and *src/main.rs* that we used to check the program’s behavior.\nThen, in *src/lib.rs*, we’ll add a `tests` module with a test function, as we\ndid in [Chapter 11][ch11-anatomy]<!-- ignore -->. The test function specifies\nthe behavior we want the `search` function to have: it will take a query and\nthe text to search for the query in, and it will return only the lines from the\ntext that contain the query. Listing 12-15 shows this test, which won’t compile\nyet.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n# }\n# \n# impl Config {\n#     pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n# \n# pub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     Ok(())\n# }\n# \n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn one_result() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 12-15: Creating a failing test for the `search`\nfunction we wish we had</span>\n\nThis test searches for the string `\"duct\"`. The text we’re searching is three\nlines, only one of which contains `\"duct\"`. We assert that the value returned\nfrom the `search` function contains only the line we expect.\n\nWe aren’t able to run this test and watch it fail because the test doesn’t even\ncompile: the `search` function doesn’t exist yet! So now we’ll add just enough\ncode to get the test to compile and run by adding a definition of the `search`\nfunction that always returns an empty vector, as shown in Listing 12-16. Then\nthe test should compile and fail because an empty vector doesn’t match a vector\ncontaining the line `\"safe, fast, productive.\"`\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n# }\n# \n# impl Config {\n#     pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n# \n# pub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     Ok(())\n# }\n# \npub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n    vec![]\n}\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn one_result() {\n#         let query = \"duct\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\";\n# \n#         assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n#     }\n# }\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 12-16: Defining just enough of the `search`\nfunction so our test will compile</span>\n\nNotice that we need an explicit lifetime `\'a` defined in the signature of\n`search` and used with the `contents` argument and the return value. Recall in\n[Chapter 10][ch10-lifetimes]<!-- ignore --> that the lifetime parameters\nspecify which argument lifetime is connected to the lifetime of the return\nvalue. In this case, we indicate that the returned vector should contain string\nslices that reference slices of the argument `contents` (rather than the\nargument `query`).\n\nIn other words, we tell Rust that the data returned by the `search` function\nwill live as long as the data passed into the `search` function in the\n`contents` argument. This is important! The data referenced *by* a slice needs\nto be valid for the reference to be valid; if the compiler assumes we’re making\nstring slices of `query` rather than `contents`, it will do its safety checking\nincorrectly.\n\nIf we forget the lifetime annotations and try to compile this function, we’ll\nget this error:\n\n```text\n$ cargo build\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\nerror[E0106]: missing lifetime specifier\n  --> src/lib.rs:28:51\n   |\n28 | pub fn search(query: &str, contents: &str) -> Vec<&str> {\n   |                                                   ^ expected lifetime parameter\n   |\n   = help: this function\'s return type contains a borrowed value, but the signature does not say whether it is borrowed from `query` or `contents`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0106`.\nerror: could not compile `minigrep`.\n\nTo learn more, run the command again with --verbose.\n```\n\nRust can’t possibly know which of the two arguments we need, so we need to tell\nit. Because `contents` is the argument that contains all of our text and we\nwant to return the parts of that text that match, we know `contents` is the\nargument that should be connected to the return value using the lifetime syntax.\n\nOther programming languages don’t require you to connect arguments to return\nvalues in the signature. Although this might seem strange, it will get easier\nover time. You might want to compare this example with the [“Validating\nReferences with Lifetimes”][validating-references-with-lifetimes]<!-- ignore\n--> section in Chapter 10.\n\nNow let’s run the test:\n\n```text\n$ cargo test\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished test [unoptimized + debuginfo] target(s) in 0.97s\n     Running target/debug/deps/minigrep-4672b652f7794785\n\nrunning 1 test\ntest tests::one_result ... FAILED\n\nfailures:\n\n---- tests::one_result stdout ----\nthread \'main\' panicked at \'assertion failed: `(left == right)`\n  left: `[\"safe, fast, productive.\"]`,\n right: `[]`\', src/lib.rs:44:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\n\nfailures:\n    tests::one_result\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass \'--lib\'\n```\n\nGreat, the test fails, exactly as we expected. Let’s get the test to pass!\n\n### Writing Code to Pass the Test\n\nCurrently, our test is failing because we always return an empty vector. To fix\nthat and implement `search`, our program needs to follow these steps:\n\n* Iterate through each line of the contents.\n* Check whether the line contains our query string.\n* If it does, add it to the list of values we’re returning.\n* If it doesn’t, do nothing.\n* Return the list of results that match.\n\nLet’s work through each step, starting with iterating through lines.\n\n#### Iterating Through Lines with the `lines` Method\n\nRust has a helpful method to handle line-by-line iteration of strings,\nconveniently named `lines`, that works as shown in Listing 12-17. Note this\nwon’t compile yet.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n# }\n# \n# impl Config {\n#     pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n# \n# pub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     Ok(())\n# }\n# \npub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n    for line in contents.lines() {\n        // do something with line\n    }\n}\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn one_result() {\n#         let query = \"duct\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\";\n# \n#         assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 12-17: Iterating through each line in `contents`\n</span>\n\nThe `lines` method returns an iterator. We’ll talk about iterators in depth in\n[Chapter 13][ch13-iterators]<!-- ignore -->, but recall that you saw this way of using an\niterator in [Listing 3-5][ch3-iter]<!-- ignore -->, where we used a `for` loop\nwith an iterator to run some code on each item in a collection.\n\n#### Searching Each Line for the Query\n\nNext, we’ll check whether the current line contains our query string.\nFortunately, strings have a helpful method named `contains` that does this for\nus! Add a call to the `contains` method in the `search` function, as shown in\nListing 12-18. Note this still won’t compile yet.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n# }\n# \n# impl Config {\n#     pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n# \n# pub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     Ok(())\n# }\n# \npub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n    for line in contents.lines() {\n        if line.contains(query) {\n            // do something with line\n        }\n    }\n}\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn one_result() {\n#         let query = \"duct\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\";\n# \n#         assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 12-18: Adding functionality to see whether the\nline contains the string in `query`</span>\n\n#### Storing Matching Lines\n\nWe also need a way to store the lines that contain our query string. For that,\nwe can make a mutable vector before the `for` loop and call the `push` method\nto store a `line` in the vector. After the `for` loop, we return the vector, as\nshown in Listing 12-19.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n# }\n# \n# impl Config {\n#     pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n# \n# pub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     Ok(())\n# }\n# \npub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn one_result() {\n#         let query = \"duct\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\";\n# \n#         assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 12-19: Storing the lines that match so we can\nreturn them</span>\n\nNow the `search` function should return only the lines that contain `query`,\nand our test should pass. Let’s run the test:\n\n```text\n$ cargo test\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished test [unoptimized + debuginfo] target(s) in 1.22s\n     Running target/debug/deps/minigrep-4672b652f7794785\n\nrunning 1 test\ntest tests::one_result ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/debug/deps/minigrep-caf9dbee196c78b9\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests minigrep\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\nOur test passed, so we know it works!\n\nAt this point, we could consider opportunities for refactoring the\nimplementation of the search function while keeping the tests passing to\nmaintain the same functionality. The code in the search function isn’t too bad,\nbut it doesn’t take advantage of some useful features of iterators. We’ll\nreturn to this example in [Chapter 13][ch13-iterators]<!-- ignore -->, where we’ll\nexplore iterators in detail, and look at how to improve it.\n\n#### Using the `search` Function in the `run` Function\n\nNow that the `search` function is working and tested, we need to call `search`\nfrom our `run` function. We need to pass the `config.query` value and the\n`contents` that `run` reads from the file to the `search` function. Then `run`\nwill print each line returned from `search`:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n# }\n# \n# impl Config {\n#     pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n# \npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.filename)?;\n\n    for line in search(&config.query, &contents) {\n        println!(\"{}\", line);\n    }\n\n    Ok(())\n}\n# \n# pub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.contains(query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn one_result() {\n#         let query = \"duct\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\";\n# \n#         assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n#     }\n# }\n```\n\nWe’re still using a `for` loop to return each line from `search` and print it.\n\nNow the entire program should work! Let’s try it out, first with a word that\nshould return exactly one line from the Emily Dickinson poem, “frog”:\n\n```text\n$ cargo run frog poem.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.38s\n     Running `target/debug/minigrep frog poem.txt`\nHow public, like a frog\n```\n\nCool! Now let’s try a word that will match multiple lines, like “body”:\n\n```text\n$ cargo run body poem.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep body poem.txt`\nI’m nobody! Who are you?\nAre you nobody, too?\nHow dreary to be somebody!\n```\n\nAnd finally, let’s make sure that we don’t get any lines when we search for a\nword that isn’t anywhere in the poem, such as “monomorphization”:\n\n```text\n$ cargo run monomorphization poem.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep monomorphization poem.txt`\n```\n\nExcellent! We’ve built our own mini version of a classic tool and learned a lot\nabout how to structure applications. We’ve also learned a bit about file input\nand output, lifetimes, testing, and command line parsing.\n\nTo round out this project, we’ll briefly demonstrate how to work with\nenvironment variables and how to print to standard error, both of which are\nuseful when you’re writing command line programs.\n\n[validating-references-with-lifetimes]:\nch10-03-lifetime-syntax.html#validating-references-with-lifetimes\n[ch11-anatomy]: ch11-01-writing-tests.html#the-anatomy-of-a-test-function\n[ch10-lifetimes]: ch10-03-lifetime-syntax.html\n[ch3-iter]: ch03-05-control-flow.html#looping-through-a-collection-with-for\n[ch13-iterators]: ch13-02-iterators.html\n", number: Some(SectionNumber([12, 4])), sub_items: [], path: "ch12-04-testing-the-librarys-functionality.md", parent_names: ["An I/O Project: Building a Command Line Program"] }), Chapter(Chapter { name: "Working with Environment Variables", content: "## Working with Environment Variables\n\nWe’ll improve `minigrep` by adding an extra feature: an option for\ncase-insensitive searching that the user can turn on via an environment\nvariable. We could make this feature a command line option and require that\nusers enter it each time they want it to apply, but instead we’ll use an\nenvironment variable. Doing so allows our users to set the environment variable\nonce and have all their searches be case insensitive in that terminal session.\n\n### Writing a Failing Test for the Case-Insensitive `search` Function\n\nWe want to add a new `search_case_insensitive` function that we’ll call when\nthe environment variable is on. We’ll continue to follow the TDD process, so\nthe first step is again to write a failing test. We’ll add a new test for the\nnew `search_case_insensitive` function and rename our old test from\n`one_result` to `case_sensitive` to clarify the differences between the two\ntests, as shown in Listing 12-20.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n# }\n# \n# impl Config {\n#     pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n# \n# pub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     for line in search(&config.query, &contents) {\n#         println!(\"{}\", line);\n#     }\n# \n#     Ok(())\n# }\n# \n# pub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.contains(query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 12-20: Adding a new failing test for the\ncase-insensitive function we’re about to add</span>\n\nNote that we’ve edited the old test’s `contents` too. We’ve added a new line\nwith the text `\"Duct tape.\"` using a capital D that shouldn’t match the query\n`\"duct\"` when we’re searching in a case-sensitive manner. Changing the old test\nin this way helps ensure that we don’t accidentally break the case-sensitive\nsearch functionality that we’ve already implemented. This test should pass now\nand should continue to pass as we work on the case-insensitive search.\n\nThe new test for the case-*insensitive* search uses `\"rUsT\"` as its query. In\nthe `search_case_insensitive` function we’re about to add, the query `\"rUsT\"`\nshould match the line containing `\"Rust:\"` with a capital R and match the line\n`\"Trust me.\"` even though both have different casing from the query. This is\nour failing test, and it will fail to compile because we haven’t yet defined\nthe `search_case_insensitive` function. Feel free to add a skeleton\nimplementation that always returns an empty vector, similar to the way we did\nfor the `search` function in Listing 12-16 to see the test compile and fail.\n\n### Implementing the `search_case_insensitive` Function\n\nThe `search_case_insensitive` function, shown in Listing 12-21, will be almost\nthe same as the `search` function. The only difference is that we’ll lowercase\nthe `query` and each `line` so whatever the case of the input arguments,\nthey’ll be the same case when we check whether the line contains the query.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n# }\n# \n# impl Config {\n#     pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n# \n# pub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     for line in search(&config.query, &contents) {\n#         println!(\"{}\", line);\n#     }\n# \n#     Ok(())\n# }\n# \n# pub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.contains(query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \npub fn search_case_insensitive<\'a>(\n    query: &str,\n    contents: &\'a str,\n) -> Vec<&\'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn case_sensitive() {\n#         let query = \"duct\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Duct tape.\";\n# \n#         assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n#     }\n# \n#     #[test]\n#     fn case_insensitive() {\n#         let query = \"rUsT\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Trust me.\";\n# \n#         assert_eq!(\n#             vec![\"Rust:\", \"Trust me.\"],\n#             search_case_insensitive(query, contents)\n#         );\n#     }\n# }\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 12-21: Defining the `search_case_insensitive`\nfunction to lowercase the query and the line before comparing them</span>\n\nFirst, we lowercase the `query` string and store it in a shadowed variable with\nthe same name. Calling `to_lowercase` on the query is necessary so no matter\nwhether the user’s query is `\"rust\"`, `\"RUST\"`, `\"Rust\"`, or `\"rUsT\"`, we’ll\ntreat the query as if it were `\"rust\"` and be insensitive to the case.\n\nNote that `query` is now a `String` rather than a string slice, because calling\n`to_lowercase` creates new data rather than referencing existing data. Say the\nquery is `\"rUsT\"`, as an example: that string slice doesn’t contain a lowercase\n`u` or `t` for us to use, so we have to allocate a new `String` containing\n`\"rust\"`. When we pass `query` as an argument to the `contains` method now, we\nneed to add an ampersand because the signature of `contains` is defined to take\na string slice.\n\nNext, we add a call to `to_lowercase` on each `line` before we check whether it\ncontains `query` to lowercase all characters. Now that we’ve converted `line`\nand `query` to lowercase, we’ll find matches no matter what the case of the\nquery is.\n\nLet’s see if this implementation passes the tests:\n\n```text\n$ cargo test\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished test [unoptimized + debuginfo] target(s) in 1.33s\n     Running target/debug/deps/minigrep-4672b652f7794785\n\nrunning 2 tests\ntest tests::case_insensitive ... ok\ntest tests::case_sensitive ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/debug/deps/minigrep-caf9dbee196c78b9\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests minigrep\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\nGreat! They passed. Now, let’s call the new `search_case_insensitive` function\nfrom the `run` function. First, we’ll add a configuration option to the\n`Config` struct to switch between case-sensitive and case-insensitive search.\nAdding this field will cause compiler errors because we aren’t initializing\nthis field anywhere yet:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n# use std::error::Error;\n# use std::fs;\n# \npub struct Config {\n    pub query: String,\n    pub filename: String,\n    pub case_sensitive: bool,\n}\n# \n# impl Config {\n#     pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n# \n# pub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     let results = if config.case_sensitive {\n#         search(&config.query, &contents)\n#     } else {\n#         search_case_insensitive(&config.query, &contents)\n#     };\n# \n#     for line in results {\n#         println!(\"{}\", line);\n#     }\n# \n#     Ok(())\n# }\n# \n# pub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.contains(query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n# pub fn search_case_insensitive<\'a>(\n#     query: &str,\n#     contents: &\'a str,\n# ) -> Vec<&\'a str> {\n#     let query = query.to_lowercase();\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.to_lowercase().contains(&query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn case_sensitive() {\n#         let query = \"duct\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Duct tape.\";\n# \n#         assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n#     }\n# \n#     #[test]\n#     fn case_insensitive() {\n#         let query = \"rUsT\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Trust me.\";\n# \n#         assert_eq!(\n#             vec![\"Rust:\", \"Trust me.\"],\n#             search_case_insensitive(query, contents)\n#         );\n#     }\n# }\n# \n# fn main() {}\n```\n\nNote that we added the `case_sensitive` field that holds a Boolean. Next, we\nneed the `run` function to check the `case_sensitive` field’s value and use\nthat to decide whether to call the `search` function or the\n`search_case_insensitive` function, as shown in Listing 12-22. Note this still\nwon’t compile yet.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n#     pub case_sensitive: bool,\n# }\n# \n# impl Config {\n#     pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n# \npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.filename)?;\n\n    let results = if config.case_sensitive {\n        search(&config.query, &contents)\n    } else {\n        search_case_insensitive(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{}\", line);\n    }\n\n    Ok(())\n}\n# \n# pub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.contains(query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n# pub fn search_case_insensitive<\'a>(\n#     query: &str,\n#     contents: &\'a str,\n# ) -> Vec<&\'a str> {\n#     let query = query.to_lowercase();\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.to_lowercase().contains(&query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn case_sensitive() {\n#         let query = \"duct\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Duct tape.\";\n# \n#         assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n#     }\n# \n#     #[test]\n#     fn case_insensitive() {\n#         let query = \"rUsT\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Trust me.\";\n# \n#         assert_eq!(\n#             vec![\"Rust:\", \"Trust me.\"],\n#             search_case_insensitive(query, contents)\n#         );\n#     }\n# }\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 12-22: Calling either `search` or\n`search_case_insensitive` based on the value in `config.case_sensitive`</span>\n\nFinally, we need to check for the environment variable. The functions for\nworking with environment variables are in the `env` module in the standard\nlibrary, so we want to bring that module into scope with a `use std::env;` line\nat the top of *src/lib.rs*. Then we’ll use the `var` function from the `env`\nmodule to check for an environment variable named `CASE_INSENSITIVE`, as shown\nin Listing 12-23.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nuse std::env;\n// --snip--\n\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n#     pub case_sensitive: bool,\n# }\n# \nimpl Config {\n    pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let filename = args[2].clone();\n\n        let case_sensitive = env::var(\"CASE_INSENSITIVE\").is_err();\n\n        Ok(Config {\n            query,\n            filename,\n            case_sensitive,\n        })\n    }\n}\n# \n# pub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     let results = if config.case_sensitive {\n#         search(&config.query, &contents)\n#     } else {\n#         search_case_insensitive(&config.query, &contents)\n#     };\n# \n#     for line in results {\n#         println!(\"{}\", line);\n#     }\n# \n#     Ok(())\n# }\n# \n# pub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.contains(query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n# pub fn search_case_insensitive<\'a>(\n#     query: &str,\n#     contents: &\'a str,\n# ) -> Vec<&\'a str> {\n#     let query = query.to_lowercase();\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.to_lowercase().contains(&query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn case_sensitive() {\n#         let query = \"duct\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Duct tape.\";\n# \n#         assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n#     }\n# \n#     #[test]\n#     fn case_insensitive() {\n#         let query = \"rUsT\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Trust me.\";\n# \n#         assert_eq!(\n#             vec![\"Rust:\", \"Trust me.\"],\n#             search_case_insensitive(query, contents)\n#         );\n#     }\n# }\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 12-23: Checking for an environment variable named\n`CASE_INSENSITIVE`</span>\n\nHere, we create a new variable `case_sensitive`. To set its value, we call the\n`env::var` function and pass it the name of the `CASE_INSENSITIVE` environment\nvariable. The `env::var` function returns a `Result` that will be the successful\n`Ok` variant that contains the value of the environment variable if the\nenvironment variable is set. It will return the `Err` variant if the\nenvironment variable is not set.\n\nWe’re using the `is_err` method on the `Result` to check whether it’s an error\nand therefore unset, which means it *should* do a case-sensitive search. If the\n`CASE_INSENSITIVE` environment variable is set to anything, `is_err` will\nreturn false and the program will perform a case-insensitive search. We don’t\ncare about the *value* of the environment variable, just whether it’s set or\nunset, so we’re checking `is_err` rather than using `unwrap`, `expect`, or any\nof the other methods we’ve seen on `Result`.\n\nWe pass the value in the `case_sensitive` variable to the `Config` instance so\nthe `run` function can read that value and decide whether to call `search` or\n`search_case_insensitive`, as we implemented in Listing 12-22.\n\nLet’s give it a try! First, we’ll run our program without the environment\nvariable set and with the query `to`, which should match any line that contains\nthe word “to” in all lowercase:\n\n```text\n$ cargo run to poem.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep to poem.txt`\nAre you nobody, too?\nHow dreary to be somebody!\n```\n\nLooks like that still works! Now, let’s run the program with `CASE_INSENSITIVE`\nset to `1` but with the same query `to`.\n\nIf you’re using PowerShell, you will need to set the environment variable and\nrun the program in two commands rather than one:\n\n```text\n$ $env:CASE_INSENSITIVE=1\n$ cargo run to poem.txt\n```\n\nWe should get lines that contain “to” that might have uppercase letters:\n\n<!-- manual-regeneration\ncd listings/ch12-an-io-project/listing-12-23\nCASE_INSENSITIVE=1 cargo run to poem.txt\ncan\'t extract because of the environment variable\n-->\n\n```text\n$ CASE_INSENSITIVE=1 cargo run to poem.txt\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep to poem.txt`\nAre you nobody, too?\nHow dreary to be somebody!\nTo tell your name the livelong day\nTo an admiring bog!\n```\n\nExcellent, we also got lines containing “To”! Our `minigrep` program can now do\ncase-insensitive searching controlled by an environment variable. Now you know\nhow to manage options set using either command line arguments or environment\nvariables.\n\nSome programs allow arguments *and* environment variables for the same\nconfiguration. In those cases, the programs decide that one or the other takes\nprecedence. For another exercise on your own, try controlling case\ninsensitivity through either a command line argument or an environment\nvariable. Decide whether the command line argument or the environment variable\nshould take precedence if the program is run with one set to case sensitive and\none set to case insensitive.\n\nThe `std::env` module contains many more useful features for dealing with\nenvironment variables: check out its documentation to see what is available.\n", number: Some(SectionNumber([12, 5])), sub_items: [], path: "ch12-05-working-with-environment-variables.md", parent_names: ["An I/O Project: Building a Command Line Program"] }), Chapter(Chapter { name: "Writing Error Messages to Standard Error Instead of Standard Output", content: "## Writing Error Messages to Standard Error Instead of Standard Output\n\nAt the moment, we’re writing all of our output to the terminal using the\n`println!` macro. Most terminals provide two kinds of output: *standard\noutput* (`stdout`) for general information and *standard error* (`stderr`)\nfor error messages. This distinction enables users to choose to direct the\nsuccessful output of a program to a file but still print error messages to the\nscreen.\n\nThe `println!` macro is only capable of printing to standard output, so we\nhave to use something else to print to standard error.\n\n### Checking Where Errors Are Written\n\nFirst, let’s observe how the content printed by `minigrep` is currently being\nwritten to standard output, including any error messages we want to write to\nstandard error instead. We’ll do that by redirecting the standard output stream\nto a file while also intentionally causing an error. We won’t redirect the\nstandard error stream, so any content sent to standard error will continue to\ndisplay on the screen.\n\nCommand line programs are expected to send error messages to the standard error\nstream so we can still see error messages on the screen even if we redirect the\nstandard output stream to a file. Our program is not currently well-behaved:\nwe’re about to see that it saves the error message output to a file instead!\n\nThe way to demonstrate this behavior is by running the program with `>` and the\nfilename, *output.txt*, that we want to redirect the standard output stream to.\nWe won’t pass any arguments, which should cause an error:\n\n```text\n$ cargo run > output.txt\n```\n\nThe `>` syntax tells the shell to write the contents of standard output to\n*output.txt* instead of the screen. We didn’t see the error message we were\nexpecting printed to the screen, so that means it must have ended up in the\nfile. This is what *output.txt* contains:\n\n```text\nProblem parsing arguments: not enough arguments\n```\n\nYup, our error message is being printed to standard output. It’s much more\nuseful for error messages like this to be printed to standard error so only\ndata from a successful run ends up in the file. We’ll change that.\n\n### Printing Errors to Standard Error\n\nWe’ll use the code in Listing 12-24 to change how error messages are printed.\nBecause of the refactoring we did earlier in this chapter, all the code that\nprints error messages is in one function, `main`. The standard library provides\nthe `eprintln!` macro that prints to the standard error stream, so let’s change\nthe two places we were calling `println!` to print errors to use `eprintln!`\ninstead.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use std::env;\n# use std::process;\n# \n# use minigrep::Config;\n# \nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::new(&args).unwrap_or_else(|err| {\n        eprintln!(\"Problem parsing arguments: {}\", err);\n        process::exit(1);\n    });\n\n    if let Err(e) = minigrep::run(config) {\n        eprintln!(\"Application error: {}\", e);\n\n        process::exit(1);\n    }\n}\n```\n\n<span class=\"caption\">Listing 12-24: Writing error messages to standard error\ninstead of standard output using `eprintln!`</span>\n\nAfter changing `println!` to `eprintln!`, let’s run the program again in the\nsame way, without any arguments and redirecting standard output with `>`:\n\n```text\n$ cargo run > output.txt\nProblem parsing arguments: not enough arguments\n```\n\nNow we see the error onscreen and *output.txt* contains nothing, which is the\nbehavior we expect of command line programs.\n\nLet’s run the program again with arguments that don’t cause an error but still\nredirect standard output to a file, like so:\n\n```text\n$ cargo run to poem.txt > output.txt\n```\n\nWe won’t see any output to the terminal, and *output.txt* will contain our\nresults:\n\n<span class=\"filename\">Filename: output.txt</span>\n\n```text\nAre you nobody, too?\nHow dreary to be somebody!\n```\n\nThis demonstrates that we’re now using standard output for successful output\nand standard error for error output as appropriate.\n\n## Summary\n\nThis chapter recapped some of the major concepts you’ve learned so far and\ncovered how to perform common I/O operations in Rust. By using command line\narguments, files, environment variables, and the `eprintln!` macro for printing\nerrors, you’re now prepared to write command line applications. By using the\nconcepts in previous chapters, your code will be well organized, store data\neffectively in the appropriate data structures, handle errors nicely, and be\nwell tested.\n\nNext, we’ll explore some Rust features that were influenced by functional\nlanguages: closures and iterators.\n", number: Some(SectionNumber([12, 6])), sub_items: [], path: "ch12-06-writing-to-stderr-instead-of-stdout.md", parent_names: ["An I/O Project: Building a Command Line Program"] })], path: "ch12-00-an-io-project.md", parent_names: [] }), Chapter(Chapter { name: "Functional Language Features: Iterators and Closures", content: "# Functional Language Features: Iterators and Closures\n\nRust’s design has taken inspiration from many existing languages and\ntechniques, and one significant influence is *functional programming*.\nProgramming in a functional style often includes using functions as values by\npassing them in arguments, returning them from other functions, assigning them\nto variables for later execution, and so forth.\n\nIn this chapter, we won’t debate the issue of what functional programming is or\nisn’t but will instead discuss some features of Rust that are similar to\nfeatures in many languages often referred to as functional.\n\nMore specifically, we’ll cover:\n\n* *Closures*, a function-like construct you can store in a variable\n* *Iterators*, a way of processing a series of elements\n* How to use these two features to improve the I/O project in Chapter 12\n* The performance of these two features (Spoiler alert: they’re faster than you\n  might think!)\n\nOther Rust features, such as pattern matching and enums, which we’ve covered in\nother chapters, are influenced by the functional style as well. Mastering\nclosures and iterators is an important part of writing idiomatic, fast Rust\ncode, so we’ll devote this entire chapter to them.\n", number: Some(SectionNumber([13])), sub_items: [Chapter(Chapter { name: "Closures: Anonymous Functions that Can Capture Their Environment", content: "## Closures: Anonymous Functions that Can Capture Their Environment\n\nRust’s closures are anonymous functions you can save in a variable or pass as\narguments to other functions. You can create the closure in one place and then\ncall the closure to evaluate it in a different context. Unlike functions,\nclosures can capture values from the scope in which they’re defined. We’ll\ndemonstrate how these closure features allow for code reuse and behavior\ncustomization.\n\n### Creating an Abstraction of Behavior with Closures\n\nLet’s work on an example of a situation in which it’s useful to store a closure\nto be executed later. Along the way, we’ll talk about the syntax of closures,\ntype inference, and traits.\n\nConsider this hypothetical situation: we work at a startup that’s making an app\nto generate custom exercise workout plans. The backend is written in Rust, and\nthe algorithm that generates the workout plan takes into account many factors,\nsuch as the app user’s age, body mass index, exercise preferences, recent\nworkouts, and an intensity number they specify. The actual algorithm used isn’t\nimportant in this example; what’s important is that this calculation takes a\nfew seconds. We want to call this algorithm only when we need to and only call\nit once so we don’t make the user wait more than necessary.\n\nWe’ll simulate calling this hypothetical algorithm with the function\n`simulated_expensive_calculation` shown in Listing 13-1, which will print\n`calculating slowly...`, wait for two seconds, and then return whatever number\nwe passed in.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::thread;\nuse std::time::Duration;\n\nfn simulated_expensive_calculation(intensity: u32) -> u32 {\n    println!(\"calculating slowly...\");\n    thread::sleep(Duration::from_secs(2));\n    intensity\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 13-1: A function to stand in for a hypothetical\ncalculation that takes about 2 seconds to run</span>\n\nNext is the `main` function, which contains the parts of the workout app\nimportant for this example. This function represents the code that the app will\ncall when a user asks for a workout plan. Because the interaction with the\napp’s frontend isn’t relevant to the use of closures, we’ll hardcode values\nrepresenting inputs to our program and print the outputs.\n\nThe required inputs are these:\n\n* An intensity number from the user, which is specified when they request\n  a workout to indicate whether they want a low-intensity workout or a\n  high-intensity workout\n* A random number that will generate some variety in the workout plans\n\nThe output will be the recommended workout plan. Listing 13-2 shows the `main`\nfunction we’ll use.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# use std::thread;\n# use std::time::Duration;\n# \n# fn simulated_expensive_calculation(intensity: u32) -> u32 {\n#     println!(\"calculating slowly...\");\n#     thread::sleep(Duration::from_secs(2));\n#     intensity\n# }\n# \n# fn generate_workout(intensity: u32, random_number: u32) {}\n# \nfn main() {\n    let simulated_user_specified_value = 10;\n    let simulated_random_number = 7;\n\n    generate_workout(simulated_user_specified_value, simulated_random_number);\n}\n```\n\n<span class=\"caption\">Listing 13-2: A `main` function with hardcoded values to\nsimulate user input and random number generation</span>\n\nWe’ve hardcoded the variable `simulated_user_specified_value` as 10 and the\nvariable `simulated_random_number` as 7 for simplicity’s sake; in an actual\nprogram, we’d get the intensity number from the app frontend, and we’d use the\n`rand` crate to generate a random number, as we did in the Guessing Game\nexample in Chapter 2. The `main` function calls a `generate_workout` function\nwith the simulated input values.\n\nNow that we have the context, let’s get to the algorithm. The function\n`generate_workout` in Listing 13-3 contains the business logic of the\napp that we’re most concerned with in this example. The rest of the code\nchanges in this example will be made to this function.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# use std::thread;\n# use std::time::Duration;\n# \n# fn simulated_expensive_calculation(intensity: u32) -> u32 {\n#     println!(\"calculating slowly...\");\n#     thread::sleep(Duration::from_secs(2));\n#     intensity\n# }\n# \nfn generate_workout(intensity: u32, random_number: u32) {\n    if intensity < 25 {\n        println!(\n            \"Today, do {} pushups!\",\n            simulated_expensive_calculation(intensity)\n        );\n        println!(\n            \"Next, do {} situps!\",\n            simulated_expensive_calculation(intensity)\n        );\n    } else {\n        if random_number == 3 {\n            println!(\"Take a break today! Remember to stay hydrated!\");\n        } else {\n            println!(\n                \"Today, run for {} minutes!\",\n                simulated_expensive_calculation(intensity)\n            );\n        }\n    }\n}\n# \n# fn main() {\n#     let simulated_user_specified_value = 10;\n#     let simulated_random_number = 7;\n# \n#     generate_workout(simulated_user_specified_value, simulated_random_number);\n# }\n```\n\n<span class=\"caption\">Listing 13-3: The business logic that prints the workout\nplans based on the inputs and calls to the `simulated_expensive_calculation`\nfunction</span>\n\nThe code in Listing 13-3 has multiple calls to the slow calculation function.\nThe first `if` block calls `simulated_expensive_calculation` twice, the `if`\ninside the outer `else` doesn’t call it at all, and the code inside the\nsecond `else` case calls it once.\n\nThe desired behavior of the `generate_workout` function is to first check\nwhether the user wants a low-intensity workout (indicated by a number less than\n25) or a high-intensity workout (a number of 25 or greater).\n\nLow-intensity workout plans will recommend a number of push-ups and sit-ups\nbased on the complex algorithm we’re simulating.\n\nIf the user wants a high-intensity workout, there’s some additional logic: if\nthe value of the random number generated by the app happens to be 3, the app\nwill recommend a break and hydration. If not, the user will get a number of\nminutes of running based on the complex algorithm.\n\nThis code works the way the business wants it to now, but let’s say the data\nscience team decides that we need to make some changes to the way we call the\n`simulated_expensive_calculation` function in the future. To simplify the\nupdate when those changes happen, we want to refactor this code so it calls the\n`simulated_expensive_calculation` function only once. We also want to cut the\nplace where we’re currently unnecessarily calling the function twice without\nadding any other calls to that function in the process. That is, we don’t want\nto call it if the result isn’t needed, and we still want to call it only once.\n\n#### Refactoring Using Functions\n\nWe could restructure the workout program in many ways. First, we’ll try\nextracting the duplicated call to the `simulated_expensive_calculation`\nfunction into a variable, as shown in Listing 13-4.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# use std::thread;\n# use std::time::Duration;\n# \n# fn simulated_expensive_calculation(intensity: u32) -> u32 {\n#     println!(\"calculating slowly...\");\n#     thread::sleep(Duration::from_secs(2));\n#     intensity\n# }\n# \nfn generate_workout(intensity: u32, random_number: u32) {\n    let expensive_result = simulated_expensive_calculation(intensity);\n\n    if intensity < 25 {\n        println!(\"Today, do {} pushups!\", expensive_result);\n        println!(\"Next, do {} situps!\", expensive_result);\n    } else {\n        if random_number == 3 {\n            println!(\"Take a break today! Remember to stay hydrated!\");\n        } else {\n            println!(\"Today, run for {} minutes!\", expensive_result);\n        }\n    }\n}\n# \n# fn main() {\n#     let simulated_user_specified_value = 10;\n#     let simulated_random_number = 7;\n# \n#     generate_workout(simulated_user_specified_value, simulated_random_number);\n# }\n```\n\n<span class=\"caption\">Listing 13-4: Extracting the calls to\n`simulated_expensive_calculation` to one place and storing the result in the\n`expensive_result` variable</span>\n\nThis change unifies all the calls to `simulated_expensive_calculation` and\nsolves the problem of the first `if` block unnecessarily calling the function\ntwice. Unfortunately, we’re now calling this function and waiting for the\nresult in all cases, which includes the inner `if` block that doesn’t use the\nresult value at all.\n\nWe want to define code in one place in our program, but only *execute* that\ncode where we actually need the result. This is a use case for closures!\n\n#### Refactoring with Closures to Store Code\n\nInstead of always calling the `simulated_expensive_calculation` function before\nthe `if` blocks, we can define a closure and store the *closure* in a variable\nrather than storing the result of the function call, as shown in Listing 13-5.\nWe can actually move the whole body of `simulated_expensive_calculation` within\nthe closure we’re introducing here.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# use std::thread;\n# use std::time::Duration;\n# \n# fn generate_workout(intensity: u32, random_number: u32) {\n    let expensive_closure = |num| {\n        println!(\"calculating slowly...\");\n        thread::sleep(Duration::from_secs(2));\n        num\n    };\n# \n#     if intensity < 25 {\n#         println!(\"Today, do {} pushups!\", expensive_closure(intensity));\n#         println!(\"Next, do {} situps!\", expensive_closure(intensity));\n#     } else {\n#         if random_number == 3 {\n#             println!(\"Take a break today! Remember to stay hydrated!\");\n#         } else {\n#             println!(\n#                 \"Today, run for {} minutes!\",\n#                 expensive_closure(intensity)\n#             );\n#         }\n#     }\n# }\n# \n# fn main() {\n#     let simulated_user_specified_value = 10;\n#     let simulated_random_number = 7;\n# \n#     generate_workout(simulated_user_specified_value, simulated_random_number);\n# }\n```\n\n<span class=\"caption\">Listing 13-5: Defining a closure and storing it in the\n`expensive_closure` variable</span>\n\nThe closure definition comes after the `=` to assign it to the variable\n`expensive_closure`. To define a closure, we start with a pair of vertical\npipes (`|`), inside which we specify the parameters to the closure; this syntax\nwas chosen because of its similarity to closure definitions in Smalltalk and\nRuby. This closure has one parameter named `num`: if we had more than one\nparameter, we would separate them with commas, like `|param1, param2|`.\n\nAfter the parameters, we place curly brackets that hold the body of the\nclosure—these are optional if the closure body is a single expression. The end\nof the closure, after the curly brackets, needs a semicolon to complete the\n`let` statement. The value returned from the last line in the closure body\n(`num`) will be the value returned from the closure when it’s called, because\nthat line doesn’t end in a semicolon; just as in function bodies.\n\nNote that this `let` statement means `expensive_closure` contains the\n*definition* of an anonymous function, not the *resulting value* of calling the\nanonymous function. Recall that we’re using a closure because we want to define\nthe code to call at one point, store that code, and call it at a later point;\nthe code we want to call is now stored in `expensive_closure`.\n\nWith the closure defined, we can change the code in the `if` blocks to call the\nclosure to execute the code and get the resulting value. We call a closure like\nwe do a function: we specify the variable name that holds the closure\ndefinition and follow it with parentheses containing the argument values we\nwant to use, as shown in Listing 13-6.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# use std::thread;\n# use std::time::Duration;\n# \nfn generate_workout(intensity: u32, random_number: u32) {\n    let expensive_closure = |num| {\n        println!(\"calculating slowly...\");\n        thread::sleep(Duration::from_secs(2));\n        num\n    };\n\n    if intensity < 25 {\n        println!(\"Today, do {} pushups!\", expensive_closure(intensity));\n        println!(\"Next, do {} situps!\", expensive_closure(intensity));\n    } else {\n        if random_number == 3 {\n            println!(\"Take a break today! Remember to stay hydrated!\");\n        } else {\n            println!(\n                \"Today, run for {} minutes!\",\n                expensive_closure(intensity)\n            );\n        }\n    }\n}\n# \n# fn main() {\n#     let simulated_user_specified_value = 10;\n#     let simulated_random_number = 7;\n# \n#     generate_workout(simulated_user_specified_value, simulated_random_number);\n# }\n```\n\n<span class=\"caption\">Listing 13-6: Calling the `expensive_closure` we’ve\ndefined</span>\n\nNow the expensive calculation is called in only one place, and we’re only\nexecuting that code where we need the results.\n\nHowever, we’ve reintroduced one of the problems from Listing 13-3: we’re still\ncalling the closure twice in the first `if` block, which will call the\nexpensive code twice and make the user wait twice as long as they need to. We\ncould fix this problem by creating a variable local to that `if` block to hold\nthe result of calling the closure, but closures provide us with another\nsolution. We’ll talk about that solution in a bit. But first let’s talk about\nwhy there aren’t type annotations in the closure definition and the traits\ninvolved with closures.\n\n### Closure Type Inference and Annotation\n\nClosures don’t require you to annotate the types of the parameters or the\nreturn value like `fn` functions do. Type annotations are required on functions\nbecause they’re part of an explicit interface exposed to your users. Defining\nthis interface rigidly is important for ensuring that everyone agrees on what\ntypes of values a function uses and returns. But closures aren’t used in an\nexposed interface like this: they’re stored in variables and used without\nnaming them and exposing them to users of our library.\n\nClosures are usually short and relevant only within a narrow context rather\nthan in any arbitrary scenario. Within these limited contexts, the compiler is\nreliably able to infer the types of the parameters and the return type, similar\nto how it’s able to infer the types of most variables.\n\nMaking programmers annotate the types in these small, anonymous functions would\nbe annoying and largely redundant with the information the compiler already has\navailable.\n\nAs with variables, we can add type annotations if we want to increase\nexplicitness and clarity at the cost of being more verbose than is strictly\nnecessary. Annotating the types for the closure we defined in Listing 13-5\nwould look like the definition shown in Listing 13-7.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# use std::thread;\n# use std::time::Duration;\n# \n# fn generate_workout(intensity: u32, random_number: u32) {\n    let expensive_closure = |num: u32| -> u32 {\n        println!(\"calculating slowly...\");\n        thread::sleep(Duration::from_secs(2));\n        num\n    };\n# \n#     if intensity < 25 {\n#         println!(\"Today, do {} pushups!\", expensive_closure(intensity));\n#         println!(\"Next, do {} situps!\", expensive_closure(intensity));\n#     } else {\n#         if random_number == 3 {\n#             println!(\"Take a break today! Remember to stay hydrated!\");\n#         } else {\n#             println!(\n#                 \"Today, run for {} minutes!\",\n#                 expensive_closure(intensity)\n#             );\n#         }\n#     }\n# }\n# \n# fn main() {\n#     let simulated_user_specified_value = 10;\n#     let simulated_random_number = 7;\n# \n#     generate_workout(simulated_user_specified_value, simulated_random_number);\n# }\n```\n\n<span class=\"caption\">Listing 13-7: Adding optional type annotations of the\nparameter and return value types in the closure</span>\n\nWith type annotations added, the syntax of closures looks more similar to the\nsyntax of functions. The following is a vertical comparison of the syntax for\nthe definition of a function that adds 1 to its parameter and a closure that\nhas the same behavior. We’ve added some spaces to line up the relevant parts.\nThis illustrates how closure syntax is similar to function syntax except for\nthe use of pipes and the amount of syntax that is optional:\n\n```rust,ignore\nfn  add_one_v1   (x: u32) -> u32 { x + 1 }\nlet add_one_v2 = |x: u32| -> u32 { x + 1 };\nlet add_one_v3 = |x|             { x + 1 };\nlet add_one_v4 = |x|               x + 1  ;\n```\n\nThe first line shows a function definition, and the second line shows a fully\nannotated closure definition. The third line removes the type annotations from\nthe closure definition, and the fourth line removes the brackets, which are\noptional because the closure body has only one expression. These are all valid\ndefinitions that will produce the same behavior when they’re called. Calling\nthe closures is required for `add_one_v3` and `add_one_v4` to be able to\ncompile because the types will be inferred from their usage.\n\nClosure definitions will have one concrete type inferred for each of their\nparameters and for their return value. For instance, Listing 13-8 shows the\ndefinition of a short closure that just returns the value it receives as a\nparameter. This closure isn’t very useful except for the purposes of this\nexample. Note that we haven’t added any type annotations to the definition: if\nwe then try to call the closure twice, using a `String` as an argument the\nfirst time and a `u32` the second time, we’ll get an error.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n# fn main() {\n    let example_closure = |x| x;\n\n    let s = example_closure(String::from(\"hello\"));\n    let n = example_closure(5);\n# }\n```\n\n<span class=\"caption\">Listing 13-8: Attempting to call a closure whose types\nare inferred with two different types</span>\n\nThe compiler gives us this error:\n\n```text\n$ cargo run\n   Compiling closure-example v0.1.0 (file:///projects/closure-example)\nerror[E0308]: mismatched types\n --> src/main.rs:5:29\n  |\n5 |     let n = example_closure(5);\n  |                             ^\n  |                             |\n  |                             expected struct `std::string::String`, found integer\n  |                             help: try using a conversion method: `5.to_string()`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `closure-example`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe first time we call `example_closure` with the `String` value, the compiler\ninfers the type of `x` and the return type of the closure to be `String`. Those\ntypes are then locked in to the closure in `example_closure`, and we get a type\nerror if we try to use a different type with the same closure.\n\n### Storing Closures Using Generic Parameters and the `Fn` Traits\n\nLet’s return to our workout generation app. In Listing 13-6, our code was still\ncalling the expensive calculation closure more times than it needed to. One\noption to solve this issue is to save the result of the expensive closure in a\nvariable for reuse and use the variable in each place we need the result,\ninstead of calling the closure again. However, this method could result in a\nlot of repeated code.\n\nFortunately, another solution is available to us. We can create a struct that\nwill hold the closure and the resulting value of calling the closure. The\nstruct will execute the closure only if we need the resulting value, and it\nwill cache the resulting value so the rest of our code doesn’t have to be\nresponsible for saving and reusing the result. You may know this pattern as\n*memoization* or *lazy evaluation*.\n\nTo make a struct that holds a closure, we need to specify the type of the\nclosure, because a struct definition needs to know the types of each of its\nfields. Each closure instance has its own unique anonymous type: that is, even\nif two closures have the same signature, their types are still considered\ndifferent. To define structs, enums, or function parameters that use closures,\nwe use generics and trait bounds, as we discussed in Chapter 10.\n\nThe `Fn` traits are provided by the standard library. All closures implement at\nleast one of the traits: `Fn`, `FnMut`, or `FnOnce`. We’ll discuss the\ndifference between these traits in the [“Capturing the Environment with\nClosures”](#capturing-the-environment-with-closures)<!-- ignore --> section; in\nthis example, we can use the `Fn` trait.\n\nWe add types to the `Fn` trait bound to represent the types of the parameters\nand return values the closures must have to match this trait bound. In this\ncase, our closure has a parameter of type `u32` and returns a `u32`, so the\ntrait bound we specify is `Fn(u32) -> u32`.\n\nListing 13-9 shows the definition of the `Cacher` struct that holds a closure\nand an optional result value.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nstruct Cacher<T>\nwhere\n    T: Fn(u32) -> u32,\n{\n    calculation: T,\n    value: Option<u32>,\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 13-9: Defining a `Cacher` struct that holds a\nclosure in `calculation` and an optional result in `value`</span>\n\nThe `Cacher` struct has a `calculation` field of the generic type `T`. The\ntrait bounds on `T` specify that it’s a closure by using the `Fn` trait. Any\nclosure we want to store in the `calculation` field must have one `u32`\nparameter (specified within the parentheses after `Fn`) and must return a\n`u32` (specified after the `->`).\n\n> Note: Functions can implement all three of the `Fn` traits too. If what we\n> want to do doesn’t require capturing a value from the environment, we can use\n> a function rather than a closure where we need something that implements an\n> `Fn` trait.\n\nThe `value` field is of type `Option<u32>`. Before we execute the closure,\n`value` will be `None`. When code using a `Cacher` asks for the *result* of the\nclosure, the `Cacher` will execute the closure at that time and store the\nresult within a `Some` variant in the `value` field. Then if the code asks for\nthe result of the closure again, instead of executing the closure again, the\n`Cacher` will return the result held in the `Some` variant.\n\nThe logic around the `value` field we’ve just described is defined in Listing\n13-10.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# struct Cacher<T>\n# where\n#     T: Fn(u32) -> u32,\n# {\n#     calculation: T,\n#     value: Option<u32>,\n# }\n# \nimpl<T> Cacher<T>\nwhere\n    T: Fn(u32) -> u32,\n{\n    fn new(calculation: T) -> Cacher<T> {\n        Cacher {\n            calculation,\n            value: None,\n        }\n    }\n\n    fn value(&mut self, arg: u32) -> u32 {\n        match self.value {\n            Some(v) => v,\n            None => {\n                let v = (self.calculation)(arg);\n                self.value = Some(v);\n                v\n            }\n        }\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 13-10: The caching logic of `Cacher`</span>\n\nWe want `Cacher` to manage the struct fields’ values rather than letting the\ncalling code potentially change the values in these fields directly, so these\nfields are private.\n\nThe `Cacher::new` function takes a generic parameter `T`, which we’ve defined\nas having the same trait bound as the `Cacher` struct. Then `Cacher::new`\nreturns a `Cacher` instance that holds the closure specified in the\n`calculation` field and a `None` value in the `value` field, because we haven’t\nexecuted the closure yet.\n\nWhen the calling code needs the result of evaluating the closure, instead of\ncalling the closure directly, it will call the `value` method. This method\nchecks whether we already have a resulting value in `self.value` in a `Some`;\nif we do, it returns the value within the `Some` without executing the closure\nagain.\n\nIf `self.value` is `None`, the code calls the closure stored in\n`self.calculation`, saves the result in `self.value` for future use, and\nreturns the value as well.\n\nListing 13-11 shows how we can use this `Cacher` struct in the function\n`generate_workout` from Listing 13-6.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# use std::thread;\n# use std::time::Duration;\n# \n# struct Cacher<T>\n# where\n#     T: Fn(u32) -> u32,\n# {\n#     calculation: T,\n#     value: Option<u32>,\n# }\n# \n# impl<T> Cacher<T>\n# where\n#     T: Fn(u32) -> u32,\n# {\n#     fn new(calculation: T) -> Cacher<T> {\n#         Cacher {\n#             calculation,\n#             value: None,\n#         }\n#     }\n# \n#     fn value(&mut self, arg: u32) -> u32 {\n#         match self.value {\n#             Some(v) => v,\n#             None => {\n#                 let v = (self.calculation)(arg);\n#                 self.value = Some(v);\n#                 v\n#             }\n#         }\n#     }\n# }\n# \nfn generate_workout(intensity: u32, random_number: u32) {\n    let mut expensive_result = Cacher::new(|num| {\n        println!(\"calculating slowly...\");\n        thread::sleep(Duration::from_secs(2));\n        num\n    });\n\n    if intensity < 25 {\n        println!(\"Today, do {} pushups!\", expensive_result.value(intensity));\n        println!(\"Next, do {} situps!\", expensive_result.value(intensity));\n    } else {\n        if random_number == 3 {\n            println!(\"Take a break today! Remember to stay hydrated!\");\n        } else {\n            println!(\n                \"Today, run for {} minutes!\",\n                expensive_result.value(intensity)\n            );\n        }\n    }\n}\n# \n# fn main() {\n#     let simulated_user_specified_value = 10;\n#     let simulated_random_number = 7;\n# \n#     generate_workout(simulated_user_specified_value, simulated_random_number);\n# }\n```\n\n<span class=\"caption\">Listing 13-11: Using `Cacher` in the `generate_workout`\nfunction to abstract away the caching logic</span>\n\nInstead of saving the closure in a variable directly, we save a new instance of\n`Cacher` that holds the closure. Then, in each place we want the result, we\ncall the `value` method on the `Cacher` instance. We can call the `value`\nmethod as many times as we want, or not call it at all, and the expensive\ncalculation will be run a maximum of once.\n\nTry running this program with the `main` function from Listing 13-2. Change the\nvalues in the `simulated_user_specified_value` and `simulated_random_number`\nvariables to verify that in all the cases in the various `if` and `else`\nblocks, `calculating slowly...` appears only once and only when needed. The\n`Cacher` takes care of the logic necessary to ensure we aren’t calling the\nexpensive calculation more than we need to so `generate_workout` can focus on\nthe business logic.\n\n### Limitations of the `Cacher` Implementation\n\nCaching values is a generally useful behavior that we might want to use in\nother parts of our code with different closures. However, there are two\nproblems with the current implementation of `Cacher` that would make reusing it\nin different contexts difficult.\n\nThe first problem is that a `Cacher` instance assumes it will always get the\nsame value for the parameter `arg` to the `value` method. That is, this test of\n`Cacher` will fail:\n\n```rust,ignore,panics\n# struct Cacher<T>\n# where\n#     T: Fn(u32) -> u32,\n# {\n#     calculation: T,\n#     value: Option<u32>,\n# }\n# \n# impl<T> Cacher<T>\n# where\n#     T: Fn(u32) -> u32,\n# {\n#     fn new(calculation: T) -> Cacher<T> {\n#         Cacher {\n#             calculation,\n#             value: None,\n#         }\n#     }\n# \n#     fn value(&mut self, arg: u32) -> u32 {\n#         match self.value {\n#             Some(v) => v,\n#             None => {\n#                 let v = (self.calculation)(arg);\n#                 self.value = Some(v);\n#                 v\n#             }\n#         }\n#     }\n# }\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n    #[test]\n    fn call_with_different_values() {\n        let mut c = Cacher::new(|a| a);\n\n        let v1 = c.value(1);\n        let v2 = c.value(2);\n\n        assert_eq!(v2, 2);\n    }\n# }\n```\n\nThis test creates a new `Cacher` instance with a closure that returns the value\npassed into it. We call the `value` method on this `Cacher` instance with an\n`arg` value of 1 and then an `arg` value of 2, and we expect the call to\n`value` with the `arg` value of 2 to return 2.\n\nRun this test with the `Cacher` implementation in Listing 13-9 and Listing\n13-10, and the test will fail on the `assert_eq!` with this message:\n\n```text\n$ cargo test\n   Compiling cacher v0.1.0 (file:///projects/cacher)\n    Finished test [unoptimized + debuginfo] target(s) in 0.72s\n     Running target/debug/deps/cacher-4116485fb32b3fff\n\nrunning 1 test\ntest tests::call_with_different_values ... FAILED\n\nfailures:\n\n---- tests::call_with_different_values stdout ----\nthread \'main\' panicked at \'assertion failed: `(left == right)`\n  left: `1`,\n right: `2`\', src/lib.rs:43:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\n\nfailures:\n    tests::call_with_different_values\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass \'--lib\'\n```\n\nThe problem is that the first time we called `c.value` with 1, the `Cacher`\ninstance saved `Some(1)` in `self.value`. Thereafter, no matter what we pass in\nto the `value` method, it will always return 1.\n\nTry modifying `Cacher` to hold a hash map rather than a single value. The keys\nof the hash map will be the `arg` values that are passed in, and the values of\nthe hash map will be the result of calling the closure on that key. Instead of\nlooking at whether `self.value` directly has a `Some` or a `None` value, the\n`value` function will look up the `arg` in the hash map and return the value if\nit’s present. If it’s not present, the `Cacher` will call the closure and save\nthe resulting value in the hash map associated with its `arg` value.\n\nThe second problem with the current `Cacher` implementation is that it only\naccepts closures that take one parameter of type `u32` and return a `u32`. We\nmight want to cache the results of closures that take a string slice and return\n`usize` values, for example. To fix this issue, try introducing more generic\nparameters to increase the flexibility of the `Cacher` functionality.\n\n### Capturing the Environment with Closures\n\nIn the workout generator example, we only used closures as inline anonymous\nfunctions. However, closures have an additional capability that functions don’t\nhave: they can capture their environment and access variables from the scope in\nwhich they’re defined.\n\nListing 13-12 has an example of a closure stored in the `equal_to_x` variable\nthat uses the `x` variable from the closure’s surrounding environment.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x = 4;\n\n    let equal_to_x = |z| z == x;\n\n    let y = 4;\n\n    assert!(equal_to_x(y));\n}\n```\n\n<span class=\"caption\">Listing 13-12: Example of a closure that refers to a\nvariable in its enclosing scope</span>\n\nHere, even though `x` is not one of the parameters of `equal_to_x`, the\n`equal_to_x` closure is allowed to use the `x` variable that’s defined in the\nsame scope that `equal_to_x` is defined in.\n\nWe can’t do the same with functions; if we try with the following example, our\ncode won’t compile:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn main() {\n    let x = 4;\n\n    fn equal_to_x(z: i32) -> bool {\n        z == x\n    }\n\n    let y = 4;\n\n    assert!(equal_to_x(y));\n}\n```\n\nWe get an error:\n\n```text\n$ cargo run\n   Compiling equal-to-x v0.1.0 (file:///projects/equal-to-x)\nerror[E0434]: can\'t capture dynamic environment in a fn item\n --> src/main.rs:5:14\n  |\n5 |         z == x\n  |              ^\n  |\n  = help: use the `|| { ... }` closure form instead\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0434`.\nerror: could not compile `equal-to-x`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe compiler even reminds us that this only works with closures!\n\nWhen a closure captures a value from its environment, it uses memory to store\nthe values for use in the closure body. This use of memory is overhead that we\ndon’t want to pay in more common cases where we want to execute code that\ndoesn’t capture its environment. Because functions are never allowed to capture\ntheir environment, defining and using functions will never incur this overhead.\n\nClosures can capture values from their environment in three ways, which\ndirectly map to the three ways a function can take a parameter: taking\nownership, borrowing mutably, and borrowing immutably. These are encoded in the\nthree `Fn` traits as follows:\n\n* `FnOnce` consumes the variables it captures from its enclosing scope, known\n  as the closure’s *environment*. To consume the captured variables, the\n  closure must take ownership of these variables and move them into the closure\n  when it is defined. The `Once` part of the name represents the fact that the\n  closure can’t take ownership of the same variables more than once, so it can\n  be called only once.\n* `FnMut` can change the environment because it mutably borrows values.\n* `Fn` borrows values from the environment immutably.\n\nWhen you create a closure, Rust infers which trait to use based on how the\nclosure uses the values from the environment. All closures implement `FnOnce`\nbecause they can all be called at least once. Closures that don’t move the\ncaptured variables also implement `FnMut`, and closures that don’t need mutable\naccess to the captured variables also implement `Fn`. In Listing 13-12, the\n`equal_to_x` closure borrows `x` immutably (so `equal_to_x` has the `Fn` trait)\nbecause the body of the closure only needs to read the value in `x`.\n\nIf you want to force the closure to take ownership of the values it uses in the\nenvironment, you can use the `move` keyword before the parameter list. This\ntechnique is mostly useful when passing a closure to a new thread to move the\ndata so it’s owned by the new thread.\n\nWe’ll have more examples of `move` closures in Chapter 16 when we talk about\nconcurrency. For now, here’s the code from Listing 13-12 with the `move`\nkeyword added to the closure definition and using vectors instead of integers,\nbecause integers can be copied rather than moved; note that this code will not\nyet compile.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn main() {\n    let x = vec![1, 2, 3];\n\n    let equal_to_x = move |z| z == x;\n\n    println!(\"can\'t use x here: {:?}\", x);\n\n    let y = vec![1, 2, 3];\n\n    assert!(equal_to_x(y));\n}\n```\n\nWe receive the following error:\n\n```text\n$ cargo run\n   Compiling equal-to-x v0.1.0 (file:///projects/equal-to-x)\nerror[E0382]: borrow of moved value: `x`\n --> src/main.rs:6:40\n  |\n2 |     let x = vec![1, 2, 3];\n  |         - move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n3 | \n4 |     let equal_to_x = move |z| z == x;\n  |                      --------      - variable moved due to use in closure\n  |                      |\n  |                      value moved into closure here\n5 | \n6 |     println!(\"can\'t use x here: {:?}\", x);\n  |                                        ^ value borrowed here after move\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `equal-to-x`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe `x` value is moved into the closure when the closure is defined, because we\nadded the `move` keyword. The closure then has ownership of `x`, and `main`\nisn’t allowed to use `x` anymore in the `println!` statement. Removing\n`println!` will fix this example.\n\nMost of the time when specifying one of the `Fn` trait bounds, you can start\nwith `Fn` and the compiler will tell you if you need `FnMut` or `FnOnce` based\non what happens in the closure body.\n\nTo illustrate situations where closures that can capture their environment are\nuseful as function parameters, let’s move on to our next topic: iterators.\n", number: Some(SectionNumber([13, 1])), sub_items: [], path: "ch13-01-closures.md", parent_names: ["Functional Language Features: Iterators and Closures"] }), Chapter(Chapter { name: "Processing a Series of Items with Iterators", content: "## Processing a Series of Items with Iterators\n\nThe iterator pattern allows you to perform some task on a sequence of items in\nturn. An iterator is responsible for the logic of iterating over each item and\ndetermining when the sequence has finished. When you use iterators, you don’t\nhave to reimplement that logic yourself.\n\nIn Rust, iterators are *lazy*, meaning they have no effect until you call\nmethods that consume the iterator to use it up. For example, the code in\nListing 13-13 creates an iterator over the items in the vector `v1` by calling\nthe `iter` method defined on `Vec<T>`. This code by itself doesn’t do anything\nuseful.\n\n```rust\n# fn main() {\n    let v1 = vec![1, 2, 3];\n\n    let v1_iter = v1.iter();\n# }\n```\n\n<span class=\"caption\">Listing 13-13: Creating an iterator</span>\n\nOnce we’ve created an iterator, we can use it in a variety of ways. In Listing\n3-5 in Chapter 3, we used iterators with `for` loops to execute some code on\neach item, although we glossed over what the call to `iter` did until now.\n\nThe example in Listing 13-14 separates the creation of the iterator from the\nuse of the iterator in the `for` loop. The iterator is stored in the `v1_iter`\nvariable, and no iteration takes place at that time. When the `for` loop is\ncalled using the iterator in `v1_iter`, each element in the iterator is used in\none iteration of the loop, which prints out each value.\n\n```rust\n# fn main() {\n    let v1 = vec![1, 2, 3];\n\n    let v1_iter = v1.iter();\n\n    for val in v1_iter {\n        println!(\"Got: {}\", val);\n    }\n# }\n```\n\n<span class=\"caption\">Listing 13-14: Using an iterator in a `for` loop</span>\n\nIn languages that don’t have iterators provided by their standard libraries,\nyou would likely write this same functionality by starting a variable at index\n0, using that variable to index into the vector to get a value, and\nincrementing the variable value in a loop until it reached the total number of\nitems in the vector.\n\nIterators handle all that logic for you, cutting down on repetitive code you\ncould potentially mess up. Iterators give you more flexibility to use the same\nlogic with many different kinds of sequences, not just data structures you can\nindex into, like vectors. Let’s examine how iterators do that.\n\n### The `Iterator` Trait and the `next` Method\n\nAll iterators implement a trait named `Iterator` that is defined in the\nstandard library. The definition of the trait looks like this:\n\n```rust\npub trait Iterator {\n    type Item;\n\n    fn next(&mut self) -> Option<Self::Item>;\n\n    // methods with default implementations elided\n}\n```\n\nNotice this definition uses some new syntax: `type Item` and `Self::Item`,\nwhich are defining an *associated type* with this trait. We’ll talk about\nassociated types in depth in Chapter 19. For now, all you need to know is that\nthis code says implementing the `Iterator` trait requires that you also define\nan `Item` type, and this `Item` type is used in the return type of the `next`\nmethod. In other words, the `Item` type will be the type returned from the\niterator.\n\nThe `Iterator` trait only requires implementors to define one method: the\n`next` method, which returns one item of the iterator at a time wrapped in\n`Some` and, when iteration is over, returns `None`.\n\nWe can call the `next` method on iterators directly; Listing 13-15 demonstrates\nwhat values are returned from repeated calls to `next` on the iterator created\nfrom the vector.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# #[cfg(test)]\n# mod tests {\n    #[test]\n    fn iterator_demonstration() {\n        let v1 = vec![1, 2, 3];\n\n        let mut v1_iter = v1.iter();\n\n        assert_eq!(v1_iter.next(), Some(&1));\n        assert_eq!(v1_iter.next(), Some(&2));\n        assert_eq!(v1_iter.next(), Some(&3));\n        assert_eq!(v1_iter.next(), None);\n    }\n# }\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 13-15: Calling the `next` method on an\niterator</span>\n\nNote that we needed to make `v1_iter` mutable: calling the `next` method on an\niterator changes internal state that the iterator uses to keep track of where\nit is in the sequence. In other words, this code *consumes*, or uses up, the\niterator. Each call to `next` eats up an item from the iterator. We didn’t need\nto make `v1_iter` mutable when we used a `for` loop because the loop took\nownership of `v1_iter` and made it mutable behind the scenes.\n\nAlso note that the values we get from the calls to `next` are immutable\nreferences to the values in the vector. The `iter` method produces an iterator\nover immutable references. If we want to create an iterator that takes\nownership of `v1` and returns owned values, we can call `into_iter` instead of\n`iter`. Similarly, if we want to iterate over mutable references, we can call\n`iter_mut` instead of `iter`.\n\n### Methods that Consume the Iterator\n\nThe `Iterator` trait has a number of different methods with default\nimplementations provided by the standard library; you can find out about these\nmethods by looking in the standard library API documentation for the `Iterator`\ntrait. Some of these methods call the `next` method in their definition, which\nis why you’re required to implement the `next` method when implementing the\n`Iterator` trait.\n\nMethods that call `next` are called *consuming adaptors*, because calling them\nuses up the iterator. One example is the `sum` method, which takes ownership of\nthe iterator and iterates through the items by repeatedly calling `next`, thus\nconsuming the iterator. As it iterates through, it adds each item to a running\ntotal and returns the total when iteration is complete. Listing 13-16 has a\ntest illustrating a use of the `sum` method:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# #[cfg(test)]\n# mod tests {\n    #[test]\n    fn iterator_sum() {\n        let v1 = vec![1, 2, 3];\n\n        let v1_iter = v1.iter();\n\n        let total: i32 = v1_iter.sum();\n\n        assert_eq!(total, 6);\n    }\n# }\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 13-16: Calling the `sum` method to get the total\nof all items in the iterator</span>\n\nWe aren’t allowed to use `v1_iter` after the call to `sum` because `sum` takes\nownership of the iterator we call it on.\n\n### Methods that Produce Other Iterators\n\nOther methods defined on the `Iterator` trait, known as *iterator adaptors*,\nallow you to change iterators into different kinds of iterators. You can chain\nmultiple calls to iterator adaptors to perform complex actions in a readable\nway. But because all iterators are lazy, you have to call one of the consuming\nadaptor methods to get results from calls to iterator adaptors.\n\nListing 13-17 shows an example of calling the iterator adaptor method `map`,\nwhich takes a closure to call on each item to produce a new iterator. The\nclosure here creates a new iterator in which each item from the vector has been\nincremented by 1. However, this code produces a warning:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,not_desired_behavior\n# fn main() {\n    let v1: Vec<i32> = vec![1, 2, 3];\n\n    v1.iter().map(|x| x + 1);\n# }\n```\n\n<span class=\"caption\">Listing 13-17: Calling the iterator adaptor `map` to\ncreate a new iterator</span>\n\nThe warning we get is this:\n\n```text\n$ cargo run\n   Compiling iterators v0.1.0 (file:///projects/iterators)\nwarning: unused `std::iter::Map` that must be used\n --> src/main.rs:4:5\n  |\n4 |     v1.iter().map(|x| x + 1);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_must_use)]` on by default\n  = note: iterators are lazy and do nothing unless consumed\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.47s\n     Running `target/debug/iterators`\n```\n\nThe code in Listing 13-17 doesn’t do anything; the closure we’ve specified\nnever gets called. The warning reminds us why: iterator adaptors are lazy, and\nwe need to consume the iterator here.\n\nTo fix this and consume the iterator, we’ll use the `collect` method, which we\nused in Chapter 12 with `env::args` in Listing 12-1. This method consumes the\niterator and collects the resulting values into a collection data type.\n\nIn Listing 13-18, we collect the results of iterating over the iterator that’s\nreturned from the call to `map` into a vector. This vector will end up\ncontaining each item from the original vector incremented by 1.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# fn main() {\n    let v1: Vec<i32> = vec![1, 2, 3];\n\n    let v2: Vec<_> = v1.iter().map(|x| x + 1).collect();\n\n    assert_eq!(v2, vec![2, 3, 4]);\n# }\n```\n\n<span class=\"caption\">Listing 13-18: Calling the `map` method to create a new\niterator and then calling the `collect` method to consume the new iterator and\ncreate a vector</span>\n\nBecause `map` takes a closure, we can specify any operation we want to perform\non each item. This is a great example of how closures let you customize some\nbehavior while reusing the iteration behavior that the `Iterator` trait\nprovides.\n\n### Using Closures that Capture Their Environment\n\nNow that we’ve introduced iterators, we can demonstrate a common use of\nclosures that capture their environment by using the `filter` iterator adaptor.\nThe `filter` method on an iterator takes a closure that takes each item from\nthe iterator and returns a Boolean. If the closure returns `true`, the value\nwill be included in the iterator produced by `filter`. If the closure returns\n`false`, the value won’t be included in the resulting iterator.\n\nIn Listing 13-19, we use `filter` with a closure that captures the `shoe_size`\nvariable from its environment to iterate over a collection of `Shoe` struct\ninstances. It will return only shoes that are the specified size.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n#[derive(PartialEq, Debug)]\nstruct Shoe {\n    size: u32,\n    style: String,\n}\n\nfn shoes_in_my_size(shoes: Vec<Shoe>, shoe_size: u32) -> Vec<Shoe> {\n    shoes.into_iter().filter(|s| s.size == shoe_size).collect()\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn filters_by_size() {\n        let shoes = vec![\n            Shoe {\n                size: 10,\n                style: String::from(\"sneaker\"),\n            },\n            Shoe {\n                size: 13,\n                style: String::from(\"sandal\"),\n            },\n            Shoe {\n                size: 10,\n                style: String::from(\"boot\"),\n            },\n        ];\n\n        let in_my_size = shoes_in_my_size(shoes, 10);\n\n        assert_eq!(\n            in_my_size,\n            vec![\n                Shoe {\n                    size: 10,\n                    style: String::from(\"sneaker\")\n                },\n                Shoe {\n                    size: 10,\n                    style: String::from(\"boot\")\n                },\n            ]\n        );\n    }\n}\n\nfn main() {}\n```\n\n<span class=\"caption\">Listing 13-19: Using the `filter` method with a closure\nthat captures `shoe_size`</span>\n\nThe `shoes_in_my_size` function takes ownership of a vector of shoes and a shoe\nsize as parameters. It returns a vector containing only shoes of the specified\nsize.\n\nIn the body of `shoes_in_my_size`, we call `into_iter` to create an iterator\nthat takes ownership of the vector. Then we call `filter` to adapt that\niterator into a new iterator that only contains elements for which the closure\nreturns `true`.\n\nThe closure captures the `shoe_size` parameter from the environment and\ncompares the value with each shoe’s size, keeping only shoes of the size\nspecified. Finally, calling `collect` gathers the values returned by the\nadapted iterator into a vector that’s returned by the function.\n\nThe test shows that when we call `shoes_in_my_size`, we get back only shoes\nthat have the same size as the value we specified.\n\n### Creating Our Own Iterators with the `Iterator` Trait\n\nWe’ve shown that you can create an iterator by calling `iter`, `into_iter`, or\n`iter_mut` on a vector. You can create iterators from the other collection\ntypes in the standard library, such as hash map. You can also create iterators\nthat do anything you want by implementing the `Iterator` trait on your own\ntypes. As previously mentioned, the only method you’re required to provide a\ndefinition for is the `next` method. Once you’ve done that, you can use all\nother methods that have default implementations provided by the `Iterator`\ntrait!\n\nTo demonstrate, let’s create an iterator that will only ever count from 1 to 5.\nFirst, we’ll create a struct to hold some values. Then we’ll make this struct\ninto an iterator by implementing the `Iterator` trait and using the values in\nthat implementation.\n\nListing 13-20 has the definition of the `Counter` struct and an associated\n`new` function to create instances of `Counter`:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nstruct Counter {\n    count: u32,\n}\n\nimpl Counter {\n    fn new() -> Counter {\n        Counter { count: 0 }\n    }\n}\n\nfn main() {}\n```\n\n<span class=\"caption\">Listing 13-20: Defining the `Counter` struct and a `new`\nfunction that creates instances of `Counter` with an initial value of 0 for\n`count`</span>\n\nThe `Counter` struct has one field named `count`. This field holds a `u32`\nvalue that will keep track of where we are in the process of iterating from 1\nto 5. The `count` field is private because we want the implementation of\n`Counter` to manage its value. The `new` function enforces the behavior of\nalways starting new instances with a value of 0 in the `count` field.\n\nNext, we’ll implement the `Iterator` trait for our `Counter` type by defining\nthe body of the `next` method to specify what we want to happen when this\niterator is used, as shown in Listing 13-21:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# struct Counter {\n#     count: u32,\n# }\n# \n# impl Counter {\n#     fn new() -> Counter {\n#         Counter { count: 0 }\n#     }\n# }\n# \nimpl Iterator for Counter {\n    type Item = u32;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        if self.count < 5 {\n            self.count += 1;\n            Some(self.count)\n        } else {\n            None\n        }\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 13-21: Implementing the `Iterator` trait on our\n`Counter` struct</span>\n\nWe set the associated `Item` type for our iterator to `u32`, meaning the\niterator will return `u32` values. Again, don’t worry about associated types\nyet, we’ll cover them in Chapter 19.\n\nWe want our iterator to add 1 to the current state, so we initialized `count`\nto 0 so it would return 1 first. If the value of `count` is less than 5, `next`\nwill increment `count` and return the current value wrapped in `Some`. Once\n`count` is 5, our iterator will stop incrementing `count` and always return\n`None`.\n\n#### Using Our `Counter` Iterator’s `next` Method\n\nOnce we’ve implemented the `Iterator` trait, we have an iterator! Listing 13-22\nshows a test demonstrating that we can use the iterator functionality of our\n`Counter` struct by calling the `next` method on it directly, just as we did\nwith the iterator created from a vector in Listing 13-15.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# struct Counter {\n#     count: u32,\n# }\n# \n# impl Counter {\n#     fn new() -> Counter {\n#         Counter { count: 0 }\n#     }\n# }\n# \n# impl Iterator for Counter {\n#     type Item = u32;\n# \n#     fn next(&mut self) -> Option<Self::Item> {\n#         if self.count < 5 {\n#             self.count += 1;\n#             Some(self.count)\n#         } else {\n#             None\n#         }\n#     }\n# }\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n    #[test]\n    fn calling_next_directly() {\n        let mut counter = Counter::new();\n\n        assert_eq!(counter.next(), Some(1));\n        assert_eq!(counter.next(), Some(2));\n        assert_eq!(counter.next(), Some(3));\n        assert_eq!(counter.next(), Some(4));\n        assert_eq!(counter.next(), Some(5));\n        assert_eq!(counter.next(), None);\n    }\n# }\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 13-22: Testing the functionality of the `next`\nmethod implementation</span>\n\nThis test creates a new `Counter` instance in the `counter` variable and then\ncalls `next` repeatedly, verifying that we have implemented the behavior we\nwant this iterator to have: returning the values from 1 to 5.\n\n#### Using Other `Iterator` Trait Methods\n\nWe implemented the `Iterator` trait by defining the `next` method, so we\ncan now use any `Iterator` trait method’s default implementations as defined in\nthe standard library, because they all use the `next` method’s functionality.\n\nFor example, if for some reason we wanted to take the values produced by an\ninstance of `Counter`, pair them with values produced by another `Counter`\ninstance after skipping the first value, multiply each pair together, keep only\nthose results that are divisible by 3, and add all the resulting values\ntogether, we could do so, as shown in the test in Listing 13-23:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# struct Counter {\n#     count: u32,\n# }\n# \n# impl Counter {\n#     fn new() -> Counter {\n#         Counter { count: 0 }\n#     }\n# }\n# \n# impl Iterator for Counter {\n#     type Item = u32;\n# \n#     fn next(&mut self) -> Option<Self::Item> {\n#         if self.count < 5 {\n#             self.count += 1;\n#             Some(self.count)\n#         } else {\n#             None\n#         }\n#     }\n# }\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn calling_next_directly() {\n#         let mut counter = Counter::new();\n# \n#         assert_eq!(counter.next(), Some(1));\n#         assert_eq!(counter.next(), Some(2));\n#         assert_eq!(counter.next(), Some(3));\n#         assert_eq!(counter.next(), Some(4));\n#         assert_eq!(counter.next(), Some(5));\n#         assert_eq!(counter.next(), None);\n#     }\n# \n    #[test]\n    fn using_other_iterator_trait_methods() {\n        let sum: u32 = Counter::new()\n            .zip(Counter::new().skip(1))\n            .map(|(a, b)| a * b)\n            .filter(|x| x % 3 == 0)\n            .sum();\n        assert_eq!(18, sum);\n    }\n# }\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 13-23: Using a variety of `Iterator` trait\nmethods on our `Counter` iterator</span>\n\nNote that `zip` produces only four pairs; the theoretical fifth pair `(5,\nNone)` is never produced because `zip` returns `None` when either of its input\niterators return `None`.\n\nAll of these method calls are possible because we specified how the `next`\nmethod works, and the standard library provides default implementations for\nother methods that call `next`.\n", number: Some(SectionNumber([13, 2])), sub_items: [], path: "ch13-02-iterators.md", parent_names: ["Functional Language Features: Iterators and Closures"] }), Chapter(Chapter { name: "Improving Our I/O Project", content: "## Improving Our I/O Project\n\nWith this new knowledge about iterators, we can improve the I/O project in\nChapter 12 by using iterators to make places in the code clearer and more\nconcise. Let’s look at how iterators can improve our implementation of the\n`Config::new` function and the `search` function.\n\n### Removing a `clone` Using an Iterator\n\nIn Listing 12-6, we added code that took a slice of `String` values and created\nan instance of the `Config` struct by indexing into the slice and cloning the\nvalues, allowing the `Config` struct to own those values. In Listing 13-24,\nwe’ve reproduced the implementation of the `Config::new` function as it was in\nListing 12-23:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n# use std::env;\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n#     pub case_sensitive: bool,\n# }\n# \nimpl Config {\n    pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let filename = args[2].clone();\n\n        let case_sensitive = env::var(\"CASE_INSENSITIVE\").is_err();\n\n        Ok(Config {\n            query,\n            filename,\n            case_sensitive,\n        })\n    }\n}\n# \n# pub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     let results = if config.case_sensitive {\n#         search(&config.query, &contents)\n#     } else {\n#         search_case_insensitive(&config.query, &contents)\n#     };\n# \n#     for line in results {\n#         println!(\"{}\", line);\n#     }\n# \n#     Ok(())\n# }\n# \n# pub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.contains(query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n# pub fn search_case_insensitive<\'a>(\n#     query: &str,\n#     contents: &\'a str,\n# ) -> Vec<&\'a str> {\n#     let query = query.to_lowercase();\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.to_lowercase().contains(&query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn case_sensitive() {\n#         let query = \"duct\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Duct tape.\";\n# \n#         assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n#     }\n# \n#     #[test]\n#     fn case_insensitive() {\n#         let query = \"rUsT\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Trust me.\";\n# \n#         assert_eq!(\n#             vec![\"Rust:\", \"Trust me.\"],\n#             search_case_insensitive(query, contents)\n#         );\n#     }\n# }\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 13-24: Reproduction of the `Config::new` function\nfrom Listing 12-23</span>\n\nAt the time, we said not to worry about the inefficient `clone` calls because\nwe would remove them in the future. Well, that time is now!\n\nWe needed `clone` here because we have a slice with `String` elements in the\nparameter `args`, but the `new` function doesn’t own `args`. To return\nownership of a `Config` instance, we had to clone the values from the `query`\nand `filename` fields of `Config` so the `Config` instance can own its values.\n\nWith our new knowledge about iterators, we can change the `new` function to\ntake ownership of an iterator as its argument instead of borrowing a slice.\nWe’ll use the iterator functionality instead of the code that checks the length\nof the slice and indexes into specific locations. This will clarify what the\n`Config::new` function is doing because the iterator will access the values.\n\nOnce `Config::new` takes ownership of the iterator and stops using indexing\noperations that borrow, we can move the `String` values from the iterator into\n`Config` rather than calling `clone` and making a new allocation.\n\n#### Using the Returned Iterator Directly\n\nOpen your I/O project’s *src/main.rs* file, which should look like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use std::env;\n# use std::process;\n# \n# use minigrep::Config;\n# \nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::new(&args).unwrap_or_else(|err| {\n        eprintln!(\"Problem parsing arguments: {}\", err);\n        process::exit(1);\n    });\n\n    // --snip--\n# \n#     if let Err(e) = minigrep::run(config) {\n#         eprintln!(\"Application error: {}\", e);\n# \n#         process::exit(1);\n#     }\n}\n```\n\nWe’ll change the start of the `main` function that we had in Listing 12-24 to\nthe code in Listing 13-25. This won’t compile until we update `Config::new` as\nwell.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use std::env;\n# use std::process;\n# \n# use minigrep::Config;\n# \nfn main() {\n    let config = Config::new(env::args()).unwrap_or_else(|err| {\n        eprintln!(\"Problem parsing arguments: {}\", err);\n        process::exit(1);\n    });\n\n    // --snip--\n# \n#     if let Err(e) = minigrep::run(config) {\n#         eprintln!(\"Application error: {}\", e);\n# \n#         process::exit(1);\n#     }\n}\n```\n\n<span class=\"caption\">Listing 13-25: Passing the return value of `env::args` to\n`Config::new`</span>\n\nThe `env::args` function returns an iterator! Rather than collecting the\niterator values into a vector and then passing a slice to `Config::new`, now\nwe’re passing ownership of the iterator returned from `env::args` to\n`Config::new` directly.\n\nNext, we need to update the definition of `Config::new`. In your I/O project’s\n*src/lib.rs* file, let’s change the signature of `Config::new` to look like\nListing 13-26. This still won’t compile because we need to update the function\nbody.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n# use std::env;\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n#     pub case_sensitive: bool,\n# }\n# \nimpl Config {\n    pub fn new(mut args: std::env::Args) -> Result<Config, &\'static str> {\n        // --snip--\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         let case_sensitive = env::var(\"CASE_INSENSITIVE\").is_err();\n# \n#         Ok(Config {\n#             query,\n#             filename,\n#             case_sensitive,\n#         })\n#     }\n# }\n# \n# pub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     let results = if config.case_sensitive {\n#         search(&config.query, &contents)\n#     } else {\n#         search_case_insensitive(&config.query, &contents)\n#     };\n# \n#     for line in results {\n#         println!(\"{}\", line);\n#     }\n# \n#     Ok(())\n# }\n# \n# pub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.contains(query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n# pub fn search_case_insensitive<\'a>(\n#     query: &str,\n#     contents: &\'a str,\n# ) -> Vec<&\'a str> {\n#     let query = query.to_lowercase();\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.to_lowercase().contains(&query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn case_sensitive() {\n#         let query = \"duct\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Duct tape.\";\n# \n#         assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n#     }\n# \n#     #[test]\n#     fn case_insensitive() {\n#         let query = \"rUsT\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Trust me.\";\n# \n#         assert_eq!(\n#             vec![\"Rust:\", \"Trust me.\"],\n#             search_case_insensitive(query, contents)\n#         );\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 13-26: Updating the signature of `Config::new` to\nexpect an iterator</span>\n\nThe standard library documentation for the `env::args` function shows that the\ntype of the iterator it returns is `std::env::Args`. We’ve updated the\nsignature of the `Config::new` function so the parameter `args` has the type\n`std::env::Args` instead of `&[String]`. Because we’re taking ownership of\n`args` and we’ll be mutating `args` by iterating over it, we can add the `mut`\nkeyword into the specification of the `args` parameter to make it mutable.\n\n#### Using `Iterator` Trait Methods Instead of Indexing\n\nNext, we’ll fix the body of `Config::new`. The standard library documentation\nalso mentions that `std::env::Args` implements the `Iterator` trait, so we know\nwe can call the `next` method on it! Listing 13-27 updates the code from\nListing 12-23 to use the `next` method:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# use std::env;\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n#     pub case_sensitive: bool,\n# }\n# \nimpl Config {\n    pub fn new(mut args: std::env::Args) -> Result<Config, &\'static str> {\n        args.next();\n\n        let query = match args.next() {\n            Some(arg) => arg,\n            None => return Err(\"Didn\'t get a query string\"),\n        };\n\n        let filename = match args.next() {\n            Some(arg) => arg,\n            None => return Err(\"Didn\'t get a file name\"),\n        };\n\n        let case_sensitive = env::var(\"CASE_INSENSITIVE\").is_err();\n\n        Ok(Config {\n            query,\n            filename,\n            case_sensitive,\n        })\n    }\n}\n# \n# pub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     let results = if config.case_sensitive {\n#         search(&config.query, &contents)\n#     } else {\n#         search_case_insensitive(&config.query, &contents)\n#     };\n# \n#     for line in results {\n#         println!(\"{}\", line);\n#     }\n# \n#     Ok(())\n# }\n# \n# pub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.contains(query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n# pub fn search_case_insensitive<\'a>(\n#     query: &str,\n#     contents: &\'a str,\n# ) -> Vec<&\'a str> {\n#     let query = query.to_lowercase();\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.to_lowercase().contains(&query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn case_sensitive() {\n#         let query = \"duct\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Duct tape.\";\n# \n#         assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n#     }\n# \n#     #[test]\n#     fn case_insensitive() {\n#         let query = \"rUsT\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Trust me.\";\n# \n#         assert_eq!(\n#             vec![\"Rust:\", \"Trust me.\"],\n#             search_case_insensitive(query, contents)\n#         );\n#     }\n# }\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 13-27: Changing the body of `Config::new` to use\niterator methods</span>\n\nRemember that the first value in the return value of `env::args` is the name of\nthe program. We want to ignore that and get to the next value, so first we call\n`next` and do nothing with the return value. Second, we call `next` to get the\nvalue we want to put in the `query` field of `Config`. If `next` returns a\n`Some`, we use a `match` to extract the value. If it returns `None`, it means\nnot enough arguments were given and we return early with an `Err` value. We do\nthe same thing for the `filename` value.\n\n### Making Code Clearer with Iterator Adaptors\n\nWe can also take advantage of iterators in the `search` function in our I/O\nproject, which is reproduced here in Listing 13-28 as it was in Listing 12-19:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n# }\n# \n# impl Config {\n#     pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n#         if args.len() < 3 {\n#             return Err(\"not enough arguments\");\n#         }\n# \n#         let query = args[1].clone();\n#         let filename = args[2].clone();\n# \n#         Ok(Config { query, filename })\n#     }\n# }\n# \n# pub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     Ok(())\n# }\n# \npub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn one_result() {\n#         let query = \"duct\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\";\n# \n#         assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 13-28: The implementation of the `search`\nfunction from Listing 12-19</span>\n\nWe can write this code in a more concise way using iterator adaptor methods.\nDoing so also lets us avoid having a mutable intermediate `results` vector. The\nfunctional programming style prefers to minimize the amount of mutable state to\nmake code clearer. Removing the mutable state might enable a future enhancement\nto make searching happen in parallel, because we wouldn’t have to manage\nconcurrent access to the `results` vector. Listing 13-29 shows this change:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n# use std::env;\n# use std::error::Error;\n# use std::fs;\n# \n# pub struct Config {\n#     pub query: String,\n#     pub filename: String,\n#     pub case_sensitive: bool,\n# }\n# \n# impl Config {\n#     pub fn new(mut args: std::env::Args) -> Result<Config, &\'static str> {\n#         args.next();\n# \n#         let query = match args.next() {\n#             Some(arg) => arg,\n#             None => return Err(\"Didn\'t get a query string\"),\n#         };\n# \n#         let filename = match args.next() {\n#             Some(arg) => arg,\n#             None => return Err(\"Didn\'t get a file name\"),\n#         };\n# \n#         let case_sensitive = env::var(\"CASE_INSENSITIVE\").is_err();\n# \n#         Ok(Config {\n#             query,\n#             filename,\n#             case_sensitive,\n#         })\n#     }\n# }\n# \n# pub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n#     let contents = fs::read_to_string(config.filename)?;\n# \n#     let results = if config.case_sensitive {\n#         search(&config.query, &contents)\n#     } else {\n#         search_case_insensitive(&config.query, &contents)\n#     };\n# \n#     for line in results {\n#         println!(\"{}\", line);\n#     }\n# \n#     Ok(())\n# }\n# \npub fn search<\'a>(query: &str, contents: &\'a str) -> Vec<&\'a str> {\n    contents\n        .lines()\n        .filter(|line| line.contains(query))\n        .collect()\n}\n# \n# pub fn search_case_insensitive<\'a>(\n#     query: &str,\n#     contents: &\'a str,\n# ) -> Vec<&\'a str> {\n#     let query = query.to_lowercase();\n#     let mut results = Vec::new();\n# \n#     for line in contents.lines() {\n#         if line.to_lowercase().contains(&query) {\n#             results.push(line);\n#         }\n#     }\n# \n#     results\n# }\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n# \n#     #[test]\n#     fn case_sensitive() {\n#         let query = \"duct\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Duct tape.\";\n# \n#         assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n#     }\n# \n#     #[test]\n#     fn case_insensitive() {\n#         let query = \"rUsT\";\n#         let contents = \"\\\n# Rust:\n# safe, fast, productive.\n# Pick three.\n# Trust me.\";\n# \n#         assert_eq!(\n#             vec![\"Rust:\", \"Trust me.\"],\n#             search_case_insensitive(query, contents)\n#         );\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 13-29: Using iterator adaptor methods in the\nimplementation of the `search` function</span>\n\nRecall that the purpose of the `search` function is to return all lines in\n`contents` that contain the `query`. Similar to the `filter` example in Listing\n13-19, this code uses the `filter` adaptor to keep only the lines that\n`line.contains(query)` returns `true` for. We then collect the matching lines\ninto another vector with `collect`. Much simpler! Feel free to make the same\nchange to use iterator methods in the `search_case_insensitive` function as\nwell.\n\nThe next logical question is which style you should choose in your own code and\nwhy: the original implementation in Listing 13-28 or the version using\niterators in Listing 13-29. Most Rust programmers prefer to use the iterator\nstyle. It’s a bit tougher to get the hang of at first, but once you get a feel\nfor the various iterator adaptors and what they do, iterators can be easier to\nunderstand. Instead of fiddling with the various bits of looping and building\nnew vectors, the code focuses on the high-level objective of the loop. This\nabstracts away some of the commonplace code so it’s easier to see the concepts\nthat are unique to this code, such as the filtering condition each element in\nthe iterator must pass.\n\nBut are the two implementations truly equivalent? The intuitive assumption\nmight be that the more low-level loop will be faster. Let’s talk about\nperformance.\n", number: Some(SectionNumber([13, 3])), sub_items: [], path: "ch13-03-improving-our-io-project.md", parent_names: ["Functional Language Features: Iterators and Closures"] }), Chapter(Chapter { name: "Comparing Performance: Loops vs. Iterators", content: "## Comparing Performance: Loops vs. Iterators\n\nTo determine whether to use loops or iterators, you need to know which version\nof our `search` functions is faster: the version with an explicit `for` loop or\nthe version with iterators.\n\nWe ran a benchmark by loading the entire contents of *The Adventures of\nSherlock Holmes* by Sir Arthur Conan Doyle into a `String` and looking for the\nword *the* in the contents. Here are the results of the benchmark on the\nversion of `search` using the `for` loop and the version using iterators:\n\n```text\ntest bench_search_for  ... bench:  19,620,300 ns/iter (+/- 915,700)\ntest bench_search_iter ... bench:  19,234,900 ns/iter (+/- 657,200)\n```\n\nThe iterator version was slightly faster! We won’t explain the benchmark code\nhere, because the point is not to prove that the two versions are equivalent\nbut to get a general sense of how these two implementations compare\nperformance-wise.\n\nFor a more comprehensive benchmark, you should check using various texts of\nvarious sizes as the `contents`, different words and words of different lengths\nas the `query`, and all kinds of other variations. The point is this:\niterators, although a high-level abstraction, get compiled down to roughly the\nsame code as if you’d written the lower-level code yourself. Iterators are one\nof Rust’s *zero-cost abstractions*, by which we mean using the abstraction\nimposes no additional runtime overhead. This is analogous to how Bjarne\nStroustrup, the original designer and implementor of C++, defines\n*zero-overhead* in “Foundations of C++” (2012):\n\n> In general, C++ implementations obey the zero-overhead principle: What you\n> don’t use, you don’t pay for. And further: What you do use, you couldn’t hand\n> code any better.\n\nAs another example, the following code is taken from an audio decoder. The\ndecoding algorithm uses the linear prediction mathematical operation to\nestimate future values based on a linear function of the previous samples. This\ncode uses an iterator chain to do some math on three variables in scope: a\n`buffer` slice of data, an array of 12 `coefficients`, and an amount by which\nto shift data in `qlp_shift`. We’ve declared the variables within this example\nbut not given them any values; although this code doesn’t have much meaning\noutside of its context, it’s still a concise, real-world example of how Rust\ntranslates high-level ideas to low-level code.\n\n```rust,ignore\nlet buffer: &mut [i32];\nlet coefficients: [i64; 12];\nlet qlp_shift: i16;\n\nfor i in 12..buffer.len() {\n    let prediction = coefficients.iter()\n                                 .zip(&buffer[i - 12..i])\n                                 .map(|(&c, &s)| c * s as i64)\n                                 .sum::<i64>() >> qlp_shift;\n    let delta = buffer[i];\n    buffer[i] = prediction as i32 + delta;\n}\n```\n\nTo calculate the value of `prediction`, this code iterates through each of the\n12 values in `coefficients` and uses the `zip` method to pair the coefficient\nvalues with the previous 12 values in `buffer`. Then, for each pair, we\nmultiply the values together, sum all the results, and shift the bits in the\nsum `qlp_shift` bits to the right.\n\nCalculations in applications like audio decoders often prioritize performance\nmost highly. Here, we’re creating an iterator, using two adaptors, and then\nconsuming the value. What assembly code would this Rust code compile to? Well,\nas of this writing, it compiles down to the same assembly you’d write by hand.\nThere’s no loop at all corresponding to the iteration over the values in\n`coefficients`: Rust knows that there are 12 iterations, so it “unrolls” the\nloop. *Unrolling* is an optimization that removes the overhead of the loop\ncontrolling code and instead generates repetitive code for each iteration of\nthe loop.\n\nAll of the coefficients get stored in registers, which means accessing the\nvalues is very fast. There are no bounds checks on the array access at runtime.\nAll these optimizations that Rust is able to apply make the resulting code\nextremely efficient. Now that you know this, you can use iterators and closures\nwithout fear! They make code seem like it’s higher level but don’t impose a\nruntime performance penalty for doing so.\n\n## Summary\n\nClosures and iterators are Rust features inspired by functional programming\nlanguage ideas. They contribute to Rust’s capability to clearly express\nhigh-level ideas at low-level performance. The implementations of closures and\niterators are such that runtime performance is not affected. This is part of\nRust’s goal to strive to provide zero-cost abstractions.\n\nNow that we’ve improved the expressiveness of our I/O project, let’s look at\nsome more features of `cargo` that will help us share the project with the\nworld.\n", number: Some(SectionNumber([13, 4])), sub_items: [], path: "ch13-04-performance.md", parent_names: ["Functional Language Features: Iterators and Closures"] })], path: "ch13-00-functional-features.md", parent_names: [] }), Chapter(Chapter { name: "More about Cargo and Crates.io", content: "# More About Cargo and Crates.io\n\nSo far we’ve used only the most basic features of Cargo to build, run, and test\nour code, but it can do a lot more. In this chapter, we’ll discuss some of its\nother, more advanced features to show you how to do the following:\n\n* Customize your build through release profiles\n* Publish libraries on [crates.io](https://crates.io/)<!-- ignore -->\n* Organize large projects with workspaces\n* Install binaries from [crates.io](https://crates.io/)<!-- ignore -->\n* Extend Cargo using custom commands\n\nCargo can do even more than what we cover in this chapter, so for a full\nexplanation of all its features, see [its\ndocumentation](https://doc.rust-lang.org/cargo/).\n", number: Some(SectionNumber([14])), sub_items: [Chapter(Chapter { name: "Customizing Builds with Release Profiles", content: "## Customizing Builds with Release Profiles\n\nIn Rust, *release profiles* are predefined and customizable profiles with\ndifferent configurations that allow a programmer to have more control over\nvarious options for compiling code. Each profile is configured independently of\nthe others.\n\nCargo has two main profiles: the `dev` profile Cargo uses when you run `cargo\nbuild` and the `release` profile Cargo uses when you run `cargo build\n--release`. The `dev` profile is defined with good defaults for development,\nand the `release` profile has good defaults for release builds.\n\nThese profile names might be familiar from the output of your builds:\n\n<!-- manual-regeneration\nanywhere, run:\ncargo build\ncargo build --release\nand ensure output below is accurate\n-->\n\n```text\n$ cargo build\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n$ cargo build --release\n    Finished release [optimized] target(s) in 0.0s\n```\n\nThe `dev` and `release` shown in this build output indicate that the compiler\nis using different profiles.\n\nCargo has default settings for each of the profiles that apply when there\naren’t any `[profile.*]` sections in the project’s *Cargo.toml* file. By adding\n`[profile.*]` sections for any profile you want to customize, you can override\nany subset of the default settings. For example, here are the default values\nfor the `opt-level` setting for the `dev` and `release` profiles:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[profile.dev]\nopt-level = 0\n\n[profile.release]\nopt-level = 3\n```\n\nThe `opt-level` setting controls the number of optimizations Rust will apply to\nyour code, with a range of 0 to 3. Applying more optimizations extends\ncompiling time, so if you’re in development and compiling your code often,\nyou’ll want faster compiling even if the resulting code runs slower. That is\nthe reason the default `opt-level` for `dev` is `0`. When you’re ready to\nrelease your code, it’s best to spend more time compiling. You’ll only compile\nin release mode once, but you’ll run the compiled program many times, so\nrelease mode trades longer compile time for code that runs faster. That is why\nthe default `opt-level` for the `release` profile is `3`.\n\nYou can override any default setting by adding a different value for it in\n*Cargo.toml*. For example, if we want to use optimization level 1 in the\ndevelopment profile, we can add these two lines to our project’s *Cargo.toml*\nfile:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[profile.dev]\nopt-level = 1\n```\n\nThis code overrides the default setting of `0`. Now when we run `cargo build`,\nCargo will use the defaults for the `dev` profile plus our customization to\n`opt-level`. Because we set `opt-level` to `1`, Cargo will apply more\noptimizations than the default, but not as many as in a release build.\n\nFor the full list of configuration options and defaults for each profile, see\n[Cargo’s documentation](https://doc.rust-lang.org/cargo/reference/profiles.html).\n", number: Some(SectionNumber([14, 1])), sub_items: [], path: "ch14-01-release-profiles.md", parent_names: ["More about Cargo and Crates.io"] }), Chapter(Chapter { name: "Publishing a Crate to Crates.io", content: "## Publishing a Crate to Crates.io\n\nWe’ve used packages from [crates.io](https://crates.io/)<!-- ignore --> as\ndependencies of our project, but you can also share your code with other people\nby publishing your own packages. The crate registry at\n[crates.io](https://crates.io/)<!-- ignore --> distributes the source code of\nyour packages, so it primarily hosts code that is open source.\n\nRust and Cargo have features that help make your published package easier for\npeople to use and to find in the first place. We’ll talk about some of these\nfeatures next and then explain how to publish a package.\n\n### Making Useful Documentation Comments\n\nAccurately documenting your packages will help other users know how and when to\nuse them, so it’s worth investing the time to write documentation. In Chapter\n3, we discussed how to comment Rust code using two slashes, `//`. Rust also has\na particular kind of comment for documentation, known conveniently as a\n*documentation comment*, that will generate HTML documentation. The HTML\ndisplays the contents of documentation comments for public API items intended\nfor programmers interested in knowing how to *use* your crate as opposed to how\nyour crate is *implemented*.\n\nDocumentation comments use three slashes, `///`, instead of two and support\nMarkdown notation for formatting the text. Place documentation comments just\nbefore the item they’re documenting. Listing 14-1 shows documentation comments\nfor an `add_one` function in a crate named `my_crate`:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```\n/// let arg = 5;\n/// let answer = my_crate::add_one(arg);\n///\n/// assert_eq!(6, answer);\n/// ```\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\n<span class=\"caption\">Listing 14-1: A documentation comment for a\nfunction</span>\n\nHere, we give a description of what the `add_one` function does, start a\nsection with the heading `Examples`, and then provide code that demonstrates\nhow to use the `add_one` function. We can generate the HTML documentation from\nthis documentation comment by running `cargo doc`. This command runs the\n`rustdoc` tool distributed with Rust and puts the generated HTML documentation\nin the *target/doc* directory.\n\nFor convenience, running `cargo doc --open` will build the HTML for your\ncurrent crate’s documentation (as well as the documentation for all of your\ncrate’s dependencies) and open the result in a web browser. Navigate to the\n`add_one` function and you’ll see how the text in the documentation comments is\nrendered, as shown in Figure 14-1:\n\n<img alt=\"Rendered HTML documentation for the `add_one` function of `my_crate`\" src=\"img/trpl14-01.png\" class=\"center\" />\n\n<span class=\"caption\">Figure 14-1: HTML documentation for the `add_one`\nfunction</span>\n\n#### Commonly Used Sections\n\nWe used the `# Examples` Markdown heading in Listing 14-1 to create a section\nin the HTML with the title “Examples.” Here are some other sections that crate\nauthors commonly use in their documentation:\n\n* **Panics**: The scenarios in which the function being documented could\n  panic. Callers of the function who don’t want their programs to panic should\n  make sure they don’t call the function in these situations.\n* **Errors**: If the function returns a `Result`, describing the kinds of\n  errors that might occur and what conditions might cause those errors to be\n  returned can be helpful to callers so they can write code to handle the\n  different kinds of errors in different ways.\n* **Safety**: If the function is `unsafe` to call (we discuss unsafety in\n  Chapter 19), there should be a section explaining why the function is unsafe\n  and covering the invariants that the function expects callers to uphold.\n\nMost documentation comments don’t need all of these sections, but this is a\ngood checklist to remind you of the aspects of your code that people calling\nyour code will be interested in knowing about.\n\n#### Documentation Comments as Tests\n\nAdding example code blocks in your documentation comments can help demonstrate\nhow to use your library, and doing so has an additional bonus: running `cargo\ntest` will run the code examples in your documentation as tests! Nothing is\nbetter than documentation with examples. But nothing is worse than examples\nthat don’t work because the code has changed since the documentation was\nwritten. If we run `cargo test` with the documentation for the `add_one`\nfunction from Listing 14-1, we will see a section in the test results like this:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-01/\ncargo test\ncopy just the doc-tests section below\n-->\n\n```text\n   Doc-tests my_crate\n\nrunning 1 test\ntest src/lib.rs - add_one (line 5) ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nNow if we change either the function or the example so the `assert_eq!` in the\nexample panics and run `cargo test` again, we’ll see that the doc tests catch\nthat the example and the code are out of sync with each other!\n\n#### Commenting Contained Items\n\nAnother style of doc comment, `//!`, adds documentation to the item that\ncontains the comments rather than adding documentation to the items following\nthe comments. We typically use these doc comments inside the crate root file\n(*src/lib.rs* by convention) or inside a module to document the crate or the\nmodule as a whole.\n\nFor example, if we want to add documentation that describes the purpose of the\n`my_crate` crate that contains the `add_one` function, we can add documentation\ncomments that start with `//!` to the beginning of the *src/lib.rs* file, as\nshown in Listing 14-2:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n//! # My Crate\n//!\n//! `my_crate` is a collection of utilities to make performing certain\n//! calculations more convenient.\n\n/// Adds one to the number given.\n// --snip--\n# ///\n# /// # Examples\n# ///\n# /// ```\n# /// let arg = 5;\n# /// let answer = my_crate::add_one(arg);\n# ///\n# /// assert_eq!(6, answer);\n# /// ```\n# pub fn add_one(x: i32) -> i32 {\n#     x + 1\n# }\n```\n\n<span class=\"caption\">Listing 14-2: Documentation for the `my_crate` crate as a\nwhole</span>\n\nNotice there isn’t any code after the last line that begins with `//!`. Because\nwe started the comments with `//!` instead of `///`, we’re documenting the item\nthat contains this comment rather than an item that follows this comment. In\nthis case, the item that contains this comment is the *src/lib.rs* file, which\nis the crate root. These comments describe the entire crate.\n\nWhen we run `cargo doc --open`, these comments will display on the front\npage of the documentation for `my_crate` above the list of public items in the\ncrate, as shown in Figure 14-2:\n\n<img alt=\"Rendered HTML documentation with a comment for the crate as a whole\" src=\"img/trpl14-02.png\" class=\"center\" />\n\n<span class=\"caption\">Figure 14-2: Rendered documentation for `my_crate`,\nincluding the comment describing the crate as a whole</span>\n\nDocumentation comments within items are useful for describing crates and\nmodules especially. Use them to explain the overall purpose of the container to\nhelp your users understand the crate’s organization.\n\n### Exporting a Convenient Public API with `pub use`\n\nIn Chapter 7, we covered how to organize our code into modules using the `mod`\nkeyword, how to make items public using the `pub` keyword, and how to bring\nitems into a scope with the `use` keyword. However, the structure that makes\nsense to you while you’re developing a crate might not be very convenient for\nyour users. You might want to organize your structs in a hierarchy containing\nmultiple levels, but then people who want to use a type you’ve defined deep in\nthe hierarchy might have trouble finding out that type exists. They might also\nbe annoyed at having to enter `use`\n`my_crate::some_module::another_module::UsefulType;` rather than `use`\n`my_crate::UsefulType;`.\n\nThe structure of your public API is a major consideration when publishing a\ncrate. People who use your crate are less familiar with the structure than you\nare and might have difficulty finding the pieces they want to use if your crate\nhas a large module hierarchy.\n\nThe good news is that if the structure *isn’t* convenient for others to use\nfrom another library, you don’t have to rearrange your internal organization:\ninstead, you can re-export items to make a public structure that’s different\nfrom your private structure by using `pub use`. Re-exporting takes a public\nitem in one location and makes it public in another location, as if it were\ndefined in the other location instead.\n\nFor example, say we made a library named `art` for modeling artistic concepts.\nWithin this library are two modules: a `kinds` module containing two enums\nnamed `PrimaryColor` and `SecondaryColor` and a `utils` module containing a\nfunction named `mix`, as shown in Listing 14-3:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n//! # Art\n//!\n//! A library for modeling artistic concepts.\n\npub mod kinds {\n    /// The primary colors according to the RYB color model.\n    pub enum PrimaryColor {\n        Red,\n        Yellow,\n        Blue,\n    }\n\n    /// The secondary colors according to the RYB color model.\n    pub enum SecondaryColor {\n        Orange,\n        Green,\n        Purple,\n    }\n}\n\npub mod utils {\n    use crate::kinds::*;\n\n    /// Combines two primary colors in equal amounts to create\n    /// a secondary color.\n    pub fn mix(c1: PrimaryColor, c2: PrimaryColor) -> SecondaryColor {\n        // --snip--\n#         SecondaryColor::Orange\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 14-3: An `art` library with items organized into\n`kinds` and `utils` modules</span>\n\nFigure 14-3 shows what the front page of the documentation for this crate\ngenerated by `cargo doc` would look like:\n\n<img alt=\"Rendered documentation for the `art` crate that lists the `kinds` and `utils` modules\" src=\"img/trpl14-03.png\" class=\"center\" />\n\n<span class=\"caption\">Figure 14-3: Front page of the documentation for `art`\nthat lists the `kinds` and `utils` modules</span>\n\nNote that the `PrimaryColor` and `SecondaryColor` types aren’t listed on the\nfront page, nor is the `mix` function. We have to click `kinds` and `utils` to\nsee them.\n\nAnother crate that depends on this library would need `use` statements that\nbring the items from `art` into scope, specifying the module structure that’s\ncurrently defined. Listing 14-4 shows an example of a crate that uses the\n`PrimaryColor` and `mix` items from the `art` crate:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\nuse art::kinds::PrimaryColor;\nuse art::utils::mix;\n\nfn main() {\n    let red = PrimaryColor::Red;\n    let yellow = PrimaryColor::Yellow;\n    mix(red, yellow);\n}\n```\n\n<span class=\"caption\">Listing 14-4: A crate using the `art` crate’s items with\nits internal structure exported</span>\n\nThe author of the code in Listing 14-4, which uses the `art` crate, had to\nfigure out that `PrimaryColor` is in the `kinds` module and `mix` is in the\n`utils` module. The module structure of the `art` crate is more relevant to\ndevelopers working on the `art` crate than to developers using the `art` crate.\nThe internal structure that organizes parts of the crate into the `kinds`\nmodule and the `utils` module doesn’t contain any useful information for\nsomeone trying to understand how to use the `art` crate. Instead, the `art`\ncrate’s module structure causes confusion because developers have to figure out\nwhere to look, and the structure is inconvenient because developers must\nspecify the module names in the `use` statements.\n\nTo remove the internal organization from the public API, we can modify the\n`art` crate code in Listing 14-3 to add `pub use` statements to re-export the\nitems at the top level, as shown in Listing 14-5:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n//! # Art\n//!\n//! A library for modeling artistic concepts.\n\npub use self::kinds::PrimaryColor;\npub use self::kinds::SecondaryColor;\npub use self::utils::mix;\n\npub mod kinds {\n    // --snip--\n#     /// The primary colors according to the RYB color model.\n#     pub enum PrimaryColor {\n#         Red,\n#         Yellow,\n#         Blue,\n#     }\n# \n#     /// The secondary colors according to the RYB color model.\n#     pub enum SecondaryColor {\n#         Orange,\n#         Green,\n#         Purple,\n#     }\n}\n\npub mod utils {\n    // --snip--\n#     use crate::kinds::*;\n# \n#     /// Combines two primary colors in equal amounts to create\n#     /// a secondary color.\n#     pub fn mix(c1: PrimaryColor, c2: PrimaryColor) -> SecondaryColor {\n#         SecondaryColor::Orange\n#     }\n}\n```\n\n<span class=\"caption\">Listing 14-5: Adding `pub use` statements to re-export\nitems</span>\n\nThe API documentation that `cargo doc` generates for this crate will now list\nand link re-exports on the front page, as shown in Figure 14-4, making the\n`PrimaryColor` and `SecondaryColor` types and the `mix` function easier to find.\n\n<img alt=\"Rendered documentation for the `art` crate with the re-exports on the front page\" src=\"img/trpl14-04.png\" class=\"center\" />\n\n<span class=\"caption\">Figure 14-4: The front page of the documentation for `art`\nthat lists the re-exports</span>\n\nThe `art` crate users can still see and use the internal structure from Listing\n14-3 as demonstrated in Listing 14-4, or they can use the more convenient\nstructure in Listing 14-5, as shown in Listing 14-6:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\nuse art::mix;\nuse art::PrimaryColor;\n\nfn main() {\n    // --snip--\n#     let red = PrimaryColor::Red;\n#     let yellow = PrimaryColor::Yellow;\n#     mix(red, yellow);\n}\n```\n\n<span class=\"caption\">Listing 14-6: A program using the re-exported items from\nthe `art` crate</span>\n\nIn cases where there are many nested modules, re-exporting the types at the top\nlevel with `pub use` can make a significant difference in the experience of\npeople who use the crate.\n\nCreating a useful public API structure is more of an art than a science, and\nyou can iterate to find the API that works best for your users. Choosing `pub\nuse` gives you flexibility in how you structure your crate internally and\ndecouples that internal structure from what you present to your users. Look at\nsome of the code of crates you’ve installed to see if their internal structure\ndiffers from their public API.\n\n### Setting Up a Crates.io Account\n\nBefore you can publish any crates, you need to create an account on\n[crates.io](https://crates.io/)<!-- ignore --> and get an API token. To do so,\nvisit the home page at [crates.io](https://crates.io/)<!-- ignore --> and log in\nvia a GitHub account. (The GitHub account is currently a requirement, but the\nsite might support other ways of creating an account in the future.) Once\nyou’re logged in, visit your account settings at\n[https://crates.io/me/](https://crates.io/me/)<!-- ignore --> and retrieve your\nAPI key. Then run the `cargo login` command with your API key, like this:\n\n```text\n$ cargo login abcdefghijklmnopqrstuvwxyz012345\n```\n\nThis command will inform Cargo of your API token and store it locally in\n*~/.cargo/credentials*. Note that this token is a *secret*: do not share it\nwith anyone else. If you do share it with anyone for any reason, you should\nrevoke it and generate a new token on [crates.io](https://crates.io/)<!-- ignore\n-->.\n\n### Adding Metadata to a New Crate\n\nNow that you have an account, let’s say you have a crate you want to publish.\nBefore publishing, you’ll need to add some metadata to your crate by adding it\nto the `[package]` section of the crate’s *Cargo.toml* file.\n\nYour crate will need a unique name. While you’re working on a crate locally,\nyou can name a crate whatever you’d like. However, crate names on\n[crates.io](https://crates.io/)<!-- ignore --> are allocated on a first-come,\nfirst-served basis. Once a crate name is taken, no one else can publish a crate\nwith that name. Before attempting to publish a crate, search for the name you\nwant to use on the site. If the name has been used by another crate, you will\nneed to find another name and edit the `name` field in the *Cargo.toml* file\nunder the `[package]` section to use the new name for publishing, like so:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[package]\nname = \"guessing_game\"\n```\n\nEven if you’ve chosen a unique name, when you run `cargo publish` to publish\nthe crate at this point, you’ll get a warning and then an error:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-01/\ncargo publish\ncopy just the relevant lines below\n-->\n\n```text\n$ cargo publish\n    Updating crates.io index\nwarning: manifest has no description, license, license-file, documentation, homepage or repository.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#package-metadata for more info.\n--snip--\nerror: api errors (status 200 OK): missing or empty metadata fields: description, license. Please see https://doc.rust-lang.org/cargo/reference/manifest.html for how to upload metadata\n```\n\nThe reason is that you’re missing some crucial information: a description and\nlicense are required so people will know what your crate does and under what\nterms they can use it. To rectify this error, you need to include this\ninformation in the *Cargo.toml* file.\n\nAdd a description that is just a sentence or two, because it will appear with\nyour crate in search results. For the `license` field, you need to give a\n*license identifier value*. The [Linux Foundation’s Software Package Data\nExchange (SPDX)][spdx] lists the identifiers you can use for this value. For\nexample, to specify that you’ve licensed your crate using the MIT License, add\nthe `MIT` identifier:\n\n[spdx]: http://spdx.org/licenses/\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[package]\nname = \"guessing_game\"\nlicense = \"MIT\"\n```\n\nIf you want to use a license that doesn’t appear in the SPDX, you need to place\nthe text of that license in a file, include the file in your project, and then\nuse `license-file` to specify the name of that file instead of using the\n`license` key.\n\nGuidance on which license is appropriate for your project is beyond the scope\nof this book. Many people in the Rust community license their projects in the\nsame way as Rust by using a dual license of `MIT OR Apache-2.0`. This practice\ndemonstrates that you can also specify multiple license identifiers separated\nby `OR` to have multiple licenses for your project.\n\nWith a unique name, the version, the author details that `cargo new` added\nwhen you created the crate, your description, and a license added, the\n*Cargo.toml* file for a project that is ready to publish might look like this:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[package]\nname = \"guessing_game\"\nversion = \"0.1.0\"\nauthors = [\"Your Name <you@example.com>\"]\nedition = \"2018\"\ndescription = \"A fun game where you guess what number the computer has chosen.\"\nlicense = \"MIT OR Apache-2.0\"\n\n[dependencies]\n```\n\n[Cargo’s documentation](https://doc.rust-lang.org/cargo/) describes other\nmetadata you can specify to ensure others can discover and use your crate more\neasily.\n\n### Publishing to Crates.io\n\nNow that you’ve created an account, saved your API token, chosen a name for\nyour crate, and specified the required metadata, you’re ready to publish!\nPublishing a crate uploads a specific version to\n[crates.io](https://crates.io/)<!-- ignore --> for others to use.\n\nBe careful when publishing a crate because a publish is *permanent*. The\nversion can never be overwritten, and the code cannot be deleted. One major\ngoal of [crates.io](https://crates.io/)<!-- ignore --> is to act as a permanent\narchive of code so that builds of all projects that depend on crates from\n[crates.io](https://crates.io/)<!-- ignore --> will continue to work. Allowing\nversion deletions would make fulfilling that goal impossible. However, there is\nno limit to the number of crate versions you can publish.\n\nRun the `cargo publish` command again. It should succeed now:\n\n<!-- manual-regeneration\ngo to some valid crate, publish a new version\ncargo publish\ncopy just the relevant lines below\n-->\n\n```text\n$ cargo publish\n    Updating crates.io index\n   Packaging guessing_game v0.1.0 (file:///projects/guessing_game)\n   Verifying guessing_game v0.1.0 (file:///projects/guessing_game)\n   Compiling guessing_game v0.1.0\n(file:///projects/guessing_game/target/package/guessing_game-0.1.0)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.19s\n   Uploading guessing_game v0.1.0 (file:///projects/guessing_game)\n```\n\nCongratulations! You’ve now shared your code with the Rust community, and\nanyone can easily add your crate as a dependency of their project.\n\n### Publishing a New Version of an Existing Crate\n\nWhen you’ve made changes to your crate and are ready to release a new version,\nyou change the `version` value specified in your *Cargo.toml* file and\nrepublish. Use the [Semantic Versioning rules][semver] to decide what an\nappropriate next version number is based on the kinds of changes you’ve made.\nThen run `cargo publish` to upload the new version.\n\n[semver]: http://semver.org/\n\n### Removing Versions from Crates.io with `cargo yank`\n\nAlthough you can’t remove previous versions of a crate, you can prevent any\nfuture projects from adding them as a new dependency. This is useful when a\ncrate version is broken for one reason or another. In such situations, Cargo\nsupports *yanking* a crate version.\n\nYanking a version prevents new projects from starting to depend on that version\nwhile allowing all existing projects that depend on it to continue to download\nand depend on that version. Essentially, a yank means that all projects with a\n*Cargo.lock* will not break, and any future *Cargo.lock* files generated will\nnot use the yanked version.\n\nTo yank a version of a crate, run `cargo yank` and specify which version you\nwant to yank:\n\n```text\n$ cargo yank --vers 1.0.1\n```\n\nBy adding `--undo` to the command, you can also undo a yank and allow projects\nto start depending on a version again:\n\n```text\n$ cargo yank --vers 1.0.1 --undo\n```\n\nA yank *does not* delete any code. For example, the yank feature is not\nintended for deleting accidentally uploaded secrets. If that happens, you must\nreset those secrets immediately.\n", number: Some(SectionNumber([14, 2])), sub_items: [], path: "ch14-02-publishing-to-crates-io.md", parent_names: ["More about Cargo and Crates.io"] }), Chapter(Chapter { name: "Cargo Workspaces", content: "## Cargo Workspaces\n\nIn Chapter 12, we built a package that included a binary crate and a library\ncrate. As your project develops, you might find that the library crate\ncontinues to get bigger and you want to split up your package further into\nmultiple library crates. In this situation, Cargo offers a feature called\n*workspaces* that can help manage multiple related packages that are developed\nin tandem.\n\n### Creating a Workspace\n\nA *workspace* is a set of packages that share the same *Cargo.lock* and output\ndirectory. Let’s make a project using a workspace—we’ll use trivial code so we\ncan concentrate on the structure of the workspace. There are multiple ways to\nstructure a workspace; we’re going to show one common way. We’ll have a\nworkspace containing a binary and two libraries. The binary, which will provide\nthe main functionality, will depend on the two libraries. One library will\nprovide an `add_one` function, and a second library an `add_two` function.\nThese three crates will be part of the same workspace. We’ll start by creating\na new directory for the workspace:\n\n```text\n$ mkdir add\n$ cd add\n```\n\nNext, in the *add* directory, we create the *Cargo.toml* file that will\nconfigure the entire workspace. This file won’t have a `[package]` section or\nthe metadata we’ve seen in other *Cargo.toml* files. Instead, it will start\nwith a `[workspace]` section that will allow us to add members to the workspace\nby specifying the path to our binary crate; in this case, that path is *adder*:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[workspace]\n\nmembers = [\n    \"adder\",\n]\n```\n\nNext, we’ll create the `adder` binary crate by running `cargo new` within the\n*add* directory:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-01-adder-crate/add\nrm -rf adder\ncargo new adder\ncopy output below\n-->\n\n```text\n$ cargo new adder\n     Created binary (application) `adder` package\n```\n\nAt this point, we can build the workspace by running `cargo build`. The files\nin your *add* directory should look like this:\n\n```text\n├── Cargo.lock\n├── Cargo.toml\n├── adder\n│   ├── Cargo.toml\n│   └── src\n│       └── main.rs\n└── target\n```\n\nThe workspace has one *target* directory at the top level for the compiled\nartifacts to be placed into; the `adder` crate doesn’t have its own *target*\ndirectory. Even if we were to run `cargo build` from inside the *adder*\ndirectory, the compiled artifacts would still end up in *add/target* rather\nthan *add/adder/target*. Cargo structures the *target* directory in a workspace\nlike this because the crates in a workspace are meant to depend on each other.\nIf each crate had its own *target* directory, each crate would have to\nrecompile each of the other crates in the workspace to have the artifacts in\nits own *target* directory. By sharing one *target* directory, the crates can\navoid unnecessary rebuilding.\n\n### Creating the Second Crate in the Workspace\n\nNext, let’s create another member crate in the workspace and call it `add-one`.\nChange the top-level *Cargo.toml* to specify the *add-one* path in the\n`members` list:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[workspace]\n\nmembers = [\n    \"adder\",\n    \"add-one\",\n]\n```\n\nThen generate a new library crate named `add-one`:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-02-add-one/add\nrm -rf add-one\ncargo new add-one --lib\ncopy output below\n-->\n\n```text\n$ cargo new add-one --lib\n     Created library `add-one` package\n```\n\nYour *add* directory should now have these directories and files:\n\n```text\n├── Cargo.lock\n├── Cargo.toml\n├── add-one\n│   ├── Cargo.toml\n│   └── src\n│       └── lib.rs\n├── adder\n│   ├── Cargo.toml\n│   └── src\n│       └── main.rs\n└── target\n```\n\nIn the *add-one/src/lib.rs* file, let’s add an `add_one` function:\n\n<span class=\"filename\">Filename: add-one/src/lib.rs</span>\n\n```rust\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\nNow that we have a library crate in the workspace, we can have the binary crate\n`adder` depend on the library crate `add-one`. First, we’ll need to add a path\ndependency on `add-one` to *adder/Cargo.toml*.\n\n<span class=\"filename\">Filename: adder/Cargo.toml</span>\n\n```toml\n[dependencies]\n\nadd-one = { path = \"../add-one\" }\n```\n\nCargo doesn’t assume that crates in a workspace will depend on each other, so\nwe need to be explicit about the dependency relationships between the crates.\n\nNext, let’s use the `add_one` function from the `add-one` crate in the `adder`\ncrate. Open the *adder/src/main.rs* file and add a `use` line at the top to\nbring the new `add-one` library crate into scope. Then change the `main`\nfunction to call the `add_one` function, as in Listing 14-7.\n\n<span class=\"filename\">Filename: adder/src/main.rs</span>\n\n```rust,ignore\nuse add_one;\n\nfn main() {\n    let num = 10;\n    println!(\n        \"Hello, world! {} plus one is {}!\",\n        num,\n        add_one::add_one(num)\n    );\n}\n```\n\n<span class=\"caption\">Listing 14-7: Using the `add-one` library crate from the\n`adder` crate</span>\n\nLet’s build the workspace by running `cargo build` in the top-level *add*\ndirectory!\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-07/add\ncargo build\ncopy output below; the output updating script doesn\'t handle subdirectories in paths properly\n-->\n\n```text\n$ cargo build\n   Compiling add-one v0.1.0 (file:///projects/add/add-one)\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.68s\n```\n\nTo run the binary crate from the *add* directory, we need to specify which\npackage in the workspace we want to use by using the `-p` argument and the\npackage name with `cargo run`:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-07/add\ncargo run -p adder\ncopy output below; the output updating script doesn\'t handle subdirectories in paths properly\n-->\n\n```text\n$ cargo run -p adder\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/adder`\nHello, world! 10 plus one is 11!\n```\n\nThis runs the code in *adder/src/main.rs*, which depends on the `add-one` crate.\n\n#### Depending on an External Crate in a Workspace\n\nNotice that the workspace has only one *Cargo.lock* file at the top level of\nthe workspace rather than having a *Cargo.lock* in each crate’s directory. This\nensures that all crates are using the same version of all dependencies. If we\nadd the `rand` crate to the *adder/Cargo.toml* and *add-one/Cargo.toml*\nfiles, Cargo will resolve both of those to one version of `rand` and record\nthat in the one *Cargo.lock*. Making all crates in the workspace use the same\ndependencies means the crates in the workspace will always be compatible with\neach other. Let’s add the `rand` crate to the `[dependencies]` section in the\n*add-one/Cargo.toml* file to be able to use the `rand` crate in the `add-one`\ncrate:\n\n<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch02-00-guessing-game-tutorial.md\n* ch07-04-bringing-paths-into-scope-with-the-use-keyword.md\n-->\n\n<span class=\"filename\">Filename: add-one/Cargo.toml</span>\n\n```toml\n[dependencies]\nrand = \"0.5.5\"\n```\n\nWe can now add `use rand;` to the *add-one/src/lib.rs* file, and building the\nwhole workspace by running `cargo build` in the *add* directory will bring in\nand compile the `rand` crate:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-03-workspace-with-external-dependency/add\ncargo build\ncopy output below; the output updating script doesn\'t handle subdirectories in paths properly\n-->\n\n```text\n$ cargo build\n    Updating crates.io index\n  Downloaded rand v0.5.5\n   --snip--\n   Compiling rand v0.5.6\n   Compiling add-one v0.1.0 (file:///projects/add/add-one)\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished dev [unoptimized + debuginfo] target(s) in 10.18s\n```\n\nThe top-level *Cargo.lock* now contains information about the dependency of\n`add-one` on `rand`. However, even though `rand` is used somewhere in the\nworkspace, we can’t use it in other crates in the workspace unless we add\n`rand` to their *Cargo.toml* files as well. For example, if we add `use rand;`\nto the *adder/src/main.rs* file for the `adder` crate, we’ll get an error:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-03-use-rand/add\ncargo build\ncopy output below; the output updating script doesn\'t handle subdirectories in paths properly\n-->\n\n```text\n$ cargo build\n  --snip--\n   Compiling adder v0.1.0 (file:///projects/add/adder)\nerror[E0432]: unresolved import `rand`\n --> adder/src/main.rs:2:5\n  |\n2 | use rand;\n  |     ^^^^ no `rand` external crate\n```\n\nTo fix this, edit the *Cargo.toml* file for the `adder` crate and indicate that\n`rand` is a dependency for that crate as well. Building the `adder` crate will\nadd `rand` to the list of dependencies for `adder` in *Cargo.lock*, but no\nadditional copies of `rand` will be downloaded. Cargo has ensured that every\ncrate in the workspace using the `rand` crate will be using the same version.\nUsing the same version of `rand` across the workspace saves space because we\nwon’t have multiple copies and ensures that the crates in the workspace will be\ncompatible with each other.\n\n#### Adding a Test to a Workspace\n\nFor another enhancement, let’s add a test of the `add_one::add_one` function\nwithin the `add_one` crate:\n\n<span class=\"filename\">Filename: add-one/src/lib.rs</span>\n\n```rust\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn it_works() {\n        assert_eq!(3, add_one(2));\n    }\n}\n```\n\nNow run `cargo test` in the top-level *add* directory:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-04-workspace-with-tests/add\ncargo test\ncopy output below; the output updating script doesn\'t handle subdirectories in paths properly\n-->\n\n```text\n$ cargo test\n   Compiling add-one v0.1.0 (file:///projects/add/add-one)\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.27s\n     Running target/debug/deps/add_one-f0253159197f7841\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/debug/deps/adder-49979ff40686fa8e\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests add-one\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nThe first section of the output shows that the `it_works` test in the `add-one`\ncrate passed. The next section shows that zero tests were found in the `adder`\ncrate, and then the last section shows zero documentation tests were found in\nthe `add-one` crate. Running `cargo test` in a workspace structured like this\none will run the tests for all the crates in the workspace.\n\nWe can also run tests for one particular crate in a workspace from the\ntop-level directory by using the `-p` flag and specifying the name of the crate\nwe want to test:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-04-workspace-with-tests/add\ncargo test -p add-one\ncopy output below; the output updating script doesn\'t handle subdirectories in paths properly\n-->\n\n```text\n$ cargo test -p add-one\n    Finished test [unoptimized + debuginfo] target(s) in 0.00s\n     Running target/debug/deps/add_one-b3235fea9a156f74\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests add-one\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nThis output shows `cargo test` only ran the tests for the `add-one` crate and\ndidn’t run the `adder` crate tests.\n\nIf you publish the crates in the workspace to [crates.io](https://crates.io/),\neach crate in the workspace will need to be published separately. The `cargo\npublish` command does not have an `--all` flag or a `-p` flag, so you must\nchange to each crate’s directory and run `cargo publish` on each crate in the\nworkspace to publish the crates.\n\nFor additional practice, add an `add-two` crate to this workspace in a similar\nway as the `add-one` crate!\n\nAs your project grows, consider using a workspace: it’s easier to understand\nsmaller, individual components than one big blob of code. Furthermore, keeping\nthe crates in a workspace can make coordination between them easier if they are\noften changed at the same time.\n", number: Some(SectionNumber([14, 3])), sub_items: [], path: "ch14-03-cargo-workspaces.md", parent_names: ["More about Cargo and Crates.io"] }), Chapter(Chapter { name: "Installing Binaries from Crates.io with cargo install", content: "## Installing Binaries from Crates.io with `cargo install`\n\nThe `cargo install` command allows you to install and use binary crates\nlocally. This isn’t intended to replace system packages; it’s meant to be a\nconvenient way for Rust developers to install tools that others have shared on\n[crates.io](https://crates.io/)<!-- ignore -->. Note that you can only install\npackages that have binary targets. A *binary target* is the runnable program\nthat is created if the crate has a *src/main.rs* file or another file specified\nas a binary, as opposed to a library target that isn’t runnable on its own but\nis suitable for including within other programs. Usually, crates have\ninformation in the *README* file about whether a crate is a library, has a\nbinary target, or both.\n\nAll binaries installed with `cargo install` are stored in the installation\nroot’s *bin* folder. If you installed Rust using *rustup.rs* and don’t have any\ncustom configurations, this directory will be *$HOME/.cargo/bin*. Ensure that\ndirectory is in your `$PATH` to be able to run programs you’ve installed with\n`cargo install`.\n\nFor example, in Chapter 12 we mentioned that there’s a Rust implementation of\nthe `grep` tool called `ripgrep` for searching files. If we want to install\n`ripgrep`, we can run the following:\n\n<!-- manual-regeneration\ncargo install something you don\'t have, copy relevant output below\n-->\n\n```text\n$ cargo install ripgrep\n    Updating crates.io index\n  Downloaded ripgrep v11.0.2\n  Downloaded 1 crate (243.3 KB) in 0.88s\n  Installing ripgrep v11.0.2\n--snip--\n   Compiling ripgrep v11.0.2\n    Finished release [optimized] target(s) in 3m 10s\n  Installing ~/.cargo/bin/rg\n   Installed package `ripgrep v11.0.2` (executable `rg`)\n```\n\nThe second-to-last line of the output shows the location and the name of the\ninstalled binary, which in the case of `ripgrep` is `rg`. As long as the\ninstallation directory is in your `$PATH`, as mentioned previously, you can\nthen run `rg --help` and start using a faster, rustier tool for searching files!\n", number: Some(SectionNumber([14, 4])), sub_items: [], path: "ch14-04-installing-binaries.md", parent_names: ["More about Cargo and Crates.io"] }), Chapter(Chapter { name: "Extending Cargo with Custom Commands", content: "## Extending Cargo with Custom Commands\n\nCargo is designed so you can extend it with new subcommands without having to\nmodify Cargo. If a binary in your `$PATH` is named `cargo-something`, you can\nrun it as if it was a Cargo subcommand by running `cargo something`. Custom\ncommands like this are also listed when you run `cargo --list`. Being able to\nuse `cargo install` to install extensions and then run them just like the\nbuilt-in Cargo tools is a super convenient benefit of Cargo’s design!\n\n## Summary\n\nSharing code with Cargo and [crates.io](https://crates.io/)<!-- ignore --> is\npart of what makes the Rust ecosystem useful for many different tasks. Rust’s\nstandard library is small and stable, but crates are easy to share, use, and\nimprove on a timeline different from that of the language. Don’t be shy about\nsharing code that’s useful to you on [crates.io](https://crates.io/)<!-- ignore\n-->; it’s likely that it will be useful to someone else as well!\n", number: Some(SectionNumber([14, 5])), sub_items: [], path: "ch14-05-extending-cargo.md", parent_names: ["More about Cargo and Crates.io"] })], path: "ch14-00-more-about-cargo.md", parent_names: [] }), Chapter(Chapter { name: "Smart Pointers", content: "# Smart Pointers\n\nA *pointer* is a general concept for a variable that contains an address in\nmemory. This address refers to, or “points at,” some other data. The most\ncommon kind of pointer in Rust is a reference, which you learned about in\nChapter 4. References are indicated by the `&` symbol and borrow the value they\npoint to. They don’t have any special capabilities other than referring to\ndata. Also, they don’t have any overhead and are the kind of pointer we use\nmost often.\n\n*Smart pointers*, on the other hand, are data structures that not only act like\na pointer but also have additional metadata and capabilities. The concept of\nsmart pointers isn’t unique to Rust: smart pointers originated in C++ and exist\nin other languages as well. In Rust, the different smart pointers defined in\nthe standard library provide functionality beyond that provided by references.\nOne example that we’ll explore in this chapter is the *reference counting*\nsmart pointer type. This pointer enables you to have multiple owners of data by\nkeeping track of the number of owners and, when no owners remain, cleaning up\nthe data.\n\nIn Rust, which uses the concept of ownership and borrowing, an additional\ndifference between references and smart pointers is that references are\npointers that only borrow data; in contrast, in many cases, smart pointers\n*own* the data they point to.\n\nWe’ve already encountered a few smart pointers in this book, such as `String`\nand `Vec<T>` in Chapter 8, although we didn’t call them smart pointers at the\ntime. Both these types count as smart pointers because they own some memory and\nallow you to manipulate it. They also have metadata (such as their capacity)\nand extra capabilities or guarantees (such as with `String` ensuring its data\nwill always be valid UTF-8).\n\nSmart pointers are usually implemented using structs. The characteristic that\ndistinguishes a smart pointer from an ordinary struct is that smart pointers\nimplement the `Deref` and `Drop` traits. The `Deref` trait allows an instance\nof the smart pointer struct to behave like a reference so you can write code\nthat works with either references or smart pointers. The `Drop` trait allows\nyou to customize the code that is run when an instance of the smart pointer\ngoes out of scope. In this chapter, we’ll discuss both traits and demonstrate\nwhy they’re important to smart pointers.\n\nGiven that the smart pointer pattern is a general design pattern used\nfrequently in Rust, this chapter won’t cover every existing smart pointer. Many\nlibraries have their own smart pointers, and you can even write your own. We’ll\ncover the most common smart pointers in the standard library:\n\n* `Box<T>` for allocating values on the heap\n* `Rc<T>`, a reference counting type that enables multiple ownership\n* `Ref<T>` and `RefMut<T>`, accessed through `RefCell<T>`, a type that enforces\n  the borrowing rules at runtime instead of compile time\n\nIn addition, we’ll cover the *interior mutability* pattern where an immutable\ntype exposes an API for mutating an interior value. We’ll also discuss\n*reference cycles*: how they can leak memory and how to prevent them.\n\nLet’s dive in!\n", number: Some(SectionNumber([15])), sub_items: [Chapter(Chapter { name: "Using Box<T> to Point to Data on the Heap", content: "## Using `Box<T>` to Point to Data on the Heap\n\nThe most straightforward smart pointer is a *box*, whose type is written\n`Box<T>`. Boxes allow you to store data on the heap rather than the stack. What\nremains on the stack is the pointer to the heap data. Refer to Chapter 4 to\nreview the difference between the stack and the heap.\n\nBoxes don’t have performance overhead, other than storing their data on the\nheap instead of on the stack. But they don’t have many extra capabilities\neither. You’ll use them most often in these situations:\n\n* When you have a type whose size can’t be known at compile time and you want\n  to use a value of that type in a context that requires an exact size\n* When you have a large amount of data and you want to transfer ownership but\n  ensure the data won’t be copied when you do so\n* When you want to own a value and you care only that it’s a type that\n  implements a particular trait rather than being of a specific type\n\nWe’ll demonstrate the first situation in the [“Enabling Recursive Types with\nBoxes”](#enabling-recursive-types-with-boxes)<!-- ignore --> section. In the\nsecond case, transferring ownership of a large amount of data can take a long\ntime because the data is copied around on the stack. To improve performance in\nthis situation, we can store the large amount of data on the heap in a box.\nThen, only the small amount of pointer data is copied around on the stack,\nwhile the data it references stays in one place on the heap. The third case is\nknown as a *trait object*, and Chapter 17 devotes an entire section, [“Using\nTrait Objects That Allow for Values of Different Types,”][trait-objects]<!--\nignore --> just to that topic. So what you learn here you’ll apply again in\nChapter 17!\n\n### Using a `Box<T>` to Store Data on the Heap\n\nBefore we discuss this use case for `Box<T>`, we’ll cover the syntax and how to\ninteract with values stored within a `Box<T>`.\n\nListing 15-1 shows how to use a box to store an `i32` value on the heap:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let b = Box::new(5);\n    println!(\"b = {}\", b);\n}\n```\n\n<span class=\"caption\">Listing 15-1: Storing an `i32` value on the heap using a\nbox</span>\n\nWe define the variable `b` to have the value of a `Box` that points to the\nvalue `5`, which is allocated on the heap. This program will print `b = 5`; in\nthis case, we can access the data in the box similar to how we would if this\ndata were on the stack. Just like any owned value, when a box goes out of\nscope, as `b` does at the end of `main`, it will be deallocated. The\ndeallocation happens for the box (stored on the stack) and the data it points\nto (stored on the heap).\n\nPutting a single value on the heap isn’t very useful, so you won’t use boxes by\nthemselves in this way very often. Having values like a single `i32` on the\nstack, where they’re stored by default, is more appropriate in the majority of\nsituations. Let’s look at a case where boxes allow us to define types that we\nwouldn’t be allowed to if we didn’t have boxes.\n\n### Enabling Recursive Types with Boxes\n\nAt compile time, Rust needs to know how much space a type takes up. One type\nwhose size can’t be known at compile time is a *recursive type*, where a value\ncan have as part of itself another value of the same type. Because this nesting\nof values could theoretically continue infinitely, Rust doesn’t know how much\nspace a value of a recursive type needs. However, boxes have a known size, so\nby inserting a box in a recursive type definition, you can have recursive types.\n\nLet’s explore the *cons list*, which is a data type common in functional\nprogramming languages, as an example of a recursive type. The cons list type\nwe’ll define is straightforward except for the recursion; therefore, the\nconcepts in the example we’ll work with will be useful any time you get into\nmore complex situations involving recursive types.\n\n#### More Information About the Cons List\n\nA *cons list* is a data structure that comes from the Lisp programming language\nand its dialects. In Lisp, the `cons` function (short for “construct function”)\nconstructs a new pair from its two arguments, which usually are a single value\nand another pair. These pairs containing pairs form a list.\n\nThe cons function concept has made its way into more general functional\nprogramming jargon: “to cons *x* onto *y*” informally means to construct a new\ncontainer instance by putting the element *x* at the start of this new\ncontainer, followed by the container *y*.\n\nEach item in a cons list contains two elements: the value of the current item\nand the next item. The last item in the list contains only a value called `Nil`\nwithout a next item. A cons list is produced by recursively calling the `cons`\nfunction. The canonical name to denote the base case of the recursion is `Nil`.\nNote that this is not the same as the “null” or “nil” concept in Chapter 6,\nwhich is an invalid or absent value.\n\nAlthough functional programming languages use cons lists frequently, the cons\nlist isn’t a commonly used data structure in Rust. Most of the time when you\nhave a list of items in Rust, `Vec<T>` is a better choice to use. Other, more\ncomplex recursive data types *are* useful in various situations, but by\nstarting with the cons list, we can explore how boxes let us define a recursive\ndata type without much distraction.\n\nListing 15-2 contains an enum definition for a cons list. Note that this code\nwon’t compile yet because the `List` type doesn’t have a known size, which\nwe’ll demonstrate.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nenum List {\n    Cons(i32, List),\n    Nil,\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 15-2: The first attempt at defining an enum to\nrepresent a cons list data structure of `i32` values</span>\n\n> Note: We’re implementing a cons list that holds only `i32` values for the\n> purposes of this example. We could have implemented it using generics, as we\n> discussed in Chapter 10, to define a cons list type that could store values of\n> any type.\n\nUsing the `List` type to store the list `1, 2, 3` would look like the code in\nListing 15-3:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n# enum List {\n#     Cons(i32, List),\n#     Nil,\n# }\n# \nuse crate::List::{Cons, Nil};\n\nfn main() {\n    let list = Cons(1, Cons(2, Cons(3, Nil)));\n}\n```\n\n<span class=\"caption\">Listing 15-3: Using the `List` enum to store the list `1,\n2, 3`</span>\n\nThe first `Cons` value holds `1` and another `List` value. This `List` value is\nanother `Cons` value that holds `2` and another `List` value. This `List` value\nis one more `Cons` value that holds `3` and a `List` value, which is finally\n`Nil`, the non-recursive variant that signals the end of the list.\n\nIf we try to compile the code in Listing 15-3, we get the error shown in\nListing 15-4:\n\n```text\n$ cargo run\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\nerror[E0072]: recursive type `List` has infinite size\n --> src/main.rs:1:1\n  |\n1 | enum List {\n  | ^^^^^^^^^ recursive type has infinite size\n2 |     Cons(i32, List),\n  |               ---- recursive without indirection\n  |\n  = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `List` representable\n\nerror[E0391]: cycle detected when processing `List`\n --> src/main.rs:1:1\n  |\n1 | enum List {\n  | ^^^^^^^^^\n  |\n  = note: ...which again requires processing `List`, completing the cycle\n  = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, def_id: None }, value: List } }`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0072, E0391.\nFor more information about an error, try `rustc --explain E0072`.\nerror: could not compile `cons-list`.\n\nTo learn more, run the command again with --verbose.\n```\n\n<span class=\"caption\">Listing 15-4: The error we get when attempting to define\na recursive enum</span>\n\nThe error shows this type “has infinite size.” The reason is that we’ve defined\n`List` with a variant that is recursive: it holds another value of itself\ndirectly. As a result, Rust can’t figure out how much space it needs to store a\n`List` value. Let’s break down why we get this error a bit. First, let’s look\nat how Rust decides how much space it needs to store a value of a non-recursive\ntype.\n\n#### Computing the Size of a Non-Recursive Type\n\nRecall the `Message` enum we defined in Listing 6-2 when we discussed enum\ndefinitions in Chapter 6:\n\n```rust\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n# \n# fn main() {}\n```\n\nTo determine how much space to allocate for a `Message` value, Rust goes\nthrough each of the variants to see which variant needs the most space. Rust\nsees that `Message::Quit` doesn’t need any space, `Message::Move` needs enough\nspace to store two `i32` values, and so forth. Because only one variant will be\nused, the most space a `Message` value will need is the space it would take to\nstore the largest of its variants.\n\nContrast this with what happens when Rust tries to determine how much space a\nrecursive type like the `List` enum in Listing 15-2 needs. The compiler starts\nby looking at the `Cons` variant, which holds a value of type `i32` and a value\nof type `List`. Therefore, `Cons` needs an amount of space equal to the size of\nan `i32` plus the size of a `List`. To figure out how much memory the `List`\ntype needs, the compiler looks at the variants, starting with the `Cons`\nvariant. The `Cons` variant holds a value of type `i32` and a value of type\n`List`, and this process continues infinitely, as shown in Figure 15-1.\n\n<img alt=\"An infinite Cons list\" src=\"img/trpl15-01.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 15-1: An infinite `List` consisting of infinite\n`Cons` variants</span>\n\n#### Using `Box<T>` to Get a Recursive Type with a Known Size\n\nRust can’t figure out how much space to allocate for recursively defined types,\nso the compiler gives the error in Listing 15-4. But the error does include\nthis helpful suggestion:\n\n<!-- manual-regeneration\nafter doing automatic regeneration, look at listings/ch15-smart-pointers/listing-15-03/output.txt and copy the relevant line\n-->\n\n```text\n  = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `List` representable\n```\n\nIn this suggestion, “indirection” means that instead of storing a value\ndirectly, we’ll change the data structure to store the value indirectly by\nstoring a pointer to the value instead.\n\nBecause a `Box<T>` is a pointer, Rust always knows how much space a `Box<T>`\nneeds: a pointer’s size doesn’t change based on the amount of data it’s\npointing to. This means we can put a `Box<T>` inside the `Cons` variant instead\nof another `List` value directly. The `Box<T>` will point to the next `List`\nvalue that will be on the heap rather than inside the `Cons` variant.\nConceptually, we still have a list, created with lists “holding” other lists,\nbut this implementation is now more like placing the items next to one another\nrather than inside one another.\n\nWe can change the definition of the `List` enum in Listing 15-2 and the usage\nof the `List` in Listing 15-3 to the code in Listing 15-5, which will compile:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nenum List {\n    Cons(i32, Box<List>),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\n\nfn main() {\n    let list = Cons(1, Box::new(Cons(2, Box::new(Cons(3, Box::new(Nil))))));\n}\n```\n\n<span class=\"caption\">Listing 15-5: Definition of `List` that uses `Box<T>` in\norder to have a known size</span>\n\nThe `Cons` variant will need the size of an `i32` plus the space to store the\nbox’s pointer data. The `Nil` variant stores no values, so it needs less space\nthan the `Cons` variant. We now know that any `List` value will take up the\nsize of an `i32` plus the size of a box’s pointer data. By using a box, we’ve\nbroken the infinite, recursive chain, so the compiler can figure out the size\nit needs to store a `List` value. Figure 15-2 shows what the `Cons` variant\nlooks like now.\n\n<img alt=\"A finite Cons list\" src=\"img/trpl15-02.svg\" class=\"center\" />\n\n<span class=\"caption\">Figure 15-2: A `List` that is not infinitely sized\nbecause `Cons` holds a `Box`</span>\n\nBoxes provide only the indirection and heap allocation; they don’t have any\nother special capabilities, like those we’ll see with the other smart pointer\ntypes. They also don’t have any performance overhead that these special\ncapabilities incur, so they can be useful in cases like the cons list where the\nindirection is the only feature we need. We’ll look at more use cases for boxes\nin Chapter 17, too.\n\nThe `Box<T>` type is a smart pointer because it implements the `Deref` trait,\nwhich allows `Box<T>` values to be treated like references. When a `Box<T>`\nvalue goes out of scope, the heap data that the box is pointing to is cleaned\nup as well because of the `Drop` trait implementation. Let’s explore these two\ntraits in more detail. These two traits will be even more important to the\nfunctionality provided by the other smart pointer types we’ll discuss in the\nrest of this chapter.\n\n[trait-objects]: ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n", number: Some(SectionNumber([15, 1])), sub_items: [], path: "ch15-01-box.md", parent_names: ["Smart Pointers"] }), Chapter(Chapter { name: "Treating Smart Pointers Like Regular References with the Deref Trait", content: "## Treating Smart Pointers Like Regular References with the `Deref` Trait\n\nImplementing the `Deref` trait allows you to customize the behavior of the\n*dereference operator*, `*` (as opposed to the multiplication or glob\noperator). By implementing `Deref` in such a way that a smart pointer can be\ntreated like a regular reference, you can write code that operates on\nreferences and use that code with smart pointers too.\n\nLet’s first look at how the dereference operator works with regular references.\nThen we’ll try to define a custom type that behaves like `Box<T>`, and see why\nthe dereference operator doesn’t work like a reference on our newly defined\ntype. We’ll explore how implementing the `Deref` trait makes it possible for\nsmart pointers to work in ways similar to references. Then we’ll look at\nRust’s *deref coercion* feature and how it lets us work with either references\nor smart pointers.\n\n> Note: there’s one big difference between the `MyBox<T>` type we’re about to\n> build and the real `Box<T>`: our version will not store its data on the heap.\n> We are focusing this example on `Deref`, so where the data is actually stored\n> is less important than the pointer-like behavior.\n\n### Following the Pointer to the Value with the Dereference Operator\n\nA regular reference is a type of pointer, and one way to think of a pointer is\nas an arrow to a value stored somewhere else. In Listing 15-6, we create a\nreference to an `i32` value and then use the dereference operator to follow the\nreference to the data:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x = 5;\n    let y = &x;\n\n    assert_eq!(5, x);\n    assert_eq!(5, *y);\n}\n```\n\n<span class=\"caption\">Listing 15-6: Using the dereference operator to follow a\nreference to an `i32` value</span>\n\nThe variable `x` holds an `i32` value, `5`. We set `y` equal to a reference to\n`x`. We can assert that `x` is equal to `5`. However, if we want to make an\nassertion about the value in `y`, we have to use `*y` to follow the reference\nto the value it’s pointing to (hence *dereference*). Once we dereference `y`,\nwe have access to the integer value `y` is pointing to that we can compare with\n`5`.\n\nIf we tried to write `assert_eq!(5, y);` instead, we would get this compilation\nerror:\n\n```text\n$ cargo run\n   Compiling deref-example v0.1.0 (file:///projects/deref-example)\nerror[E0277]: can\'t compare `{integer}` with `&{integer}`\n --> src/main.rs:6:5\n  |\n6 |     assert_eq!(5, y);\n  |     ^^^^^^^^^^^^^^^^^ no implementation for `{integer} == &{integer}`\n  |\n  = help: the trait `std::cmp::PartialEq<&{integer}>` is not implemented for `{integer}`\n  = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `deref-example`.\n\nTo learn more, run the command again with --verbose.\n```\n\nComparing a number and a reference to a number isn’t allowed because they’re\ndifferent types. We must use the dereference operator to follow the reference\nto the value it’s pointing to.\n\n### Using `Box<T>` Like a Reference\n\nWe can rewrite the code in Listing 15-6 to use a `Box<T>` instead of a\nreference; the dereference operator will work as shown in Listing 15-7:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x = 5;\n    let y = Box::new(x);\n\n    assert_eq!(5, x);\n    assert_eq!(5, *y);\n}\n```\n\n<span class=\"caption\">Listing 15-7: Using the dereference operator on a\n`Box<i32>`</span>\n\nThe only difference between Listing 15-7 and Listing 15-6 is that here we set\n`y` to be an instance of a box pointing to the value in `x` rather than a\nreference pointing to the value of `x`. In the last assertion, we can use the\ndereference operator to follow the box’s pointer in the same way that we did\nwhen `y` was a reference. Next, we’ll explore what is special about `Box<T>`\nthat enables us to use the dereference operator by defining our own box type.\n\n### Defining Our Own Smart Pointer\n\nLet’s build a smart pointer similar to the `Box<T>` type provided by the\nstandard library to experience how smart pointers behave differently from\nreferences by default. Then we’ll look at how to add the ability to use the\ndereference operator.\n\nThe `Box<T>` type is ultimately defined as a tuple struct with one element, so\nListing 15-8 defines a `MyBox<T>` type in the same way. We’ll also define a\n`new` function to match the `new` function defined on `Box<T>`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nstruct MyBox<T>(T);\n\nimpl<T> MyBox<T> {\n    fn new(x: T) -> MyBox<T> {\n        MyBox(x)\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 15-8: Defining a `MyBox<T>` type</span>\n\nWe define a struct named `MyBox` and declare a generic parameter `T`, because\nwe want our type to hold values of any type. The `MyBox` type is a tuple struct\nwith one element of type `T`. The `MyBox::new` function takes one parameter of\ntype `T` and returns a `MyBox` instance that holds the value passed in.\n\nLet’s try adding the `main` function in Listing 15-7 to Listing 15-8 and\nchanging it to use the `MyBox<T>` type we’ve defined instead of `Box<T>`. The\ncode in Listing 15-9 won’t compile because Rust doesn’t know how to dereference\n`MyBox`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n# struct MyBox<T>(T);\n# \n# impl<T> MyBox<T> {\n#     fn new(x: T) -> MyBox<T> {\n#         MyBox(x)\n#     }\n# }\n# \nfn main() {\n    let x = 5;\n    let y = MyBox::new(x);\n\n    assert_eq!(5, x);\n    assert_eq!(5, *y);\n}\n```\n\n<span class=\"caption\">Listing 15-9: Attempting to use `MyBox<T>` in the same\nway we used references and `Box<T>`</span>\n\nHere’s the resulting compilation error:\n\n```text\n$ cargo run\n   Compiling deref-example v0.1.0 (file:///projects/deref-example)\nerror[E0614]: type `MyBox<{integer}>` cannot be dereferenced\n  --> src/main.rs:14:19\n   |\n14 |     assert_eq!(5, *y);\n   |                   ^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\nerror: could not compile `deref-example`.\n\nTo learn more, run the command again with --verbose.\n```\n\nOur `MyBox<T>` type can’t be dereferenced because we haven’t implemented that\nability on our type. To enable dereferencing with the `*` operator, we\nimplement the `Deref` trait.\n\n### Treating a Type Like a Reference by Implementing the `Deref` Trait\n\nAs discussed in Chapter 10, to implement a trait, we need to provide\nimplementations for the trait’s required methods. The `Deref` trait, provided\nby the standard library, requires us to implement one method named `deref` that\nborrows `self` and returns a reference to the inner data. Listing 15-10\ncontains an implementation of `Deref` to add to the definition of `MyBox`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::ops::Deref;\n\nimpl<T> Deref for MyBox<T> {\n    type Target = T;\n\n    fn deref(&self) -> &T {\n        &self.0\n    }\n}\n# \n# struct MyBox<T>(T);\n# \n# impl<T> MyBox<T> {\n#     fn new(x: T) -> MyBox<T> {\n#         MyBox(x)\n#     }\n# }\n# \n# fn main() {\n#     let x = 5;\n#     let y = MyBox::new(x);\n# \n#     assert_eq!(5, x);\n#     assert_eq!(5, *y);\n# }\n```\n\n<span class=\"caption\">Listing 15-10: Implementing `Deref` on `MyBox<T>`</span>\n\nThe `type Target = T;` syntax defines an associated type for the `Deref` trait\nto use. Associated types are a slightly different way of declaring a generic\nparameter, but you don’t need to worry about them for now; we’ll cover them in\nmore detail in Chapter 19.\n\nWe fill in the body of the `deref` method with `&self.0` so `deref` returns a\nreference to the value we want to access with the `*` operator. The `main`\nfunction in Listing 15-9 that calls `*` on the `MyBox<T>` value now compiles,\nand the assertions pass!\n\nWithout the `Deref` trait, the compiler can only dereference `&` references.\nThe `deref` method gives the compiler the ability to take a value of any type\nthat implements `Deref` and call the `deref` method to get a `&` reference that\nit knows how to dereference.\n\nWhen we entered `*y` in Listing 15-9, behind the scenes Rust actually ran this\ncode:\n\n```rust,ignore\n*(y.deref())\n```\n\nRust substitutes the `*` operator with a call to the `deref` method and then a\nplain dereference so we don’t have to think about whether or not we need to\ncall the `deref` method. This Rust feature lets us write code that functions\nidentically whether we have a regular reference or a type that implements\n`Deref`.\n\nThe reason the `deref` method returns a reference to a value, and that the plain\ndereference outside the parentheses in `*(y.deref())` is still necessary, is the\nownership system. If the `deref` method returned the value directly instead of\na reference to the value, the value would be moved out of `self`. We don’t want\nto take ownership of the inner value inside `MyBox<T>` in this case or in most\ncases where we use the dereference operator.\n\nNote that the `*` operator is replaced with a call to the `deref` method and\nthen a call to the `*` operator just once, each time we use a `*` in our code.\nBecause the substitution of the `*` operator does not recurse infinitely, we\nend up with data of type `i32`, which matches the `5` in `assert_eq!` in\nListing 15-9.\n\n### Implicit Deref Coercions with Functions and Methods\n\n*Deref coercion* is a convenience that Rust performs on arguments to functions\nand methods. Deref coercion works only on types that implement the `Deref`\ntrait. Deref coercion converts such a type into a reference to another type.\nFor example, deref coercion can convert `&String` to `&str` because `String`\nimplements the `Deref` trait such that it returns `str`. Deref coercion happens\nautomatically when we pass a reference to a particular type’s value as an\nargument to a function or method that doesn’t match the parameter type in the\nfunction or method definition. A sequence of calls to the `deref` method\nconverts the type we provided into the type the parameter needs.\n\nDeref coercion was added to Rust so that programmers writing function and\nmethod calls don’t need to add as many explicit references and dereferences\nwith `&` and `*`. The deref coercion feature also lets us write more code that\ncan work for either references or smart pointers.\n\nTo see deref coercion in action, let’s use the `MyBox<T>` type we defined in\nListing 15-8 as well as the implementation of `Deref` that we added in Listing\n15-10. Listing 15-11 shows the definition of a function that has a string slice\nparameter:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn hello(name: &str) {\n    println!(\"Hello, {}!\", name);\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 15-11: A `hello` function that has the parameter\n`name` of type `&str`</span>\n\nWe can call the `hello` function with a string slice as an argument, such as\n`hello(\"Rust\");` for example. Deref coercion makes it possible to call `hello`\nwith a reference to a value of type `MyBox<String>`, as shown in Listing 15-12:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# use std::ops::Deref;\n# \n# impl<T> Deref for MyBox<T> {\n#     type Target = T;\n# \n#     fn deref(&self) -> &T {\n#         &self.0\n#     }\n# }\n# \n# struct MyBox<T>(T);\n# \n# impl<T> MyBox<T> {\n#     fn new(x: T) -> MyBox<T> {\n#         MyBox(x)\n#     }\n# }\n# \n# fn hello(name: &str) {\n#     println!(\"Hello, {}!\", name);\n# }\n# \nfn main() {\n    let m = MyBox::new(String::from(\"Rust\"));\n    hello(&m);\n}\n```\n\n<span class=\"caption\">Listing 15-12: Calling `hello` with a reference to a\n`MyBox<String>` value, which works because of deref coercion</span>\n\nHere we’re calling the `hello` function with the argument `&m`, which is a\nreference to a `MyBox<String>` value. Because we implemented the `Deref` trait\non `MyBox<T>` in Listing 15-10, Rust can turn `&MyBox<String>` into `&String`\nby calling `deref`. The standard library provides an implementation of `Deref`\non `String` that returns a string slice, and this is in the API documentation\nfor `Deref`. Rust calls `deref` again to turn the `&String` into `&str`, which\nmatches the `hello` function’s definition.\n\nIf Rust didn’t implement deref coercion, we would have to write the code in\nListing 15-13 instead of the code in Listing 15-12 to call `hello` with a value\nof type `&MyBox<String>`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# use std::ops::Deref;\n# \n# impl<T> Deref for MyBox<T> {\n#     type Target = T;\n# \n#     fn deref(&self) -> &T {\n#         &self.0\n#     }\n# }\n# \n# struct MyBox<T>(T);\n# \n# impl<T> MyBox<T> {\n#     fn new(x: T) -> MyBox<T> {\n#         MyBox(x)\n#     }\n# }\n# \n# fn hello(name: &str) {\n#     println!(\"Hello, {}!\", name);\n# }\n# \nfn main() {\n    let m = MyBox::new(String::from(\"Rust\"));\n    hello(&(*m)[..]);\n}\n```\n\n<span class=\"caption\">Listing 15-13: The code we would have to write if Rust\ndidn’t have deref coercion</span>\n\nThe `(*m)` dereferences the `MyBox<String>` into a `String`. Then the `&` and\n`[..]` take a string slice of the `String` that is equal to the whole string to\nmatch the signature of `hello`. The code without deref coercions is harder to\nread, write, and understand with all of these symbols involved. Deref coercion\nallows Rust to handle these conversions for us automatically.\n\nWhen the `Deref` trait is defined for the types involved, Rust will analyze the\ntypes and use `Deref::deref` as many times as necessary to get a reference to\nmatch the parameter’s type. The number of times that `Deref::deref` needs to be\ninserted is resolved at compile time, so there is no runtime penalty for taking\nadvantage of deref coercion!\n\n### How Deref Coercion Interacts with Mutability\n\nSimilar to how you use the `Deref` trait to override the `*` operator on\nimmutable references, you can use the `DerefMut` trait to override the `*`\noperator on mutable references.\n\nRust does deref coercion when it finds types and trait implementations in three\ncases:\n\n* From `&T` to `&U` when `T: Deref<Target=U>`\n* From `&mut T` to `&mut U` when `T: DerefMut<Target=U>`\n* From `&mut T` to `&U` when `T: Deref<Target=U>`\n\nThe first two cases are the same except for mutability. The first case states\nthat if you have a `&T`, and `T` implements `Deref` to some type `U`, you can\nget a `&U` transparently. The second case states that the same deref coercion\nhappens for mutable references.\n\nThe third case is trickier: Rust will also coerce a mutable reference to an\nimmutable one. But the reverse is *not* possible: immutable references will\nnever coerce to mutable references. Because of the borrowing rules, if you have\na mutable reference, that mutable reference must be the only reference to that\ndata (otherwise, the program wouldn’t compile). Converting one mutable\nreference to one immutable reference will never break the borrowing rules.\nConverting an immutable reference to a mutable reference would require that the\ninitial immutable reference is the only immutable reference to that data, but\nthe borrowing rules don’t guarantee that. Therefore, Rust can’t make the\nassumption that converting an immutable reference to a mutable reference is\npossible.\n", number: Some(SectionNumber([15, 2])), sub_items: [], path: "ch15-02-deref.md", parent_names: ["Smart Pointers"] }), Chapter(Chapter { name: "Running Code on Cleanup with the Drop Trait", content: "## Running Code on Cleanup with the `Drop` Trait\n\nThe second trait important to the smart pointer pattern is `Drop`, which lets\nyou customize what happens when a value is about to go out of scope. You can\nprovide an implementation for the `Drop` trait on any type, and the code you\nspecify can be used to release resources like files or network connections.\nWe’re introducing `Drop` in the context of smart pointers because the\nfunctionality of the `Drop` trait is almost always used when implementing a\nsmart pointer. For example, `Box<T>` customizes `Drop` to deallocate the space\non the heap that the box points to.\n\nIn some languages, the programmer must call code to free memory or resources\nevery time they finish using an instance of a smart pointer. If they forget,\nthe system might become overloaded and crash. In Rust, you can specify that a\nparticular bit of code be run whenever a value goes out of scope, and the\ncompiler will insert this code automatically. As a result, you don’t need to be\ncareful about placing cleanup code everywhere in a program that an instance of\na particular type is finished with—you still won’t leak resources!\n\nSpecify the code to run when a value goes out of scope by implementing the\n`Drop` trait. The `Drop` trait requires you to implement one method named\n`drop` that takes a mutable reference to `self`. To see when Rust calls `drop`,\nlet’s implement `drop` with `println!` statements for now.\n\nListing 15-14 shows a `CustomSmartPointer` struct whose only custom\nfunctionality is that it will print `Dropping CustomSmartPointer!` when the\ninstance goes out of scope. This example demonstrates when Rust runs the `drop`\nfunction.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nstruct CustomSmartPointer {\n    data: String,\n}\n\nimpl Drop for CustomSmartPointer {\n    fn drop(&mut self) {\n        println!(\"Dropping CustomSmartPointer with data `{}`!\", self.data);\n    }\n}\n\nfn main() {\n    let c = CustomSmartPointer {\n        data: String::from(\"my stuff\"),\n    };\n    let d = CustomSmartPointer {\n        data: String::from(\"other stuff\"),\n    };\n    println!(\"CustomSmartPointers created.\");\n}\n```\n\n<span class=\"caption\">Listing 15-14: A `CustomSmartPointer` struct that\nimplements the `Drop` trait where we would put our cleanup code</span>\n\nThe `Drop` trait is included in the prelude, so we don’t need to bring it into\nscope. We implement the `Drop` trait on `CustomSmartPointer` and provide an\nimplementation for the `drop` method that calls `println!`. The body of the\n`drop` function is where you would place any logic that you wanted to run when\nan instance of your type goes out of scope. We’re printing some text here to\ndemonstrate when Rust will call `drop`.\n\nIn `main`, we create two instances of `CustomSmartPointer` and then print\n`CustomSmartPointers created`. At the end of `main`, our instances of\n`CustomSmartPointer` will go out of scope, and Rust will call the code we put\nin the `drop` method, printing our final message. Note that we didn’t need to\ncall the `drop` method explicitly.\n\nWhen we run this program, we’ll see the following output:\n\n```text\n$ cargo run\n   Compiling drop-example v0.1.0 (file:///projects/drop-example)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.60s\n     Running `target/debug/drop-example`\nCustomSmartPointers created.\nDropping CustomSmartPointer with data `other stuff`!\nDropping CustomSmartPointer with data `my stuff`!\n```\n\nRust automatically called `drop` for us when our instances went out of scope,\ncalling the code we specified. Variables are dropped in the reverse order of\ntheir creation, so `d` was dropped before `c`. This example gives you a visual\nguide to how the `drop` method works; usually you would specify the cleanup\ncode that your type needs to run rather than a print message.\n\n### Dropping a Value Early with `std::mem::drop`\n\nUnfortunately, it’s not straightforward to disable the automatic `drop`\nfunctionality. Disabling `drop` isn’t usually necessary; the whole point of the\n`Drop` trait is that it’s taken care of automatically. Occasionally, however,\nyou might want to clean up a value early. One example is when using smart\npointers that manage locks: you might want to force the `drop` method that\nreleases the lock so that other code in the same scope can acquire the lock.\nRust doesn’t let you call the `Drop` trait’s `drop` method manually; instead\nyou have to call the `std::mem::drop` function provided by the standard library\nif you want to force a value to be dropped before the end of its scope.\n\nIf we try to call the `Drop` trait’s `drop` method manually by modifying the\n`main` function from Listing 15-14, as shown in Listing 15-15, we’ll get a\ncompiler error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n# struct CustomSmartPointer {\n#     data: String,\n# }\n# \n# impl Drop for CustomSmartPointer {\n#     fn drop(&mut self) {\n#         println!(\"Dropping CustomSmartPointer with data `{}`!\", self.data);\n#     }\n# }\n# \nfn main() {\n    let c = CustomSmartPointer {\n        data: String::from(\"some data\"),\n    };\n    println!(\"CustomSmartPointer created.\");\n    c.drop();\n    println!(\"CustomSmartPointer dropped before the end of main.\");\n}\n```\n\n<span class=\"caption\">Listing 15-15: Attempting to call the `drop` method from\nthe `Drop` trait manually to clean up early</span>\n\nWhen we try to compile this code, we’ll get this error:\n\n```text\n$ cargo run\n   Compiling drop-example v0.1.0 (file:///projects/drop-example)\nerror[E0040]: explicit use of destructor method\n  --> src/main.rs:16:7\n   |\n16 |     c.drop();\n   |       ^^^^ explicit destructor calls not allowed\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0040`.\nerror: could not compile `drop-example`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThis error message states that we’re not allowed to explicitly call `drop`. The\nerror message uses the term *destructor*, which is the general programming term\nfor a function that cleans up an instance. A *destructor* is analogous to a\n*constructor*, which creates an instance. The `drop` function in Rust is one\nparticular destructor.\n\nRust doesn’t let us call `drop` explicitly because Rust would still\nautomatically call `drop` on the value at the end of `main`. This would be a\n*double free* error because Rust would be trying to clean up the same value\ntwice.\n\nWe can’t disable the automatic insertion of `drop` when a value goes out of\nscope, and we can’t call the `drop` method explicitly. So, if we need to force\na value to be cleaned up early, we can use the `std::mem::drop` function.\n\nThe `std::mem::drop` function is different from the `drop` method in the `Drop`\ntrait. We call it by passing the value we want to force to be dropped early as\nan argument. The function is in the prelude, so we can modify `main` in Listing\n15-15 to call the `drop` function, as shown in Listing 15-16:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# struct CustomSmartPointer {\n#     data: String,\n# }\n# \n# impl Drop for CustomSmartPointer {\n#     fn drop(&mut self) {\n#         println!(\"Dropping CustomSmartPointer with data `{}`!\", self.data);\n#     }\n# }\n# \nfn main() {\n    let c = CustomSmartPointer {\n        data: String::from(\"some data\"),\n    };\n    println!(\"CustomSmartPointer created.\");\n    drop(c);\n    println!(\"CustomSmartPointer dropped before the end of main.\");\n}\n```\n\n<span class=\"caption\">Listing 15-16: Calling `std::mem::drop` to explicitly\ndrop a value before it goes out of scope</span>\n\nRunning this code will print the following:\n\n```text\n$ cargo run\n   Compiling drop-example v0.1.0 (file:///projects/drop-example)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.73s\n     Running `target/debug/drop-example`\nCustomSmartPointer created.\nDropping CustomSmartPointer with data `some data`!\nCustomSmartPointer dropped before the end of main.\n```\n\nThe text ```Dropping CustomSmartPointer with data `some data`!``` is printed\nbetween the `CustomSmartPointer created.` and `CustomSmartPointer dropped\nbefore the end of main.` text, showing that the `drop` method code is called to\ndrop `c` at that point.\n\nYou can use code specified in a `Drop` trait implementation in many ways to\nmake cleanup convenient and safe: for instance, you could use it to create your\nown memory allocator! With the `Drop` trait and Rust’s ownership system, you\ndon’t have to remember to clean up because Rust does it automatically.\n\nYou also don’t have to worry about problems resulting from accidentally\ncleaning up values still in use: the ownership system that makes sure\nreferences are always valid also ensures that `drop` gets called only once when\nthe value is no longer being used.\n\nNow that we’ve examined `Box<T>` and some of the characteristics of smart\npointers, let’s look at a few other smart pointers defined in the standard\nlibrary.\n", number: Some(SectionNumber([15, 3])), sub_items: [], path: "ch15-03-drop.md", parent_names: ["Smart Pointers"] }), Chapter(Chapter { name: "Rc<T>, the Reference Counted Smart Pointer", content: "## `Rc<T>`, the Reference Counted Smart Pointer\n\nIn the majority of cases, ownership is clear: you know exactly which variable\nowns a given value. However, there are cases when a single value might have\nmultiple owners. For example, in graph data structures, multiple edges might\npoint to the same node, and that node is conceptually owned by all of the edges\nthat point to it. A node shouldn’t be cleaned up unless it doesn’t have any\nedges pointing to it.\n\nTo enable multiple ownership, Rust has a type called `Rc<T>`, which is an\nabbreviation for *reference counting*. The `Rc<T>` type keeps track of the\nnumber of references to a value which determines whether or not a value is\nstill in use. If there are zero references to a value, the value can be cleaned\nup without any references becoming invalid.\n\nImagine `Rc<T>` as a TV in a family room. When one person enters to watch TV,\nthey turn it on. Others can come into the room and watch the TV. When the last\nperson leaves the room, they turn off the TV because it’s no longer being used.\nIf someone turns off the TV while others are still watching it, there would be\nuproar from the remaining TV watchers!\n\nWe use the `Rc<T>` type when we want to allocate some data on the heap for\nmultiple parts of our program to read and we can’t determine at compile time\nwhich part will finish using the data last. If we knew which part would finish\nlast, we could just make that part the data’s owner, and the normal ownership\nrules enforced at compile time would take effect.\n\nNote that `Rc<T>` is only for use in single-threaded scenarios. When we discuss\nconcurrency in Chapter 16, we’ll cover how to do reference counting in\nmultithreaded programs.\n\n### Using `Rc<T>` to Share Data\n\nLet’s return to our cons list example in Listing 15-5. Recall that we defined\nit using `Box<T>`. This time, we’ll create two lists that both share ownership\nof a third list. Conceptually, this looks similar to Figure 15-3:\n\n<img alt=\"Two lists that share ownership of a third list\" src=\"img/trpl15-03.svg\" class=\"center\" />\n\n<span class=\"caption\">Figure 15-3: Two lists, `b` and `c`, sharing ownership of\na third list, `a`</span>\n\nWe’ll create list `a` that contains 5 and then 10. Then we’ll make two more\nlists: `b` that starts with 3 and `c` that starts with 4. Both `b` and `c`\nlists will then continue on to the first `a` list containing 5 and 10. In other\nwords, both lists will share the first list containing 5 and 10.\n\nTrying to implement this scenario using our definition of `List` with `Box<T>`\nwon’t work, as shown in Listing 15-17:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nenum List {\n    Cons(i32, Box<List>),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\n\nfn main() {\n    let a = Cons(5, Box::new(Cons(10, Box::new(Nil))));\n    let b = Cons(3, Box::new(a));\n    let c = Cons(4, Box::new(a));\n}\n```\n\n<span class=\"caption\">Listing 15-17: Demonstrating we’re not allowed to have\ntwo lists using `Box<T>` that try to share ownership of a third list</span>\n\nWhen we compile this code, we get this error:\n\n```text\n$ cargo run\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\nerror[E0382]: use of moved value: `a`\n  --> src/main.rs:11:30\n   |\n9  |     let a = Cons(5, Box::new(Cons(10, Box::new(Nil))));\n   |         - move occurs because `a` has type `List`, which does not implement the `Copy` trait\n10 |     let b = Cons(3, Box::new(a));\n   |                              - value moved here\n11 |     let c = Cons(4, Box::new(a));\n   |                              ^ value used here after move\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `cons-list`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe `Cons` variants own the data they hold, so when we create the `b` list, `a`\nis moved into `b` and `b` owns `a`. Then, when we try to use `a` again when\ncreating `c`, we’re not allowed to because `a` has been moved.\n\nWe could change the definition of `Cons` to hold references instead, but then\nwe would have to specify lifetime parameters. By specifying lifetime\nparameters, we would be specifying that every element in the list will live at\nleast as long as the entire list. The borrow checker wouldn’t let us compile\n`let a = Cons(10, &Nil);` for example, because the temporary `Nil` value would\nbe dropped before `a` could take a reference to it.\n\nInstead, we’ll change our definition of `List` to use `Rc<T>` in place of\n`Box<T>`, as shown in Listing 15-18. Each `Cons` variant will now hold a value\nand an `Rc<T>` pointing to a `List`. When we create `b`, instead of taking\nownership of `a`, we’ll clone the `Rc<List>` that `a` is holding, thereby\nincreasing the number of references from one to two and letting `a` and `b`\nshare ownership of the data in that `Rc<List>`. We’ll also clone `a` when\ncreating `c`, increasing the number of references from two to three. Every time\nwe call `Rc::clone`, the reference count to the data within the `Rc<List>` will\nincrease, and the data won’t be cleaned up unless there are zero references to\nit.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nenum List {\n    Cons(i32, Rc<List>),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\nuse std::rc::Rc;\n\nfn main() {\n    let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));\n    let b = Cons(3, Rc::clone(&a));\n    let c = Cons(4, Rc::clone(&a));\n}\n```\n\n<span class=\"caption\">Listing 15-18: A definition of `List` that uses\n`Rc<T>`</span>\n\nWe need to add a `use` statement to bring `Rc<T>` into scope because it’s not\nin the prelude. In `main`, we create the list holding 5 and 10 and store it in\na new `Rc<List>` in `a`. Then when we create `b` and `c`, we call the\n`Rc::clone` function and pass a reference to the `Rc<List>` in `a` as an\nargument.\n\nWe could have called `a.clone()` rather than `Rc::clone(&a)`, but Rust’s\nconvention is to use `Rc::clone` in this case. The implementation of\n`Rc::clone` doesn’t make a deep copy of all the data like most types’\nimplementations of `clone` do. The call to `Rc::clone` only increments the\nreference count, which doesn’t take much time. Deep copies of data can take a\nlot of time. By using `Rc::clone` for reference counting, we can visually\ndistinguish between the deep-copy kinds of clones and the kinds of clones that\nincrease the reference count. When looking for performance problems in the\ncode, we only need to consider the deep-copy clones and can disregard calls to\n`Rc::clone`.\n\n### Cloning an `Rc<T>` Increases the Reference Count\n\nLet’s change our working example in Listing 15-18 so we can see the reference\ncounts changing as we create and drop references to the `Rc<List>` in `a`.\n\nIn Listing 15-19, we’ll change `main` so it has an inner scope around list `c`;\nthen we can see how the reference count changes when `c` goes out of scope.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# enum List {\n#     Cons(i32, Rc<List>),\n#     Nil,\n# }\n# \n# use crate::List::{Cons, Nil};\n# use std::rc::Rc;\n# \nfn main() {\n    let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));\n    println!(\"count after creating a = {}\", Rc::strong_count(&a));\n    let b = Cons(3, Rc::clone(&a));\n    println!(\"count after creating b = {}\", Rc::strong_count(&a));\n    {\n        let c = Cons(4, Rc::clone(&a));\n        println!(\"count after creating c = {}\", Rc::strong_count(&a));\n    }\n    println!(\"count after c goes out of scope = {}\", Rc::strong_count(&a));\n}\n```\n\n<span class=\"caption\">Listing 15-19: Printing the reference count</span>\n\nAt each point in the program where the reference count changes, we print the\nreference count, which we can get by calling the `Rc::strong_count` function.\nThis function is named `strong_count` rather than `count` because the `Rc<T>`\ntype also has a `weak_count`; we’ll see what `weak_count` is used for in the\n[“Preventing Reference Cycles: Turning an `Rc<T>` into a\n`Weak<T>`”][preventing-ref-cycles]<!-- ignore --> section.\n\nThis code prints the following:\n\n```text\n$ cargo run\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.45s\n     Running `target/debug/cons-list`\ncount after creating a = 1\ncount after creating b = 2\ncount after creating c = 3\ncount after c goes out of scope = 2\n```\n\nWe can see that the `Rc<List>` in `a` has an initial reference count of 1; then\neach time we call `clone`, the count goes up by 1. When `c` goes out of scope,\nthe count goes down by 1. We don’t have to call a function to decrease the\nreference count like we have to call `Rc::clone` to increase the reference\ncount: the implementation of the `Drop` trait decreases the reference count\nautomatically when an `Rc<T>` value goes out of scope.\n\nWhat we can’t see in this example is that when `b` and then `a` go out of scope\nat the end of `main`, the count is then 0, and the `Rc<List>` is cleaned up\ncompletely at that point. Using `Rc<T>` allows a single value to have\nmultiple owners, and the count ensures that the value remains valid as long as\nany of the owners still exist.\n\nVia immutable references, `Rc<T>` allows you to share data between multiple\nparts of your program for reading only. If `Rc<T>` allowed you to have multiple\nmutable references too, you might violate one of the borrowing rules discussed\nin Chapter 4: multiple mutable borrows to the same place can cause data races\nand inconsistencies. But being able to mutate data is very useful! In the next\nsection, we’ll discuss the interior mutability pattern and the `RefCell<T>`\ntype that you can use in conjunction with an `Rc<T>` to work with this\nimmutability restriction.\n\n[preventing-ref-cycles]: ch15-06-reference-cycles.html#preventing-reference-cycles-turning-an-rct-into-a-weakt\n", number: Some(SectionNumber([15, 4])), sub_items: [], path: "ch15-04-rc.md", parent_names: ["Smart Pointers"] }), Chapter(Chapter { name: "RefCell<T> and the Interior Mutability Pattern", content: "## `RefCell<T>` and the Interior Mutability Pattern\n\n*Interior mutability* is a design pattern in Rust that allows you to mutate\ndata even when there are immutable references to that data; normally, this\naction is disallowed by the borrowing rules. To mutate data, the pattern uses\n`unsafe` code inside a data structure to bend Rust’s usual rules that govern\nmutation and borrowing. We haven’t yet covered unsafe code; we will in Chapter\n19. We can use types that use the interior mutability pattern when we can\nensure that the borrowing rules will be followed at runtime, even though the\ncompiler can’t guarantee that. The `unsafe` code involved is then wrapped in a\nsafe API, and the outer type is still immutable.\n\nLet’s explore this concept by looking at the `RefCell<T>` type that follows the\ninterior mutability pattern.\n\n### Enforcing Borrowing Rules at Runtime with `RefCell<T>`\n\nUnlike `Rc<T>`, the `RefCell<T>` type represents single ownership over the data\nit holds. So, what makes `RefCell<T>` different from a type like `Box<T>`?\nRecall the borrowing rules you learned in Chapter 4:\n\n* At any given time, you can have *either* (but not both of) one mutable\n  reference or any number of immutable references.\n* References must always be valid.\n\nWith references and `Box<T>`, the borrowing rules’ invariants are enforced at\ncompile time. With `RefCell<T>`, these invariants are enforced *at runtime*.\nWith references, if you break these rules, you’ll get a compiler error. With\n`RefCell<T>`, if you break these rules, your program will panic and exit.\n\nThe advantages of checking the borrowing rules at compile time are that errors\nwill be caught sooner in the development process, and there is no impact on\nruntime performance because all the analysis is completed beforehand. For those\nreasons, checking the borrowing rules at compile time is the best choice in the\nmajority of cases, which is why this is Rust’s default.\n\nThe advantage of checking the borrowing rules at runtime instead is that\ncertain memory-safe scenarios are then allowed, whereas they are disallowed by\nthe compile-time checks. Static analysis, like the Rust compiler, is inherently\nconservative. Some properties of code are impossible to detect by analyzing the\ncode: the most famous example is the Halting Problem, which is beyond the scope\nof this book but is an interesting topic to research.\n\nBecause some analysis is impossible, if the Rust compiler can’t be sure the\ncode complies with the ownership rules, it might reject a correct program; in\nthis way, it’s conservative. If Rust accepted an incorrect program, users\nwouldn’t be able to trust in the guarantees Rust makes. However, if Rust\nrejects a correct program, the programmer will be inconvenienced, but nothing\ncatastrophic can occur. The `RefCell<T>` type is useful when you’re sure your\ncode follows the borrowing rules but the compiler is unable to understand and\nguarantee that.\n\nSimilar to `Rc<T>`, `RefCell<T>` is only for use in single-threaded scenarios\nand will give you a compile-time error if you try using it in a multithreaded\ncontext. We’ll talk about how to get the functionality of `RefCell<T>` in a\nmultithreaded program in Chapter 16.\n\nHere is a recap of the reasons to choose `Box<T>`, `Rc<T>`, or `RefCell<T>`:\n\n* `Rc<T>` enables multiple owners of the same data; `Box<T>` and `RefCell<T>`\n  have single owners.\n* `Box<T>` allows immutable or mutable borrows checked at compile time; `Rc<T>`\n  allows only immutable borrows checked at compile time; `RefCell<T>` allows\n  immutable or mutable borrows checked at runtime.\n* Because `RefCell<T>` allows mutable borrows checked at runtime, you can\n  mutate the value inside the `RefCell<T>` even when the `RefCell<T>` is\n  immutable.\n\nMutating the value inside an immutable value is the *interior mutability*\npattern. Let’s look at a situation in which interior mutability is useful and\nexamine how it’s possible.\n\n### Interior Mutability: A Mutable Borrow to an Immutable Value\n\nA consequence of the borrowing rules is that when you have an immutable value,\nyou can’t borrow it mutably. For example, this code won’t compile:\n\n```rust,ignore,does_not_compile\nfn main() {\n    let x = 5;\n    let y = &mut x;\n}\n```\n\nIf you tried to compile this code, you’d get the following error:\n\n```text\n$ cargo run\n   Compiling borrowing v0.1.0 (file:///projects/borrowing)\nerror[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n --> src/main.rs:3:13\n  |\n2 |     let x = 5;\n  |         - help: consider changing this to be mutable: `mut x`\n3 |     let y = &mut x;\n  |             ^^^^^^ cannot borrow as mutable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `borrowing`.\n\nTo learn more, run the command again with --verbose.\n```\n\nHowever, there are situations in which it would be useful for a value to mutate\nitself in its methods but appear immutable to other code. Code outside the\nvalue’s methods would not be able to mutate the value. Using `RefCell<T>` is\none way to get the ability to have interior mutability. But `RefCell<T>`\ndoesn’t get around the borrowing rules completely: the borrow checker in the\ncompiler allows this interior mutability, and the borrowing rules are checked\nat runtime instead. If you violate the rules, you’ll get a `panic!` instead of\na compiler error.\n\nLet’s work through a practical example where we can use `RefCell<T>` to mutate\nan immutable value and see why that is useful.\n\n#### A Use Case for Interior Mutability: Mock Objects\n\nA *test double* is the general programming concept for a type used in place of\nanother type during testing. *Mock objects* are specific types of test doubles\nthat record what happens during a test so you can assert that the correct\nactions took place.\n\nRust doesn’t have objects in the same sense as other languages have objects,\nand Rust doesn’t have mock object functionality built into the standard library\nas some other languages do. However, you can definitely create a struct that\nwill serve the same purposes as a mock object.\n\nHere’s the scenario we’ll test: we’ll create a library that tracks a value\nagainst a maximum value and sends messages based on how close to the maximum\nvalue the current value is. This library could be used to keep track of a\nuser’s quota for the number of API calls they’re allowed to make, for example.\n\nOur library will only provide the functionality of tracking how close to the\nmaximum a value is and what the messages should be at what times. Applications\nthat use our library will be expected to provide the mechanism for sending the\nmessages: the application could put a message in the application, send an\nemail, send a text message, or something else. The library doesn’t need to know\nthat detail. All it needs is something that implements a trait we’ll provide\ncalled `Messenger`. Listing 15-20 shows the library code:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub trait Messenger {\n    fn send(&self, msg: &str);\n}\n\npub struct LimitTracker<\'a, T: Messenger> {\n    messenger: &\'a T,\n    value: usize,\n    max: usize,\n}\n\nimpl<\'a, T> LimitTracker<\'a, T>\nwhere\n    T: Messenger,\n{\n    pub fn new(messenger: &T, max: usize) -> LimitTracker<T> {\n        LimitTracker {\n            messenger,\n            value: 0,\n            max,\n        }\n    }\n\n    pub fn set_value(&mut self, value: usize) {\n        self.value = value;\n\n        let percentage_of_max = self.value as f64 / self.max as f64;\n\n        if percentage_of_max >= 1.0 {\n            self.messenger.send(\"Error: You are over your quota!\");\n        } else if percentage_of_max >= 0.9 {\n            self.messenger\n                .send(\"Urgent warning: You\'ve used up over 90% of your quota!\");\n        } else if percentage_of_max >= 0.75 {\n            self.messenger\n                .send(\"Warning: You\'ve used up over 75% of your quota!\");\n        }\n    }\n}\n```\n\n<span class=\"caption\">Listing 15-20: A library to keep track of how close a\nvalue is to a maximum value and warn when the value is at certain levels</span>\n\nOne important part of this code is that the `Messenger` trait has one method\ncalled `send` that takes an immutable reference to `self` and the text of the\nmessage. This is the interface our mock object needs to have. The other\nimportant part is that we want to test the behavior of the `set_value` method\non the `LimitTracker`. We can change what we pass in for the `value` parameter,\nbut `set_value` doesn’t return anything for us to make assertions on. We want\nto be able to say that if we create a `LimitTracker` with something that\nimplements the `Messenger` trait and a particular value for `max`, when we pass\ndifferent numbers for `value`, the messenger is told to send the appropriate\nmessages.\n\nWe need a mock object that, instead of sending an email or text message when we\ncall `send`, will only keep track of the messages it’s told to send. We can\ncreate a new instance of the mock object, create a `LimitTracker` that uses the\nmock object, call the `set_value` method on `LimitTracker`, and then check that\nthe mock object has the messages we expect. Listing 15-21 shows an attempt to\nimplement a mock object to do just that, but the borrow checker won’t allow it:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n# pub trait Messenger {\n#     fn send(&self, msg: &str);\n# }\n# \n# pub struct LimitTracker<\'a, T: Messenger> {\n#     messenger: &\'a T,\n#     value: usize,\n#     max: usize,\n# }\n# \n# impl<\'a, T> LimitTracker<\'a, T>\n# where\n#     T: Messenger,\n# {\n#     pub fn new(messenger: &T, max: usize) -> LimitTracker<T> {\n#         LimitTracker {\n#             messenger,\n#             value: 0,\n#             max,\n#         }\n#     }\n# \n#     pub fn set_value(&mut self, value: usize) {\n#         self.value = value;\n# \n#         let percentage_of_max = self.value as f64 / self.max as f64;\n# \n#         if percentage_of_max >= 1.0 {\n#             self.messenger.send(\"Error: You are over your quota!\");\n#         } else if percentage_of_max >= 0.9 {\n#             self.messenger\n#                 .send(\"Urgent warning: You\'ve used up over 90% of your quota!\");\n#         } else if percentage_of_max >= 0.75 {\n#             self.messenger\n#                 .send(\"Warning: You\'ve used up over 75% of your quota!\");\n#         }\n#     }\n# }\n# \n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    struct MockMessenger {\n        sent_messages: Vec<String>,\n    }\n\n    impl MockMessenger {\n        fn new() -> MockMessenger {\n            MockMessenger {\n                sent_messages: vec![],\n            }\n        }\n    }\n\n    impl Messenger for MockMessenger {\n        fn send(&self, message: &str) {\n            self.sent_messages.push(String::from(message));\n        }\n    }\n\n    #[test]\n    fn it_sends_an_over_75_percent_warning_message() {\n        let mock_messenger = MockMessenger::new();\n        let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);\n\n        limit_tracker.set_value(80);\n\n        assert_eq!(mock_messenger.sent_messages.len(), 1);\n    }\n}\n```\n\n<span class=\"caption\">Listing 15-21: An attempt to implement a `MockMessenger`\nthat isn’t allowed by the borrow checker</span>\n\nThis test code defines a `MockMessenger` struct that has a `sent_messages`\nfield with a `Vec` of `String` values to keep track of the messages it’s told\nto send. We also define an associated function `new` to make it convenient to\ncreate new `MockMessenger` values that start with an empty list of messages. We\nthen implement the `Messenger` trait for `MockMessenger` so we can give a\n`MockMessenger` to a `LimitTracker`. In the definition of the `send` method, we\ntake the message passed in as a parameter and store it in the `MockMessenger`\nlist of `sent_messages`.\n\nIn the test, we’re testing what happens when the `LimitTracker` is told to set\n`value` to something that is more than 75 percent of the `max` value. First, we\ncreate a new `MockMessenger`, which will start with an empty list of messages.\nThen we create a new `LimitTracker` and give it a reference to the new\n`MockMessenger` and a `max` value of 100. We call the `set_value` method on the\n`LimitTracker` with a value of 80, which is more than 75 percent of 100. Then\nwe assert that the list of messages that the `MockMessenger` is keeping track\nof should now have one message in it.\n\nHowever, there’s one problem with this test, as shown here:\n\n```text\n$ cargo test\n   Compiling limit-tracker v0.1.0 (file:///projects/limit-tracker)\nerror[E0596]: cannot borrow `self.sent_messages` as mutable, as it is behind a `&` reference\n  --> src/lib.rs:58:13\n   |\n57 |         fn send(&self, message: &str) {\n   |                 ----- help: consider changing this to be a mutable reference: `&mut self`\n58 |             self.sent_messages.push(String::from(message));\n   |             ^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `limit-tracker`.\n\nTo learn more, run the command again with --verbose.\n```\n\nWe can’t modify the `MockMessenger` to keep track of the messages, because the\n`send` method takes an immutable reference to `self`. We also can’t take the\nsuggestion from the error text to use `&mut self` instead, because then the\nsignature of `send` wouldn’t match the signature in the `Messenger` trait\ndefinition (feel free to try and see what error message you get).\n\nThis is a situation in which interior mutability can help! We’ll store the\n`sent_messages` within a `RefCell<T>`, and then the `send` message will be\nable to modify `sent_messages` to store the messages we’ve seen. Listing 15-22\nshows what that looks like:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub trait Messenger {\n#     fn send(&self, msg: &str);\n# }\n# \n# pub struct LimitTracker<\'a, T: Messenger> {\n#     messenger: &\'a T,\n#     value: usize,\n#     max: usize,\n# }\n# \n# impl<\'a, T> LimitTracker<\'a, T>\n# where\n#     T: Messenger,\n# {\n#     pub fn new(messenger: &T, max: usize) -> LimitTracker<T> {\n#         LimitTracker {\n#             messenger,\n#             value: 0,\n#             max,\n#         }\n#     }\n# \n#     pub fn set_value(&mut self, value: usize) {\n#         self.value = value;\n# \n#         let percentage_of_max = self.value as f64 / self.max as f64;\n# \n#         if percentage_of_max >= 1.0 {\n#             self.messenger.send(\"Error: You are over your quota!\");\n#         } else if percentage_of_max >= 0.9 {\n#             self.messenger\n#                 .send(\"Urgent warning: You\'ve used up over 90% of your quota!\");\n#         } else if percentage_of_max >= 0.75 {\n#             self.messenger\n#                 .send(\"Warning: You\'ve used up over 75% of your quota!\");\n#         }\n#     }\n# }\n# \n#[cfg(test)]\nmod tests {\n    use super::*;\n    use std::cell::RefCell;\n\n    struct MockMessenger {\n        sent_messages: RefCell<Vec<String>>,\n    }\n\n    impl MockMessenger {\n        fn new() -> MockMessenger {\n            MockMessenger {\n                sent_messages: RefCell::new(vec![]),\n            }\n        }\n    }\n\n    impl Messenger for MockMessenger {\n        fn send(&self, message: &str) {\n            self.sent_messages.borrow_mut().push(String::from(message));\n        }\n    }\n\n    #[test]\n    fn it_sends_an_over_75_percent_warning_message() {\n        // --snip--\n#         let mock_messenger = MockMessenger::new();\n#         let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);\n# \n#         limit_tracker.set_value(80);\n\n        assert_eq!(mock_messenger.sent_messages.borrow().len(), 1);\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 15-22: Using `RefCell<T>` to mutate an inner\nvalue while the outer value is considered immutable</span>\n\nThe `sent_messages` field is now of type `RefCell<Vec<String>>` instead of\n`Vec<String>`. In the `new` function, we create a new `RefCell<Vec<String>>`\ninstance around the empty vector.\n\nFor the implementation of the `send` method, the first parameter is still an\nimmutable borrow of `self`, which matches the trait definition. We call\n`borrow_mut` on the `RefCell<Vec<String>>` in `self.sent_messages` to get a\nmutable reference to the value inside the `RefCell<Vec<String>>`, which is\nthe vector. Then we can call `push` on the mutable reference to the vector to\nkeep track of the messages sent during the test.\n\nThe last change we have to make is in the assertion: to see how many items are\nin the inner vector, we call `borrow` on the `RefCell<Vec<String>>` to get an\nimmutable reference to the vector.\n\nNow that you’ve seen how to use `RefCell<T>`, let’s dig into how it works!\n\n#### Keeping Track of Borrows at Runtime with `RefCell<T>`\n\nWhen creating immutable and mutable references, we use the `&` and `&mut`\nsyntax, respectively. With `RefCell<T>`, we use the `borrow` and `borrow_mut`\nmethods, which are part of the safe API that belongs to `RefCell<T>`. The\n`borrow` method returns the smart pointer type `Ref<T>`, and `borrow_mut`\nreturns the smart pointer type `RefMut<T>`. Both types implement `Deref`, so we\ncan treat them like regular references.\n\nThe `RefCell<T>` keeps track of how many `Ref<T>` and `RefMut<T>` smart\npointers are currently active. Every time we call `borrow`, the `RefCell<T>`\nincreases its count of how many immutable borrows are active. When a `Ref<T>`\nvalue goes out of scope, the count of immutable borrows goes down by one. Just\nlike the compile-time borrowing rules, `RefCell<T>` lets us have many immutable\nborrows or one mutable borrow at any point in time.\n\nIf we try to violate these rules, rather than getting a compiler error as we\nwould with references, the implementation of `RefCell<T>` will panic at\nruntime. Listing 15-23 shows a modification of the implementation of `send` in\nListing 15-22. We’re deliberately trying to create two mutable borrows active\nfor the same scope to illustrate that `RefCell<T>` prevents us from doing this\nat runtime.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,panics\n# pub trait Messenger {\n#     fn send(&self, msg: &str);\n# }\n# \n# pub struct LimitTracker<\'a, T: Messenger> {\n#     messenger: &\'a T,\n#     value: usize,\n#     max: usize,\n# }\n# \n# impl<\'a, T> LimitTracker<\'a, T>\n# where\n#     T: Messenger,\n# {\n#     pub fn new(messenger: &T, max: usize) -> LimitTracker<T> {\n#         LimitTracker {\n#             messenger,\n#             value: 0,\n#             max,\n#         }\n#     }\n# \n#     pub fn set_value(&mut self, value: usize) {\n#         self.value = value;\n# \n#         let percentage_of_max = self.value as f64 / self.max as f64;\n# \n#         if percentage_of_max >= 1.0 {\n#             self.messenger.send(\"Error: You are over your quota!\");\n#         } else if percentage_of_max >= 0.9 {\n#             self.messenger\n#                 .send(\"Urgent warning: You\'ve used up over 90% of your quota!\");\n#         } else if percentage_of_max >= 0.75 {\n#             self.messenger\n#                 .send(\"Warning: You\'ve used up over 75% of your quota!\");\n#         }\n#     }\n# }\n# \n# #[cfg(test)]\n# mod tests {\n#     use super::*;\n#     use std::cell::RefCell;\n# \n#     struct MockMessenger {\n#         sent_messages: RefCell<Vec<String>>,\n#     }\n# \n#     impl MockMessenger {\n#         fn new() -> MockMessenger {\n#             MockMessenger {\n#                 sent_messages: RefCell::new(vec![]),\n#             }\n#         }\n#     }\n# \n    impl Messenger for MockMessenger {\n        fn send(&self, message: &str) {\n            let mut one_borrow = self.sent_messages.borrow_mut();\n            let mut two_borrow = self.sent_messages.borrow_mut();\n\n            one_borrow.push(String::from(message));\n            two_borrow.push(String::from(message));\n        }\n    }\n# \n#     #[test]\n#     fn it_sends_an_over_75_percent_warning_message() {\n#         let mock_messenger = MockMessenger::new();\n#         let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);\n# \n#         limit_tracker.set_value(80);\n# \n#         assert_eq!(mock_messenger.sent_messages.borrow().len(), 1);\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 15-23: Creating two mutable references in the\nsame scope to see that `RefCell<T>` will panic</span>\n\nWe create a variable `one_borrow` for the `RefMut<T>` smart pointer returned\nfrom `borrow_mut`. Then we create another mutable borrow in the same way in the\nvariable `two_borrow`. This makes two mutable references in the same scope,\nwhich isn’t allowed. When we run the tests for our library, the code in Listing\n15-23 will compile without any errors, but the test will fail:\n\n```text\n$ cargo test\n   Compiling limit-tracker v0.1.0 (file:///projects/limit-tracker)\n    Finished test [unoptimized + debuginfo] target(s) in 0.91s\n     Running target/debug/deps/limit_tracker-d1b2637139dca6ca\n\nrunning 1 test\ntest tests::it_sends_an_over_75_percent_warning_message ... FAILED\n\nfailures:\n\n---- tests::it_sends_an_over_75_percent_warning_message stdout ----\nthread \'main\' panicked at \'already borrowed: BorrowMutError\', src/libcore/result.rs:1188:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\n\nfailures:\n    tests::it_sends_an_over_75_percent_warning_message\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass \'--lib\'\n```\n\nNotice that the code panicked with the message `already borrowed:\nBorrowMutError`. This is how `RefCell<T>` handles violations of the borrowing\nrules at runtime.\n\nCatching borrowing errors at runtime rather than compile time means that you\nwould find a mistake in your code later in the development process and possibly\nnot until your code was deployed to production. Also, your code would incur a\nsmall runtime performance penalty as a result of keeping track of the borrows\nat runtime rather than compile time. However, using `RefCell<T>` makes it\npossible to write a mock object that can modify itself to keep track of the\nmessages it has seen while you’re using it in a context where only immutable\nvalues are allowed. You can use `RefCell<T>` despite its trade-offs to get more\nfunctionality than regular references provide.\n\n### Having Multiple Owners of Mutable Data by Combining `Rc<T>` and `RefCell<T>`\n\nA common way to use `RefCell<T>` is in combination with `Rc<T>`. Recall that\n`Rc<T>` lets you have multiple owners of some data, but it only gives immutable\naccess to that data. If you have an `Rc<T>` that holds a `RefCell<T>`, you can\nget a value that can have multiple owners *and* that you can mutate!\n\nFor example, recall the cons list example in Listing 15-18 where we used\n`Rc<T>` to allow multiple lists to share ownership of another list. Because\n`Rc<T>` holds only immutable values, we can’t change any of the values in the\nlist once we’ve created them. Let’s add in `RefCell<T>` to gain the ability to\nchange the values in the lists. Listing 15-24 shows that by using a\n`RefCell<T>` in the `Cons` definition, we can modify the value stored in all\nthe lists:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n#[derive(Debug)]\nenum List {\n    Cons(Rc<RefCell<i32>>, Rc<List>),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nfn main() {\n    let value = Rc::new(RefCell::new(5));\n\n    let a = Rc::new(Cons(Rc::clone(&value), Rc::new(Nil)));\n\n    let b = Cons(Rc::new(RefCell::new(6)), Rc::clone(&a));\n    let c = Cons(Rc::new(RefCell::new(10)), Rc::clone(&a));\n\n    *value.borrow_mut() += 10;\n\n    println!(\"a after = {:?}\", a);\n    println!(\"b after = {:?}\", b);\n    println!(\"c after = {:?}\", c);\n}\n```\n\n<span class=\"caption\">Listing 15-24: Using `Rc<RefCell<i32>>` to create a\n`List` that we can mutate</span>\n\nWe create a value that is an instance of `Rc<RefCell<i32>>` and store it in a\nvariable named `value` so we can access it directly later. Then we create a\n`List` in `a` with a `Cons` variant that holds `value`. We need to clone\n`value` so both `a` and `value` have ownership of the inner `5` value rather\nthan transferring ownership from `value` to `a` or having `a` borrow from\n`value`.\n\nWe wrap the list `a` in an `Rc<T>` so when we create lists `b` and `c`, they\ncan both refer to `a`, which is what we did in Listing 15-18.\n\nAfter we’ve created the lists in `a`, `b`, and `c`, we add 10 to the value in\n`value`. We do this by calling `borrow_mut` on `value`, which uses the\nautomatic dereferencing feature we discussed in Chapter 5 (see the section\n[“Where’s the `->` Operator?”][wheres-the---operator]<!-- ignore -->) to\ndereference the `Rc<T>` to the inner `RefCell<T>` value. The `borrow_mut`\nmethod returns a `RefMut<T>` smart pointer, and we use the dereference operator\non it and change the inner value.\n\nWhen we print `a`, `b`, and `c`, we can see that they all have the modified\nvalue of 15 rather than 5:\n\n```text\n$ cargo run\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.63s\n     Running `target/debug/cons-list`\na after = Cons(RefCell { value: 15 }, Nil)\nb after = Cons(RefCell { value: 6 }, Cons(RefCell { value: 15 }, Nil))\nc after = Cons(RefCell { value: 10 }, Cons(RefCell { value: 15 }, Nil))\n```\n\nThis technique is pretty neat! By using `RefCell<T>`, we have an outwardly\nimmutable `List` value. But we can use the methods on `RefCell<T>` that provide\naccess to its interior mutability so we can modify our data when we need to.\nThe runtime checks of the borrowing rules protect us from data races, and it’s\nsometimes worth trading a bit of speed for this flexibility in our data\nstructures.\n\nThe standard library has other types that provide interior mutability, such as\n`Cell<T>`, which is similar except that instead of giving references to the\ninner value, the value is copied in and out of the `Cell<T>`. There’s also\n`Mutex<T>`, which offers interior mutability that’s safe to use across threads;\nwe’ll discuss its use in Chapter 16. Check out the standard library docs for\nmore details on the differences between these types.\n\n[wheres-the---operator]: ch05-03-method-syntax.html#wheres-the---operator\n", number: Some(SectionNumber([15, 5])), sub_items: [], path: "ch15-05-interior-mutability.md", parent_names: ["Smart Pointers"] }), Chapter(Chapter { name: "Reference Cycles Can Leak Memory", content: "## Reference Cycles Can Leak Memory\n\nRust’s memory safety guarantees make it difficult, but not impossible, to\naccidentally create memory that is never cleaned up (known as a *memory leak*).\nPreventing memory leaks entirely is not one of Rust’s guarantees in the same\nway that disallowing data races at compile time is, meaning memory leaks are\nmemory safe in Rust. We can see that Rust allows memory leaks by using `Rc<T>`\nand `RefCell<T>`: it’s possible to create references where items refer to each\nother in a cycle. This creates memory leaks because the reference count of each\nitem in the cycle will never reach 0, and the values will never be dropped.\n\n### Creating a Reference Cycle\n\nLet’s look at how a reference cycle might happen and how to prevent it,\nstarting with the definition of the `List` enum and a `tail` method in Listing\n15-25:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse crate::List::{Cons, Nil};\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\n#[derive(Debug)]\nenum List {\n    Cons(i32, RefCell<Rc<List>>),\n    Nil,\n}\n\nimpl List {\n    fn tail(&self) -> Option<&RefCell<Rc<List>>> {\n        match self {\n            Cons(_, item) => Some(item),\n            Nil => None,\n        }\n    }\n}\n\nfn main() {}\n```\n\n<span class=\"caption\">Listing 15-25: A cons list definition that holds a\n`RefCell<T>` so we can modify what a `Cons` variant is referring to</span>\n\nWe’re using another variation of the `List` definition from Listing 15-5. The\nsecond element in the `Cons` variant is now `RefCell<Rc<List>>`, meaning that\ninstead of having the ability to modify the `i32` value as we did in Listing\n15-24, we want to modify which `List` value a `Cons` variant is pointing to.\nWe’re also adding a `tail` method to make it convenient for us to access the\nsecond item if we have a `Cons` variant.\n\nIn Listing 15-26, we’re adding a `main` function that uses the definitions in\nListing 15-25. This code creates a list in `a` and a list in `b` that points to\nthe list in `a`. Then it modifies the list in `a` to point to `b`, creating a\nreference cycle. There are `println!` statements along the way to show what the\nreference counts are at various points in this process.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# use crate::List::{Cons, Nil};\n# use std::cell::RefCell;\n# use std::rc::Rc;\n# \n# #[derive(Debug)]\n# enum List {\n#     Cons(i32, RefCell<Rc<List>>),\n#     Nil,\n# }\n# \n# impl List {\n#     fn tail(&self) -> Option<&RefCell<Rc<List>>> {\n#         match self {\n#             Cons(_, item) => Some(item),\n#             Nil => None,\n#         }\n#     }\n# }\n# \nfn main() {\n    let a = Rc::new(Cons(5, RefCell::new(Rc::new(Nil))));\n\n    println!(\"a initial rc count = {}\", Rc::strong_count(&a));\n    println!(\"a next item = {:?}\", a.tail());\n\n    let b = Rc::new(Cons(10, RefCell::new(Rc::clone(&a))));\n\n    println!(\"a rc count after b creation = {}\", Rc::strong_count(&a));\n    println!(\"b initial rc count = {}\", Rc::strong_count(&b));\n    println!(\"b next item = {:?}\", b.tail());\n\n    if let Some(link) = a.tail() {\n        *link.borrow_mut() = Rc::clone(&b);\n    }\n\n    println!(\"b rc count after changing a = {}\", Rc::strong_count(&b));\n    println!(\"a rc count after changing a = {}\", Rc::strong_count(&a));\n\n    // Uncomment the next line to see that we have a cycle;\n    // it will overflow the stack\n    // println!(\"a next item = {:?}\", a.tail());\n}\n```\n\n<span class=\"caption\">Listing 15-26: Creating a reference cycle of two `List`\nvalues pointing to each other</span>\n\nWe create an `Rc<List>` instance holding a `List` value in the variable `a`\nwith an initial list of `5, Nil`. We then create an `Rc<List>` instance\nholding another `List` value in the variable `b` that contains the value 10 and\npoints to the list in `a`.\n\nWe modify `a` so it points to `b` instead of `Nil`, creating a cycle. We\ndo that by using the `tail` method to get a reference to the\n`RefCell<Rc<List>>` in `a`, which we put in the variable `link`. Then we use\nthe `borrow_mut` method on the `RefCell<Rc<List>>` to change the value inside\nfrom an `Rc<List>` that holds a `Nil` value to the `Rc<List>` in `b`.\n\nWhen we run this code, keeping the last `println!` commented out for the\nmoment, we’ll get this output:\n\n```text\n$ cargo run\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.53s\n     Running `target/debug/cons-list`\na initial rc count = 1\na next item = Some(RefCell { value: Nil })\na rc count after b creation = 2\nb initial rc count = 1\nb next item = Some(RefCell { value: Cons(5, RefCell { value: Nil }) })\nb rc count after changing a = 2\na rc count after changing a = 2\n```\n\nThe reference count of the `Rc<List>` instances in both `a` and `b` are 2\nafter we change the list in `a` to point to `b`. At the end of `main`, Rust\nwill try to drop `b` first, which will decrease the count of the `Rc<List>`\ninstance in `b` by 1.\n\nHowever, because `a` is still referencing the `Rc<List>` that was in `b`, that\n`Rc<List>` has a count of 1 rather than 0, so the memory the `Rc<List>` has on\nthe heap won’t be dropped. The memory will just sit there with a count of 1,\nforever. To visualize this reference cycle, we’ve created a diagram in Figure\n15-4.\n\n<img alt=\"Reference cycle of lists\" src=\"img/trpl15-04.svg\" class=\"center\" />\n\n<span class=\"caption\">Figure 15-4: A reference cycle of lists `a` and `b`\npointing to each other</span>\n\nIf you uncomment the last `println!` and run the program, Rust will try to\nprint this cycle with `a` pointing to `b` pointing to `a` and so forth until it\noverflows the stack.\n\nIn this case, right after we create the reference cycle, the program ends. The\nconsequences of this cycle aren’t very dire. However, if a more complex program\nallocated lots of memory in a cycle and held onto it for a long time, the\nprogram would use more memory than it needed and might overwhelm the system,\ncausing it to run out of available memory.\n\nCreating reference cycles is not easily done, but it’s not impossible either.\nIf you have `RefCell<T>` values that contain `Rc<T>` values or similar nested\ncombinations of types with interior mutability and reference counting, you must\nensure that you don’t create cycles; you can’t rely on Rust to catch them.\nCreating a reference cycle would be a logic bug in your program that you should\nuse automated tests, code reviews, and other software development practices to\nminimize.\n\nAnother solution for avoiding reference cycles is reorganizing your data\nstructures so that some references express ownership and some references don’t.\nAs a result, you can have cycles made up of some ownership relationships and\nsome non-ownership relationships, and only the ownership relationships affect\nwhether or not a value can be dropped. In Listing 15-25, we always want `Cons`\nvariants to own their list, so reorganizing the data structure isn’t possible.\nLet’s look at an example using graphs made up of parent nodes and child nodes\nto see when non-ownership relationships are an appropriate way to prevent\nreference cycles.\n\n### Preventing Reference Cycles: Turning an `Rc<T>` into a `Weak<T>`\n\nSo far, we’ve demonstrated that calling `Rc::clone` increases the\n`strong_count` of an `Rc<T>` instance, and an `Rc<T>` instance is only cleaned\nup if its `strong_count` is 0. You can also create a *weak reference* to the\nvalue within an `Rc<T>` instance by calling `Rc::downgrade` and passing a\nreference to the `Rc<T>`. When you call `Rc::downgrade`, you get a smart\npointer of type `Weak<T>`. Instead of increasing the `strong_count` in the\n`Rc<T>` instance by 1, calling `Rc::downgrade` increases the `weak_count` by 1.\nThe `Rc<T>` type uses `weak_count` to keep track of how many `Weak<T>`\nreferences exist, similar to `strong_count`. The difference is the `weak_count`\ndoesn’t need to be 0 for the `Rc<T>` instance to be cleaned up.\n\nStrong references are how you can share ownership of an `Rc<T>` instance. Weak\nreferences don’t express an ownership relationship. They won’t cause a\nreference cycle because any cycle involving some weak references will be broken\nonce the strong reference count of values involved is 0.\n\nBecause the value that `Weak<T>` references might have been dropped, to do\nanything with the value that a `Weak<T>` is pointing to, you must make sure the\nvalue still exists. Do this by calling the `upgrade` method on a `Weak<T>`\ninstance, which will return an `Option<Rc<T>>`. You’ll get a result of `Some`\nif the `Rc<T>` value has not been dropped yet and a result of `None` if the\n`Rc<T>` value has been dropped. Because `upgrade` returns an `Option<Rc<T>>`,\nRust will ensure that the `Some` case and the `None` case are handled, and\nthere won’t be an invalid pointer.\n\nAs an example, rather than using a list whose items know only about the next\nitem, we’ll create a tree whose items know about their children items *and*\ntheir parent items.\n\n#### Creating a Tree Data Structure: a `Node` with Child Nodes\n\nTo start, we’ll build a tree with nodes that know about their child nodes.\nWe’ll create a struct named `Node` that holds its own `i32` value as well as\nreferences to its children `Node` values:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\n#[derive(Debug)]\nstruct Node {\n    value: i32,\n    children: RefCell<Vec<Rc<Node>>>,\n}\n# \n# fn main() {\n#     let leaf = Rc::new(Node {\n#         value: 3,\n#         children: RefCell::new(vec![]),\n#     });\n# \n#     let branch = Rc::new(Node {\n#         value: 5,\n#         children: RefCell::new(vec![Rc::clone(&leaf)]),\n#     });\n# }\n```\n\nWe want a `Node` to own its children, and we want to share that ownership with\nvariables so we can access each `Node` in the tree directly. To do this, we\ndefine the `Vec<T>` items to be values of type `Rc<Node>`. We also want to\nmodify which nodes are children of another node, so we have a `RefCell<T>` in\n`children` around the `Vec<Rc<Node>>`.\n\nNext, we’ll use our struct definition and create one `Node` instance named\n`leaf` with the value 3 and no children, and another instance named `branch`\nwith the value 5 and `leaf` as one of its children, as shown in Listing 15-27:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# use std::cell::RefCell;\n# use std::rc::Rc;\n# \n# #[derive(Debug)]\n# struct Node {\n#     value: i32,\n#     children: RefCell<Vec<Rc<Node>>>,\n# }\n# \nfn main() {\n    let leaf = Rc::new(Node {\n        value: 3,\n        children: RefCell::new(vec![]),\n    });\n\n    let branch = Rc::new(Node {\n        value: 5,\n        children: RefCell::new(vec![Rc::clone(&leaf)]),\n    });\n}\n```\n\n<span class=\"caption\">Listing 15-27: Creating a `leaf` node with no children\nand a `branch` node with `leaf` as one of its children</span>\n\nWe clone the `Rc<Node>` in `leaf` and store that in `branch`, meaning the\n`Node` in `leaf` now has two owners: `leaf` and `branch`. We can get from\n`branch` to `leaf` through `branch.children`, but there’s no way to get from\n`leaf` to `branch`. The reason is that `leaf` has no reference to `branch` and\ndoesn’t know they’re related. We want `leaf` to know that `branch` is its\nparent. We’ll do that next.\n\n#### Adding a Reference from a Child to Its Parent\n\nTo make the child node aware of its parent, we need to add a `parent` field to\nour `Node` struct definition. The trouble is in deciding what the type of\n`parent` should be. We know it can’t contain an `Rc<T>`, because that would\ncreate a reference cycle with `leaf.parent` pointing to `branch` and\n`branch.children` pointing to `leaf`, which would cause their `strong_count`\nvalues to never be 0.\n\nThinking about the relationships another way, a parent node should own its\nchildren: if a parent node is dropped, its child nodes should be dropped as\nwell. However, a child should not own its parent: if we drop a child node, the\nparent should still exist. This is a case for weak references!\n\nSo instead of `Rc<T>`, we’ll make the type of `parent` use `Weak<T>`,\nspecifically a `RefCell<Weak<Node>>`. Now our `Node` struct definition looks\nlike this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::cell::RefCell;\nuse std::rc::{Rc, Weak};\n\n#[derive(Debug)]\nstruct Node {\n    value: i32,\n    parent: RefCell<Weak<Node>>,\n    children: RefCell<Vec<Rc<Node>>>,\n}\n# \n# fn main() {\n#     let leaf = Rc::new(Node {\n#         value: 3,\n#         parent: RefCell::new(Weak::new()),\n#         children: RefCell::new(vec![]),\n#     });\n# \n#     println!(\"leaf parent = {:?}\", leaf.parent.borrow().upgrade());\n# \n#     let branch = Rc::new(Node {\n#         value: 5,\n#         parent: RefCell::new(Weak::new()),\n#         children: RefCell::new(vec![Rc::clone(&leaf)]),\n#     });\n# \n#     *leaf.parent.borrow_mut() = Rc::downgrade(&branch);\n# \n#     println!(\"leaf parent = {:?}\", leaf.parent.borrow().upgrade());\n# }\n```\n\nA node will be able to refer to its parent node but doesn’t own its parent.\nIn Listing 15-28, we update `main` to use this new definition so the `leaf`\nnode will have a way to refer to its parent, `branch`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# use std::cell::RefCell;\n# use std::rc::{Rc, Weak};\n# \n# #[derive(Debug)]\n# struct Node {\n#     value: i32,\n#     parent: RefCell<Weak<Node>>,\n#     children: RefCell<Vec<Rc<Node>>>,\n# }\n# \nfn main() {\n    let leaf = Rc::new(Node {\n        value: 3,\n        parent: RefCell::new(Weak::new()),\n        children: RefCell::new(vec![]),\n    });\n\n    println!(\"leaf parent = {:?}\", leaf.parent.borrow().upgrade());\n\n    let branch = Rc::new(Node {\n        value: 5,\n        parent: RefCell::new(Weak::new()),\n        children: RefCell::new(vec![Rc::clone(&leaf)]),\n    });\n\n    *leaf.parent.borrow_mut() = Rc::downgrade(&branch);\n\n    println!(\"leaf parent = {:?}\", leaf.parent.borrow().upgrade());\n}\n```\n\n<span class=\"caption\">Listing 15-28: A `leaf` node with a weak reference to its\nparent node `branch`</span>\n\nCreating the `leaf` node looks similar to how creating the `leaf` node looked\nin Listing 15-27 with the exception of the `parent` field: `leaf` starts out\nwithout a parent, so we create a new, empty `Weak<Node>` reference instance.\n\nAt this point, when we try to get a reference to the parent of `leaf` by using\nthe `upgrade` method, we get a `None` value. We see this in the output from the\nfirst `println!` statement:\n\n```text\nleaf parent = None\n```\n\nWhen we create the `branch` node, it will also have a new `Weak<Node>`\nreference in the `parent` field, because `branch` doesn’t have a parent node.\nWe still have `leaf` as one of the children of `branch`. Once we have the\n`Node` instance in `branch`, we can modify `leaf` to give it a `Weak<Node>`\nreference to its parent. We use the `borrow_mut` method on the\n`RefCell<Weak<Node>>` in the `parent` field of `leaf`, and then we use the\n`Rc::downgrade` function to create a `Weak<Node>` reference to `branch` from\nthe `Rc<Node>` in `branch.`\n\nWhen we print the parent of `leaf` again, this time we’ll get a `Some` variant\nholding `branch`: now `leaf` can access its parent! When we print `leaf`, we\nalso avoid the cycle that eventually ended in a stack overflow like we had in\nListing 15-26; the `Weak<Node>` references are printed as `(Weak)`:\n\n```text\nleaf parent = Some(Node { value: 5, parent: RefCell { value: (Weak) },\nchildren: RefCell { value: [Node { value: 3, parent: RefCell { value: (Weak) },\nchildren: RefCell { value: [] } }] } })\n```\n\nThe lack of infinite output indicates that this code didn’t create a reference\ncycle. We can also tell this by looking at the values we get from calling\n`Rc::strong_count` and `Rc::weak_count`.\n\n#### Visualizing Changes to `strong_count` and `weak_count`\n\nLet’s look at how the `strong_count` and `weak_count` values of the `Rc<Node>`\ninstances change by creating a new inner scope and moving the creation of\n`branch` into that scope. By doing so, we can see what happens when `branch` is\ncreated and then dropped when it goes out of scope. The modifications are shown\nin Listing 15-29:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# use std::cell::RefCell;\n# use std::rc::{Rc, Weak};\n# \n# #[derive(Debug)]\n# struct Node {\n#     value: i32,\n#     parent: RefCell<Weak<Node>>,\n#     children: RefCell<Vec<Rc<Node>>>,\n# }\n# \nfn main() {\n    let leaf = Rc::new(Node {\n        value: 3,\n        parent: RefCell::new(Weak::new()),\n        children: RefCell::new(vec![]),\n    });\n\n    println!(\n        \"leaf strong = {}, weak = {}\",\n        Rc::strong_count(&leaf),\n        Rc::weak_count(&leaf),\n    );\n\n    {\n        let branch = Rc::new(Node {\n            value: 5,\n            parent: RefCell::new(Weak::new()),\n            children: RefCell::new(vec![Rc::clone(&leaf)]),\n        });\n\n        *leaf.parent.borrow_mut() = Rc::downgrade(&branch);\n\n        println!(\n            \"branch strong = {}, weak = {}\",\n            Rc::strong_count(&branch),\n            Rc::weak_count(&branch),\n        );\n\n        println!(\n            \"leaf strong = {}, weak = {}\",\n            Rc::strong_count(&leaf),\n            Rc::weak_count(&leaf),\n        );\n    }\n\n    println!(\"leaf parent = {:?}\", leaf.parent.borrow().upgrade());\n    println!(\n        \"leaf strong = {}, weak = {}\",\n        Rc::strong_count(&leaf),\n        Rc::weak_count(&leaf),\n    );\n}\n```\n\n<span class=\"caption\">Listing 15-29: Creating `branch` in an inner scope and\nexamining strong and weak reference counts</span>\n\nAfter `leaf` is created, its `Rc<Node>` has a strong count of 1 and a weak\ncount of 0. In the inner scope, we create `branch` and associate it with\n`leaf`, at which point when we print the counts, the `Rc<Node>` in `branch`\nwill have a strong count of 1 and a weak count of 1 (for `leaf.parent` pointing\nto `branch` with a `Weak<Node>`). When we print the counts in `leaf`, we’ll see\nit will have a strong count of 2, because `branch` now has a clone of the\n`Rc<Node>` of `leaf` stored in `branch.children`, but will still have a weak\ncount of 0.\n\nWhen the inner scope ends, `branch` goes out of scope and the strong count of\nthe `Rc<Node>` decreases to 0, so its `Node` is dropped. The weak count of 1\nfrom `leaf.parent` has no bearing on whether or not `Node` is dropped, so we\ndon’t get any memory leaks!\n\nIf we try to access the parent of `leaf` after the end of the scope, we’ll get\n`None` again. At the end of the program, the `Rc<Node>` in `leaf` has a strong\ncount of 1 and a weak count of 0, because the variable `leaf` is now the only\nreference to the `Rc<Node>` again.\n\nAll of the logic that manages the counts and value dropping is built into\n`Rc<T>` and `Weak<T>` and their implementations of the `Drop` trait. By\nspecifying that the relationship from a child to its parent should be a\n`Weak<T>` reference in the definition of `Node`, you’re able to have parent\nnodes point to child nodes and vice versa without creating a reference cycle\nand memory leaks.\n\n## Summary\n\nThis chapter covered how to use smart pointers to make different guarantees and\ntrade-offs from those Rust makes by default with regular references. The\n`Box<T>` type has a known size and points to data allocated on the heap. The\n`Rc<T>` type keeps track of the number of references to data on the heap so\nthat data can have multiple owners. The `RefCell<T>` type with its interior\nmutability gives us a type that we can use when we need an immutable type but\nneed to change an inner value of that type; it also enforces the borrowing\nrules at runtime instead of at compile time.\n\nAlso discussed were the `Deref` and `Drop` traits, which enable a lot of the\nfunctionality of smart pointers. We explored reference cycles that can cause\nmemory leaks and how to prevent them using `Weak<T>`.\n\nIf this chapter has piqued your interest and you want to implement your own\nsmart pointers, check out [“The Rustonomicon”][nomicon] for more useful\ninformation.\n\nNext, we’ll talk about concurrency in Rust. You’ll even learn about a few new\nsmart pointers.\n\n[nomicon]: ../nomicon/index.html\n", number: Some(SectionNumber([15, 6])), sub_items: [], path: "ch15-06-reference-cycles.md", parent_names: ["Smart Pointers"] })], path: "ch15-00-smart-pointers.md", parent_names: [] }), Chapter(Chapter { name: "Fearless Concurrency", content: "# Fearless Concurrency\n\nHandling concurrent programming safely and efficiently is another of Rust’s\nmajor goals. *Concurrent programming*, where different parts of a program\nexecute independently, and *parallel programming*, where different parts of a\nprogram execute at the same time, are becoming increasingly important as more\ncomputers take advantage of their multiple processors. Historically,\nprogramming in these contexts has been difficult and error prone: Rust hopes to\nchange that.\n\nInitially, the Rust team thought that ensuring memory safety and preventing\nconcurrency problems were two separate challenges to be solved with different\nmethods. Over time, the team discovered that the ownership and type systems are\na powerful set of tools to help manage memory safety *and* concurrency\nproblems! By leveraging ownership and type checking, many concurrency errors\nare compile-time errors in Rust rather than runtime errors. Therefore, rather\nthan making you spend lots of time trying to reproduce the exact circumstances\nunder which a runtime concurrency bug occurs, incorrect code will refuse to\ncompile and present an error explaining the problem. As a result, you can fix\nyour code while you’re working on it rather than potentially after it has been\nshipped to production. We’ve nicknamed this aspect of Rust *fearless*\n*concurrency*. Fearless concurrency allows you to write code that is free of\nsubtle bugs and is easy to refactor without introducing new bugs.\n\n> Note: For simplicity’s sake, we’ll refer to many of the problems as\n> *concurrent* rather than being more precise by saying *concurrent and/or\n> parallel*. If this book were about concurrency and/or parallelism, we’d be\n> more specific. For this chapter, please mentally substitute *concurrent\n> and/or parallel* whenever we use *concurrent*.\n\nMany languages are dogmatic about the solutions they offer for handling\nconcurrent problems. For example, Erlang has elegant functionality for\nmessage-passing concurrency but has only obscure ways to share state between\nthreads. Supporting only a subset of possible solutions is a reasonable\nstrategy for higher-level languages, because a higher-level language promises\nbenefits from giving up some control to gain abstractions. However, lower-level\nlanguages are expected to provide the solution with the best performance in any\ngiven situation and have fewer abstractions over the hardware. Therefore, Rust\noffers a variety of tools for modeling problems in whatever way is appropriate\nfor your situation and requirements.\n\nHere are the topics we’ll cover in this chapter:\n\n* How to create threads to run multiple pieces of code at the same time\n* *Message-passing* concurrency, where channels send messages between threads\n* *Shared-state* concurrency, where multiple threads have access to some piece\n  of data\n* The `Sync` and `Send` traits, which extend Rust’s concurrency guarantees to\n  user-defined types as well as types provided by the standard library\n", number: Some(SectionNumber([16])), sub_items: [Chapter(Chapter { name: "Using Threads to Run Code Simultaneously", content: "## Using Threads to Run Code Simultaneously\n\nIn most current operating systems, an executed program’s code is run in a\n*process*, and the operating system manages multiple processes at once. Within\nyour program, you can also have independent parts that run simultaneously. The\nfeatures that run these independent parts are called *threads*.\n\nSplitting the computation in your program into multiple threads can improve\nperformance because the program does multiple tasks at the same time, but it\nalso adds complexity. Because threads can run simultaneously, there’s no\ninherent guarantee about the order in which parts of your code on different\nthreads will run. This can lead to problems, such as:\n\n* Race conditions, where threads are accessing data or resources in an\n  inconsistent order\n* Deadlocks, where two threads are waiting for each other to finish using a\n  resource the other thread has, preventing both threads from continuing\n* Bugs that happen only in certain situations and are hard to reproduce and fix\n  reliably\n\nRust attempts to mitigate the negative effects of using threads, but\nprogramming in a multithreaded context still takes careful thought and requires\na code structure that is different from that in programs running in a single\nthread.\n\nProgramming languages implement threads in a few different ways. Many operating\nsystems provide an API for creating new threads. This model where a language\ncalls the operating system APIs to create threads is sometimes called *1:1*,\nmeaning one operating system thread per one language thread.\n\nMany programming languages provide their own special implementation of threads.\nProgramming language-provided threads are known as *green* threads, and\nlanguages that use these green threads will execute them in the context of a\ndifferent number of operating system threads. For this reason, the\ngreen-threaded model is called the *M:N* model: there are `M` green threads per\n`N` operating system threads, where `M` and `N` are not necessarily the same\nnumber.\n\nEach model has its own advantages and trade-offs, and the trade-off most\nimportant to Rust is runtime support. *Runtime* is a confusing term and can\nhave different meanings in different contexts.\n\nIn this context, by *runtime* we mean code that is included by the language in\nevery binary. This code can be large or small depending on the language, but\nevery non-assembly language will have some amount of runtime code. For that\nreason, colloquially when people say a language has “no runtime,” they often\nmean “small runtime.” Smaller runtimes have fewer features but have the\nadvantage of resulting in smaller binaries, which make it easier to combine the\nlanguage with other languages in more contexts. Although many languages are\nokay with increasing the runtime size in exchange for more features, Rust needs\nto have nearly no runtime and cannot compromise on being able to call into C to\nmaintain performance.\n\nThe green-threading M:N model requires a larger language runtime to manage\nthreads. As such, the Rust standard library only provides an implementation of\n1:1 threading. Because Rust is such a low-level language, there are crates that\nimplement M:N threading if you would rather trade overhead for aspects such as\nmore control over which threads run when and lower costs of context switching,\nfor example.\n\nNow that we’ve defined threads in Rust, let’s explore how to use the\nthread-related API provided by the standard library.\n\n### Creating a New Thread with `spawn`\n\nTo create a new thread, we call the `thread::spawn` function and pass it a\nclosure (we talked about closures in Chapter 13) containing the code we want to\nrun in the new thread. The example in Listing 16-1 prints some text from a main\nthread and other text from a new thread:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::thread;\nuse std::time::Duration;\n\nfn main() {\n    thread::spawn(|| {\n        for i in 1..10 {\n            println!(\"hi number {} from the spawned thread!\", i);\n            thread::sleep(Duration::from_millis(1));\n        }\n    });\n\n    for i in 1..5 {\n        println!(\"hi number {} from the main thread!\", i);\n        thread::sleep(Duration::from_millis(1));\n    }\n}\n```\n\n<span class=\"caption\">Listing 16-1: Creating a new thread to print one thing\nwhile the main thread prints something else</span>\n\nNote that with this function, the new thread will be stopped when the main\nthread ends, whether or not it has finished running. The output from this\nprogram might be a little different every time, but it will look similar to the\nfollowing:\n\n<!-- Not extracting output because changes to this output aren\'t significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nhi number 1 from the main thread!\nhi number 1 from the spawned thread!\nhi number 2 from the main thread!\nhi number 2 from the spawned thread!\nhi number 3 from the main thread!\nhi number 3 from the spawned thread!\nhi number 4 from the main thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\n```\n\nThe calls to `thread::sleep` force a thread to stop its execution for a short\nduration, allowing a different thread to run. The threads will probably take\nturns, but that isn’t guaranteed: it depends on how your operating system\nschedules the threads. In this run, the main thread printed first, even though\nthe print statement from the spawned thread appears first in the code. And even\nthough we told the spawned thread to print until `i` is 9, it only got to 5\nbefore the main thread shut down.\n\nIf you run this code and only see output from the main thread, or don’t see any\noverlap, try increasing the numbers in the ranges to create more opportunities\nfor the operating system to switch between the threads.\n\n### Waiting for All Threads to Finish Using `join` Handles\n\nThe code in Listing 16-1 not only stops the spawned thread prematurely most of\nthe time due to the main thread ending, but also can’t guarantee that the\nspawned thread will get to run at all. The reason is that there is no guarantee\non the order in which threads run!\n\nWe can fix the problem of the spawned thread not getting to run, or not getting\nto run completely, by saving the return value of `thread::spawn` in a variable.\nThe return type of `thread::spawn` is `JoinHandle`. A `JoinHandle` is an owned\nvalue that, when we call the `join` method on it, will wait for its thread to\nfinish. Listing 16-2 shows how to use the `JoinHandle` of the thread we created\nin Listing 16-1 and call `join` to make sure the spawned thread finishes before\n`main` exits:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::thread;\nuse std::time::Duration;\n\nfn main() {\n    let handle = thread::spawn(|| {\n        for i in 1..10 {\n            println!(\"hi number {} from the spawned thread!\", i);\n            thread::sleep(Duration::from_millis(1));\n        }\n    });\n\n    for i in 1..5 {\n        println!(\"hi number {} from the main thread!\", i);\n        thread::sleep(Duration::from_millis(1));\n    }\n\n    handle.join().unwrap();\n}\n```\n\n<span class=\"caption\">Listing 16-2: Saving a `JoinHandle` from `thread::spawn`\nto guarantee the thread is run to completion</span>\n\nCalling `join` on the handle blocks the thread currently running until the\nthread represented by the handle terminates. *Blocking* a thread means that\nthread is prevented from performing work or exiting. Because we’ve put the call\nto `join` after the main thread’s `for` loop, running Listing 16-2 should\nproduce output similar to this:\n\n<!-- Not extracting output because changes to this output aren\'t significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nhi number 1 from the main thread!\nhi number 2 from the main thread!\nhi number 1 from the spawned thread!\nhi number 3 from the main thread!\nhi number 2 from the spawned thread!\nhi number 4 from the main thread!\nhi number 3 from the spawned thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\nhi number 6 from the spawned thread!\nhi number 7 from the spawned thread!\nhi number 8 from the spawned thread!\nhi number 9 from the spawned thread!\n```\n\nThe two threads continue alternating, but the main thread waits because of the\ncall to `handle.join()` and does not end until the spawned thread is finished.\n\nBut let’s see what happens when we instead move `handle.join()` before the\n`for` loop in `main`, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::thread;\nuse std::time::Duration;\n\nfn main() {\n    let handle = thread::spawn(|| {\n        for i in 1..10 {\n            println!(\"hi number {} from the spawned thread!\", i);\n            thread::sleep(Duration::from_millis(1));\n        }\n    });\n\n    handle.join().unwrap();\n\n    for i in 1..5 {\n        println!(\"hi number {} from the main thread!\", i);\n        thread::sleep(Duration::from_millis(1));\n    }\n}\n```\n\nThe main thread will wait for the spawned thread to finish and then run its\n`for` loop, so the output won’t be interleaved anymore, as shown here:\n\n<!-- Not extracting output because changes to this output aren\'t significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nhi number 1 from the spawned thread!\nhi number 2 from the spawned thread!\nhi number 3 from the spawned thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\nhi number 6 from the spawned thread!\nhi number 7 from the spawned thread!\nhi number 8 from the spawned thread!\nhi number 9 from the spawned thread!\nhi number 1 from the main thread!\nhi number 2 from the main thread!\nhi number 3 from the main thread!\nhi number 4 from the main thread!\n```\n\nSmall details, such as where `join` is called, can affect whether or not your\nthreads run at the same time.\n\n### Using `move` Closures with Threads\n\nThe `move` closure is often used alongside `thread::spawn` because it allows\nyou to use data from one thread in another thread.\n\nIn Chapter 13, we mentioned we can use the `move` keyword before the parameter\nlist of a closure to force the closure to take ownership of the values it uses\nin the environment. This technique is especially useful when creating new\nthreads in order to transfer ownership of values from one thread to another.\n\nNotice in Listing 16-1 that the closure we pass to `thread::spawn` takes no\narguments: we’re not using any data from the main thread in the spawned\nthread’s code. To use data from the main thread in the spawned thread, the\nspawned thread’s closure must capture the values it needs. Listing 16-3 shows\nan attempt to create a vector in the main thread and use it in the spawned\nthread. However, this won’t yet work, as you’ll see in a moment.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nuse std::thread;\n\nfn main() {\n    let v = vec![1, 2, 3];\n\n    let handle = thread::spawn(|| {\n        println!(\"Here\'s a vector: {:?}\", v);\n    });\n\n    handle.join().unwrap();\n}\n```\n\n<span class=\"caption\">Listing 16-3: Attempting to use a vector created by the\nmain thread in another thread</span>\n\nThe closure uses `v`, so it will capture `v` and make it part of the closure’s\nenvironment. Because `thread::spawn` runs this closure in a new thread, we\nshould be able to access `v` inside that new thread. But when we compile this\nexample, we get the following error:\n\n```text\n$ cargo run\n   Compiling threads v0.1.0 (file:///projects/threads)\nerror[E0373]: closure may outlive the current function, but it borrows `v`, which is owned by the current function\n --> src/main.rs:6:32\n  |\n6 |     let handle = thread::spawn(|| {\n  |                                ^^ may outlive borrowed value `v`\n7 |         println!(\"Here\'s a vector: {:?}\", v);\n  |                                           - `v` is borrowed here\n  |\nnote: function requires argument type to outlive `\'static`\n --> src/main.rs:6:18\n  |\n6 |       let handle = thread::spawn(|| {\n  |  __________________^\n7 | |         println!(\"Here\'s a vector: {:?}\", v);\n8 | |     });\n  | |______^\nhelp: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword\n  |\n6 |     let handle = thread::spawn(move || {\n  |                                ^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0373`.\nerror: could not compile `threads`.\n\nTo learn more, run the command again with --verbose.\n```\n\nRust *infers* how to capture `v`, and because `println!` only needs a reference\nto `v`, the closure tries to borrow `v`. However, there’s a problem: Rust can’t\ntell how long the spawned thread will run, so it doesn’t know if the reference\nto `v` will always be valid.\n\nListing 16-4 provides a scenario that’s more likely to have a reference to `v`\nthat won’t be valid:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nuse std::thread;\n\nfn main() {\n    let v = vec![1, 2, 3];\n\n    let handle = thread::spawn(|| {\n        println!(\"Here\'s a vector: {:?}\", v);\n    });\n\n    drop(v); // oh no!\n\n    handle.join().unwrap();\n}\n```\n\n<span class=\"caption\">Listing 16-4: A thread with a closure that attempts to\ncapture a reference to `v` from a main thread that drops `v`</span>\n\nIf we were allowed to run this code, there’s a possibility the spawned thread\nwould be immediately put in the background without running at all. The spawned\nthread has a reference to `v` inside, but the main thread immediately drops\n`v`, using the `drop` function we discussed in Chapter 15. Then, when the\nspawned thread starts to execute, `v` is no longer valid, so a reference to it\nis also invalid. Oh no!\n\nTo fix the compiler error in Listing 16-3, we can use the error message’s\nadvice:\n\n<!-- manual-regeneration\nafter automatic regeneration, look at listings/ch16-fearless-concurrency/listing-16-03/output.txt and copy the relevant part\n-->\n\n```text\nhelp: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword\n  |\n6 |     let handle = thread::spawn(move || {\n  |                                ^^^^^^^\n```\n\nBy adding the `move` keyword before the closure, we force the closure to take\nownership of the values it’s using rather than allowing Rust to infer that it\nshould borrow the values. The modification to Listing 16-3 shown in Listing\n16-5 will compile and run as we intend:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::thread;\n\nfn main() {\n    let v = vec![1, 2, 3];\n\n    let handle = thread::spawn(move || {\n        println!(\"Here\'s a vector: {:?}\", v);\n    });\n\n    handle.join().unwrap();\n}\n```\n\n<span class=\"caption\">Listing 16-5: Using the `move` keyword to force a closure\nto take ownership of the values it uses</span>\n\nWhat would happen to the code in Listing 16-4 where the main thread called\n`drop` if we use a `move` closure? Would `move` fix that case? Unfortunately,\nno; we would get a different error because what Listing 16-4 is trying to do\nisn’t allowed for a different reason. If we added `move` to the closure, we\nwould move `v` into the closure’s environment, and we could no longer call\n`drop` on it in the main thread. We would get this compiler error instead:\n\n```text\n$ cargo run\n   Compiling threads v0.1.0 (file:///projects/threads)\nerror[E0382]: use of moved value: `v`\n  --> src/main.rs:10:10\n   |\n4  |     let v = vec![1, 2, 3];\n   |         - move occurs because `v` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n5  | \n6  |     let handle = thread::spawn(move || {\n   |                                ------- value moved into closure here\n7  |         println!(\"Here\'s a vector: {:?}\", v);\n   |                                           - variable moved due to use in closure\n...\n10 |     drop(v); // oh no!\n   |          ^ value used here after move\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `threads`.\n\nTo learn more, run the command again with --verbose.\n```\n\nRust’s ownership rules have saved us again! We got an error from the code in\nListing 16-3 because Rust was being conservative and only borrowing `v` for the\nthread, which meant the main thread could theoretically invalidate the spawned\nthread’s reference. By telling Rust to move ownership of `v` to the spawned\nthread, we’re guaranteeing Rust that the main thread won’t use `v` anymore. If\nwe change Listing 16-4 in the same way, we’re then violating the ownership\nrules when we try to use `v` in the main thread. The `move` keyword overrides\nRust’s conservative default of borrowing; it doesn’t let us violate the\nownership rules.\n\nWith a basic understanding of threads and the thread API, let’s look at what we\ncan *do* with threads.\n", number: Some(SectionNumber([16, 1])), sub_items: [], path: "ch16-01-threads.md", parent_names: ["Fearless Concurrency"] }), Chapter(Chapter { name: "Using Message Passing to Transfer Data Between Threads", content: "## Using Message Passing to Transfer Data Between Threads\n\nOne increasingly popular approach to ensuring safe concurrency is *message\npassing*, where threads or actors communicate by sending each other messages\ncontaining data. Here’s the idea in a slogan from [the Go language\ndocumentation](https://golang.org/doc/effective_go.html#concurrency): \n“Do not communicate by sharing memory; instead, share memory by communicating.”\n\nOne major tool Rust has for accomplishing message-sending concurrency is the\n*channel*, a programming concept that Rust’s standard library provides an\nimplementation of. You can imagine a channel in programming as being like a\nchannel of water, such as a stream or a river. If you put something like a\nrubber duck or boat into a stream, it will travel downstream to the end of the\nwaterway.\n\nA channel in programming has two halves: a transmitter and a receiver. The\ntransmitter half is the upstream location where you put rubber ducks into the\nriver, and the receiver half is where the rubber duck ends up downstream. One\npart of your code calls methods on the transmitter with the data you want to\nsend, and another part checks the receiving end for arriving messages. A\nchannel is said to be *closed* if either the transmitter or receiver half is\ndropped.\n\nHere, we’ll work up to a program that has one thread to generate values and\nsend them down a channel, and another thread that will receive the values and\nprint them out. We’ll be sending simple values between threads using a channel\nto illustrate the feature. Once you’re familiar with the technique, you could\nuse channels to implement a chat system or a system where many threads perform\nparts of a calculation and send the parts to one thread that aggregates the\nresults.\n\nFirst, in Listing 16-6, we’ll create a channel but not do anything with it.\nNote that this won’t compile yet because Rust can’t tell what type of values we\nwant to send over the channel.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nuse std::sync::mpsc;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n}\n```\n\n<span class=\"caption\">Listing 16-6: Creating a channel and assigning the two\nhalves to `tx` and `rx`</span>\n\nWe create a new channel using the `mpsc::channel` function; `mpsc` stands for\n*multiple producer, single consumer*. In short, the way Rust’s standard library\nimplements channels means a channel can have multiple *sending* ends that\nproduce values but only one *receiving* end that consumes those values. Imagine\nmultiple streams flowing together into one big river: everything sent down any\nof the streams will end up in one river at the end. We’ll start with a single\nproducer for now, but we’ll add multiple producers when we get this example\nworking.\n\nThe `mpsc::channel` function returns a tuple, the first element of which is the\nsending end and the second element is the receiving end. The abbreviations `tx`\nand `rx` are traditionally used in many fields for *transmitter* and *receiver*\nrespectively, so we name our variables as such to indicate each end. We’re\nusing a `let` statement with a pattern that destructures the tuples; we’ll\ndiscuss the use of patterns in `let` statements and destructuring in Chapter\n18. Using a `let` statement this way is a convenient approach to extract the\npieces of the tuple returned by `mpsc::channel`.\n\nLet’s move the transmitting end into a spawned thread and have it send one\nstring so the spawned thread is communicating with the main thread, as shown in\nListing 16-7. This is like putting a rubber duck in the river upstream or\nsending a chat message from one thread to another.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::sync::mpsc;\nuse std::thread;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    thread::spawn(move || {\n        let val = String::from(\"hi\");\n        tx.send(val).unwrap();\n    });\n}\n```\n\n<span class=\"caption\">Listing 16-7: Moving `tx` to a spawned thread and sending\n“hi”</span>\n\nAgain, we’re using `thread::spawn` to create a new thread and then using `move`\nto move `tx` into the closure so the spawned thread owns `tx`. The spawned\nthread needs to own the transmitting end of the channel to be able to send\nmessages through the channel.\n\nThe transmitting end has a `send` method that takes the value we want to send.\nThe `send` method returns a `Result<T, E>` type, so if the receiving end has\nalready been dropped and there’s nowhere to send a value, the send operation\nwill return an error. In this example, we’re calling `unwrap` to panic in case\nof an error. But in a real application, we would handle it properly: return to\nChapter 9 to review strategies for proper error handling.\n\nIn Listing 16-8, we’ll get the value from the receiving end of the channel in\nthe main thread. This is like retrieving the rubber duck from the water at the\nend of the river or like getting a chat message.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::sync::mpsc;\nuse std::thread;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    thread::spawn(move || {\n        let val = String::from(\"hi\");\n        tx.send(val).unwrap();\n    });\n\n    let received = rx.recv().unwrap();\n    println!(\"Got: {}\", received);\n}\n```\n\n<span class=\"caption\">Listing 16-8: Receiving the value “hi” in the main thread\nand printing it</span>\n\nThe receiving end of a channel has two useful methods: `recv` and `try_recv`.\nWe’re using `recv`, short for *receive*, which will block the main thread’s\nexecution and wait until a value is sent down the channel. Once a value is\nsent, `recv` will return it in a `Result<T, E>`. When the sending end of the\nchannel closes, `recv` will return an error to signal that no more values will\nbe coming.\n\nThe `try_recv` method doesn’t block, but will instead return a `Result<T, E>`\nimmediately: an `Ok` value holding a message if one is available and an `Err`\nvalue if there aren’t any messages this time. Using `try_recv` is useful if\nthis thread has other work to do while waiting for messages: we could write a\nloop that calls `try_recv` every so often, handles a message if one is\navailable, and otherwise does other work for a little while until checking\nagain.\n\nWe’ve used `recv` in this example for simplicity; we don’t have any other work\nfor the main thread to do other than wait for messages, so blocking the main\nthread is appropriate.\n\nWhen we run the code in Listing 16-8, we’ll see the value printed from the main\nthread:\n\n<!-- Not extracting output because changes to this output aren\'t significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nGot: hi\n```\n\nPerfect!\n\n### Channels and Ownership Transference\n\nThe ownership rules play a vital role in message sending because they help you\nwrite safe, concurrent code. Preventing errors in concurrent programming is the\nadvantage of thinking about ownership throughout your Rust programs. Let’s do\nan experiment to show how channels and ownership work together to prevent\nproblems: we’ll try to use a `val` value in the spawned thread *after* we’ve\nsent it down the channel. Try compiling the code in Listing 16-9 to see why\nthis code isn’t allowed:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nuse std::sync::mpsc;\nuse std::thread;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    thread::spawn(move || {\n        let val = String::from(\"hi\");\n        tx.send(val).unwrap();\n        println!(\"val is {}\", val);\n    });\n\n    let received = rx.recv().unwrap();\n    println!(\"Got: {}\", received);\n}\n```\n\n<span class=\"caption\">Listing 16-9: Attempting to use `val` after we’ve sent it\ndown the channel</span>\n\nHere, we try to print `val` after we’ve sent it down the channel via `tx.send`.\nAllowing this would be a bad idea: once the value has been sent to another\nthread, that thread could modify or drop it before we try to use the value\nagain. Potentially, the other thread’s modifications could cause errors or\nunexpected results due to inconsistent or nonexistent data. However, Rust gives\nus an error if we try to compile the code in Listing 16-9:\n\n```text\n$ cargo run\n   Compiling message-passing v0.1.0 (file:///projects/message-passing)\nerror[E0382]: borrow of moved value: `val`\n  --> src/main.rs:10:31\n   |\n8  |         let val = String::from(\"hi\");\n   |             --- move occurs because `val` has type `std::string::String`, which does not implement the `Copy` trait\n9  |         tx.send(val).unwrap();\n   |                 --- value moved here\n10 |         println!(\"val is {}\", val);\n   |                               ^^^ value borrowed here after move\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `message-passing`.\n\nTo learn more, run the command again with --verbose.\n```\n\nOur concurrency mistake has caused a compile time error. The `send` function\ntakes ownership of its parameter, and when the value is moved, the receiver\ntakes ownership of it. This stops us from accidentally using the value again\nafter sending it; the ownership system checks that everything is okay.\n\n### Sending Multiple Values and Seeing the Receiver Waiting\n\nThe code in Listing 16-8 compiled and ran, but it didn’t clearly show us that\ntwo separate threads were talking to each other over the channel. In Listing\n16-10 we’ve made some modifications that will prove the code in Listing 16-8 is\nrunning concurrently: the spawned thread will now send multiple messages and\npause for a second between each message.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::sync::mpsc;\nuse std::thread;\nuse std::time::Duration;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    thread::spawn(move || {\n        let vals = vec![\n            String::from(\"hi\"),\n            String::from(\"from\"),\n            String::from(\"the\"),\n            String::from(\"thread\"),\n        ];\n\n        for val in vals {\n            tx.send(val).unwrap();\n            thread::sleep(Duration::from_secs(1));\n        }\n    });\n\n    for received in rx {\n        println!(\"Got: {}\", received);\n    }\n}\n```\n\n<span class=\"caption\">Listing 16-10: Sending multiple messages and pausing\nbetween each</span>\n\nThis time, the spawned thread has a vector of strings that we want to send to\nthe main thread. We iterate over them, sending each individually, and pause\nbetween each by calling the `thread::sleep` function with a `Duration` value of\n1 second.\n\nIn the main thread, we’re not calling the `recv` function explicitly anymore:\ninstead, we’re treating `rx` as an iterator. For each value received, we’re\nprinting it. When the channel is closed, iteration will end.\n\nWhen running the code in Listing 16-10, you should see the following output\nwith a 1-second pause in between each line:\n\n<!-- Not extracting output because changes to this output aren\'t significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nGot: hi\nGot: from\nGot: the\nGot: thread\n```\n\nBecause we don’t have any code that pauses or delays in the `for` loop in the\nmain thread, we can tell that the main thread is waiting to receive values from\nthe spawned thread.\n\n### Creating Multiple Producers by Cloning the Transmitter\n\nEarlier we mentioned that `mpsc` was an acronym for *multiple producer,\nsingle consumer*. Let’s put `mpsc` to use and expand the code in Listing 16-10\nto create multiple threads that all send values to the same receiver. We can do\nso by cloning the transmitting half of the channel, as shown in Listing 16-11:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# use std::sync::mpsc;\n# use std::thread;\n# use std::time::Duration;\n# \n# fn main() {\n    // --snip--\n\n    let (tx, rx) = mpsc::channel();\n\n    let tx1 = mpsc::Sender::clone(&tx);\n    thread::spawn(move || {\n        let vals = vec![\n            String::from(\"hi\"),\n            String::from(\"from\"),\n            String::from(\"the\"),\n            String::from(\"thread\"),\n        ];\n\n        for val in vals {\n            tx1.send(val).unwrap();\n            thread::sleep(Duration::from_secs(1));\n        }\n    });\n\n    thread::spawn(move || {\n        let vals = vec![\n            String::from(\"more\"),\n            String::from(\"messages\"),\n            String::from(\"for\"),\n            String::from(\"you\"),\n        ];\n\n        for val in vals {\n            tx.send(val).unwrap();\n            thread::sleep(Duration::from_secs(1));\n        }\n    });\n\n    for received in rx {\n        println!(\"Got: {}\", received);\n    }\n\n    // --snip--\n# }\n```\n\n<span class=\"caption\">Listing 16-11: Sending multiple messages from multiple\nproducers</span>\n\nThis time, before we create the first spawned thread, we call `clone` on the\nsending end of the channel. This will give us a new sending handle we can pass\nto the first spawned thread. We pass the original sending end of the channel to\na second spawned thread. This gives us two threads, each sending different\nmessages to the receiving end of the channel.\n\nWhen you run the code, your output should look something like this:\n\n<!-- Not extracting output because changes to this output aren\'t significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nGot: hi\nGot: more\nGot: from\nGot: messages\nGot: for\nGot: the\nGot: thread\nGot: you\n```\n\nYou might see the values in another order; it depends on your system. This is\nwhat makes concurrency interesting as well as difficult. If you experiment with\n`thread::sleep`, giving it various values in the different threads, each run\nwill be more nondeterministic and create different output each time.\n\nNow that we’ve looked at how channels work, let’s look at a different method of\nconcurrency.\n", number: Some(SectionNumber([16, 2])), sub_items: [], path: "ch16-02-message-passing.md", parent_names: ["Fearless Concurrency"] }), Chapter(Chapter { name: "Shared-State Concurrency", content: "## Shared-State Concurrency\n\nMessage passing is a fine way of handling concurrency, but it’s not the only\none. Consider this part of the slogan from the Go language documentation again:\n“do not communicate by sharing memory.”\n\nWhat would communicating by sharing memory look like? In addition, why would\nmessage-passing enthusiasts not use it and do the opposite instead?\n\nIn a way, channels in any programming language are similar to single ownership,\nbecause once you transfer a value down a channel, you should no longer use that\nvalue. Shared memory concurrency is like multiple ownership: multiple threads\ncan access the same memory location at the same time. As you saw in Chapter 15,\nwhere smart pointers made multiple ownership possible, multiple ownership can\nadd complexity because these different owners need managing. Rust’s type system\nand ownership rules greatly assist in getting this management correct. For an\nexample, let’s look at mutexes, one of the more common concurrency primitives\nfor shared memory.\n\n### Using Mutexes to Allow Access to Data from One Thread at a Time\n\n*Mutex* is an abbreviation for *mutual exclusion*, as in, a mutex allows only\none thread to access some data at any given time. To access the data in a\nmutex, a thread must first signal that it wants access by asking to acquire the\nmutex’s *lock*. The lock is a data structure that is part of the mutex that\nkeeps track of who currently has exclusive access to the data. Therefore, the\nmutex is described as *guarding* the data it holds via the locking system.\n\nMutexes have a reputation for being difficult to use because you have to\nremember two rules:\n\n* You must attempt to acquire the lock before using the data.\n* When you’re done with the data that the mutex guards, you must unlock the\n  data so other threads can acquire the lock.\n\nFor a real-world metaphor for a mutex, imagine a panel discussion at a\nconference with only one microphone. Before a panelist can speak, they have to\nask or signal that they want to use the microphone. When they get the\nmicrophone, they can talk for as long as they want to and then hand the\nmicrophone to the next panelist who requests to speak. If a panelist forgets to\nhand the microphone off when they’re finished with it, no one else is able to\nspeak. If management of the shared microphone goes wrong, the panel won’t work\nas planned!\n\nManagement of mutexes can be incredibly tricky to get right, which is why so\nmany people are enthusiastic about channels. However, thanks to Rust’s type\nsystem and ownership rules, you can’t get locking and unlocking wrong.\n\n#### The API of `Mutex<T>`\n\nAs an example of how to use a mutex, let’s start by using a mutex in a\nsingle-threaded context, as shown in Listing 16-12:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::sync::Mutex;\n\nfn main() {\n    let m = Mutex::new(5);\n\n    {\n        let mut num = m.lock().unwrap();\n        *num = 6;\n    }\n\n    println!(\"m = {:?}\", m);\n}\n```\n\n<span class=\"caption\">Listing 16-12: Exploring the API of `Mutex<T>` in a\nsingle-threaded context for simplicity</span>\n\nAs with many types, we create a `Mutex<T>` using the associated function `new`.\nTo access the data inside the mutex, we use the `lock` method to acquire the\nlock. This call will block the current thread so it can’t do any work until\nit’s our turn to have the lock.\n\nThe call to `lock` would fail if another thread holding the lock panicked. In\nthat case, no one would ever be able to get the lock, so we’ve chosen to\n`unwrap` and have this thread panic if we’re in that situation.\n\nAfter we’ve acquired the lock, we can treat the return value, named `num` in\nthis case, as a mutable reference to the data inside. The type system ensures\nthat we acquire a lock before using the value in `m`: `Mutex<i32>` is not an\n`i32`, so we *must* acquire the lock to be able to use the `i32` value. We\ncan’t forget; the type system won’t let us access the inner `i32` otherwise.\n\nAs you might suspect, `Mutex<T>` is a smart pointer. More accurately, the call\nto `lock` *returns* a smart pointer called `MutexGuard`, wrapped in a\n`LockResult` that we handled with the call to `unwrap`. The `MutexGuard` smart\npointer implements `Deref` to point at our inner data; the smart pointer also\nhas a `Drop` implementation that releases the lock automatically when a\n`MutexGuard` goes out of scope, which happens at the end of the inner scope in\nListing 16-12. As a result, we don’t risk forgetting to release the lock and\nblocking the mutex from being used by other threads because the lock release\nhappens automatically.\n\nAfter dropping the lock, we can print the mutex value and see that we were able\nto change the inner `i32` to 6.\n\n#### Sharing a `Mutex<T>` Between Multiple Threads\n\nNow, let’s try to share a value between multiple threads using `Mutex<T>`.\nWe’ll spin up 10 threads and have them each increment a counter value by 1, so\nthe counter goes from 0 to 10. The next example in Listing 16-13 will have\na compiler error, and we’ll use that error to learn more about using\n`Mutex<T>` and how Rust helps us use it correctly.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nuse std::sync::Mutex;\nuse std::thread;\n\nfn main() {\n    let counter = Mutex::new(0);\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!(\"Result: {}\", *counter.lock().unwrap());\n}\n```\n\n<span class=\"caption\">Listing 16-13: Ten threads each increment a counter\nguarded by a `Mutex<T>`</span>\n\nWe create a `counter` variable to hold an `i32` inside a `Mutex<T>`, as we\ndid in Listing 16-12. Next, we create 10 threads by iterating over a range\nof numbers. We use `thread::spawn` and give all the threads the same closure,\none that moves the counter into the thread, acquires a lock on the `Mutex<T>`\nby calling the `lock` method, and then adds 1 to the value in the mutex. When a\nthread finishes running its closure, `num` will go out of scope and release the\nlock so another thread can acquire it.\n\nIn the main thread, we collect all the join handles. Then, as we did in Listing\n16-2, we call `join` on each handle to make sure all the threads finish. At\nthat point, the main thread will acquire the lock and print the result of this\nprogram.\n\nWe hinted that this example wouldn’t compile. Now let’s find out why!\n\n```text\n$ cargo run\n   Compiling shared-state v0.1.0 (file:///projects/shared-state)\nerror[E0382]: use of moved value: `counter`\n  --> src/main.rs:9:36\n   |\n5  |     let counter = Mutex::new(0);\n   |         ------- move occurs because `counter` has type `std::sync::Mutex<i32>`, which does not implement the `Copy` trait\n...\n9  |         let handle = thread::spawn(move || {\n   |                                    ^^^^^^^ value moved into closure here, in previous iteration of loop\n10 |             let mut num = counter.lock().unwrap();\n   |                           ------- use occurs due to use in closure\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `shared-state`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe error message states that the `counter` value was moved in the previous\niteration of the loop. So Rust is telling us that we can’t move the ownership\nof lock `counter` into multiple threads. Let’s fix the compiler error with a\nmultiple-ownership method we discussed in Chapter 15.\n\n#### Multiple Ownership with Multiple Threads\n\nIn Chapter 15, we gave a value multiple owners by using the smart pointer\n`Rc<T>` to create a reference counted value. Let’s do the same here and see\nwhat happens. We’ll wrap the `Mutex<T>` in `Rc<T>` in Listing 16-14 and clone\nthe `Rc<T>` before moving ownership to the thread. Now that we’ve seen the\nerrors, we’ll also switch back to using the `for` loop, and we’ll keep the\n`move` keyword with the closure.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nuse std::rc::Rc;\nuse std::sync::Mutex;\nuse std::thread;\n\nfn main() {\n    let counter = Rc::new(Mutex::new(0));\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let counter = Rc::clone(&counter);\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!(\"Result: {}\", *counter.lock().unwrap());\n}\n```\n\n<span class=\"caption\">Listing 16-14: Attempting to use `Rc<T>` to allow\nmultiple threads to own the `Mutex<T>`</span>\n\nOnce again, we compile and get... different errors! The compiler is teaching us\na lot.\n\n```text\n$ cargo run\n   Compiling shared-state v0.1.0 (file:///projects/shared-state)\nerror[E0277]: `std::rc::Rc<std::sync::Mutex<i32>>` cannot be sent between threads safely\n   --> src/main.rs:11:22\n    |\n11  |         let handle = thread::spawn(move || {\n    |                      ^^^^^^^^^^^^^ `std::rc::Rc<std::sync::Mutex<i32>>` cannot be sent between threads safely\n    |\n    = help: within `[closure@src/main.rs:11:36: 15:10 counter:std::rc::Rc<std::sync::Mutex<i32>>]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::sync::Mutex<i32>>`\n    = note: required because it appears within the type `[closure@src/main.rs:11:36: 15:10 counter:std::rc::Rc<std::sync::Mutex<i32>>]`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `shared-state`.\n\nTo learn more, run the command again with --verbose.\n```\n\nWow, that error message is very wordy! Here’s the important part to focus\non: `` `Rc<Mutex<i32>>` cannot be sent between threads safely ``. The compiler\nis also telling us the reason why: ``the trait `Send` is not implemented for\n`Rc<Mutex<i32>>` ``. We’ll talk about `Send` in the next section: it’s one of\nthe traits that ensures the types we use with threads are meant for use in\nconcurrent situations.\n\nUnfortunately, `Rc<T>` is not safe to share across threads. When `Rc<T>`\nmanages the reference count, it adds to the count for each call to `clone` and\nsubtracts from the count when each clone is dropped. But it doesn’t use any\nconcurrency primitives to make sure that changes to the count can’t be\ninterrupted by another thread. This could lead to wrong counts—subtle bugs that\ncould in turn lead to memory leaks or a value being dropped before we’re done\nwith it. What we need is a type exactly like `Rc<T>` but one that makes changes\nto the reference count in a thread-safe way.\n\n#### Atomic Reference Counting with `Arc<T>`\n\nFortunately, `Arc<T>` *is* a type like `Rc<T>` that is safe to use in\nconcurrent situations. The *a* stands for *atomic*, meaning it’s an *atomically\nreference counted* type. Atomics are an additional kind of concurrency\nprimitive that we won’t cover in detail here: see the standard library\ndocumentation for `std::sync::atomic` for more details. At this point, you just\nneed to know that atomics work like primitive types but are safe to share\nacross threads.\n\nYou might then wonder why all primitive types aren’t atomic and why standard\nlibrary types aren’t implemented to use `Arc<T>` by default. The reason is that\nthread safety comes with a performance penalty that you only want to pay when\nyou really need to. If you’re just performing operations on values within a\nsingle thread, your code can run faster if it doesn’t have to enforce the\nguarantees atomics provide.\n\nLet’s return to our example: `Arc<T>` and `Rc<T>` have the same API, so we fix\nour program by changing the `use` line, the call to `new`, and the call to\n`clone`. The code in Listing 16-15 will finally compile and run:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::sync::{Arc, Mutex};\nuse std::thread;\n\nfn main() {\n    let counter = Arc::new(Mutex::new(0));\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let counter = Arc::clone(&counter);\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!(\"Result: {}\", *counter.lock().unwrap());\n}\n```\n\n<span class=\"caption\">Listing 16-15: Using an `Arc<T>` to wrap the `Mutex<T>`\nto be able to share ownership across multiple threads</span>\n\nThis code will print the following:\n\n<!-- Not extracting output because changes to this output aren\'t significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nResult: 10\n```\n\nWe did it! We counted from 0 to 10, which may not seem very impressive, but it\ndid teach us a lot about `Mutex<T>` and thread safety. You could also use this\nprogram’s structure to do more complicated operations than just incrementing a\ncounter. Using this strategy, you can divide a calculation into independent\nparts, split those parts across threads, and then use a `Mutex<T>` to have each\nthread update the final result with its part.\n\n### Similarities Between `RefCell<T>`/`Rc<T>` and `Mutex<T>`/`Arc<T>`\n\nYou might have noticed that `counter` is immutable but we could get a mutable\nreference to the value inside it; this means `Mutex<T>` provides interior\nmutability, as the `Cell` family does. In the same way we used `RefCell<T>` in\nChapter 15 to allow us to mutate contents inside an `Rc<T>`, we use `Mutex<T>`\nto mutate contents inside an `Arc<T>`.\n\nAnother detail to note is that Rust can’t protect you from all kinds of logic\nerrors when you use `Mutex<T>`. Recall in Chapter 15 that using `Rc<T>` came\nwith the risk of creating reference cycles, where two `Rc<T>` values refer to\neach other, causing memory leaks. Similarly, `Mutex<T>` comes with the risk of\ncreating *deadlocks*. These occur when an operation needs to lock two resources\nand two threads have each acquired one of the locks, causing them to wait for\neach other forever. If you’re interested in deadlocks, try creating a Rust\nprogram that has a deadlock; then research deadlock mitigation strategies for\nmutexes in any language and have a go at implementing them in Rust. The\nstandard library API documentation for `Mutex<T>` and `MutexGuard` offers\nuseful information.\n\nWe’ll round out this chapter by talking about the `Send` and `Sync` traits and\nhow we can use them with custom types.\n", number: Some(SectionNumber([16, 3])), sub_items: [], path: "ch16-03-shared-state.md", parent_names: ["Fearless Concurrency"] }), Chapter(Chapter { name: "Extensible Concurrency with the Sync and Send Traits", content: "## Extensible Concurrency with the `Sync` and `Send` Traits\n\nInterestingly, the Rust language has *very* few concurrency features. Almost\nevery concurrency feature we’ve talked about so far in this chapter has been\npart of the standard library, not the language. Your options for handling\nconcurrency are not limited to the language or the standard library; you can\nwrite your own concurrency features or use those written by others.\n\nHowever, two concurrency concepts are embedded in the language: the\n`std::marker` traits `Sync` and `Send`.\n\n### Allowing Transference of Ownership Between Threads with `Send`\n\nThe `Send` marker trait indicates that ownership of the type implementing\n`Send` can be transferred between threads. Almost every Rust type is `Send`,\nbut there are some exceptions, including `Rc<T>`: this cannot be `Send` because\nif you cloned an `Rc<T>` value and tried to transfer ownership of the clone to\nanother thread, both threads might update the reference count at the same time.\nFor this reason, `Rc<T>` is implemented for use in single-threaded situations\nwhere you don’t want to pay the thread-safe performance penalty.\n\nTherefore, Rust’s type system and trait bounds ensure that you can never\naccidentally send an `Rc<T>` value across threads unsafely. When we tried to do\nthis in Listing 16-14, we got the error `the trait Send is not implemented for\nRc<Mutex<i32>>`. When we switched to `Arc<T>`, which is `Send`, the code\ncompiled.\n\nAny type composed entirely of `Send` types is automatically marked as `Send` as\nwell. Almost all primitive types are `Send`, aside from raw pointers, which\nwe’ll discuss in Chapter 19.\n\n### Allowing Access from Multiple Threads with `Sync`\n\nThe `Sync` marker trait indicates that it is safe for the type implementing\n`Sync` to be referenced from multiple threads. In other words, any type `T` is\n`Sync` if `&T` (a reference to `T`) is `Send`, meaning the reference can be\nsent safely to another thread. Similar to `Send`, primitive types are `Sync`,\nand types composed entirely of types that are `Sync` are also `Sync`.\n\nThe smart pointer `Rc<T>` is also not `Sync` for the same reasons that it’s not\n`Send`. The `RefCell<T>` type (which we talked about in Chapter 15) and the\nfamily of related `Cell<T>` types are not `Sync`. The implementation of borrow\nchecking that `RefCell<T>` does at runtime is not thread-safe. The smart\npointer `Mutex<T>` is `Sync` and can be used to share access with multiple\nthreads as you saw in the [“Sharing a `Mutex<T>` Between Multiple\nThreads”][sharing-a-mutext-between-multiple-threads]<!-- ignore --> section.\n\n### Implementing `Send` and `Sync` Manually Is Unsafe\n\nBecause types that are made up of `Send` and `Sync` traits are automatically\nalso `Send` and `Sync`, we don’t have to implement those traits manually. As\nmarker traits, they don’t even have any methods to implement. They’re just\nuseful for enforcing invariants related to concurrency.\n\nManually implementing these traits involves implementing unsafe Rust code.\nWe’ll talk about using unsafe Rust code in Chapter 19; for now, the important\ninformation is that building new concurrent types not made up of `Send` and\n`Sync` parts requires careful thought to uphold the safety guarantees. [“The\nRustonomicon”][nomicon] has more information about these guarantees and how to\nuphold them.\n\n## Summary\n\nThis isn’t the last you’ll see of concurrency in this book: the project in\nChapter 20 will use the concepts in this chapter in a more realistic situation\nthan the smaller examples discussed here.\n\nAs mentioned earlier, because very little of how Rust handles concurrency is\npart of the language, many concurrency solutions are implemented as crates.\nThese evolve more quickly than the standard library, so be sure to search\nonline for the current, state-of-the-art crates to use in multithreaded\nsituations.\n\nThe Rust standard library provides channels for message passing and smart\npointer types, such as `Mutex<T>` and `Arc<T>`, that are safe to use in\nconcurrent contexts. The type system and the borrow checker ensure that the\ncode using these solutions won’t end up with data races or invalid references.\nOnce you get your code to compile, you can rest assured that it will happily\nrun on multiple threads without the kinds of hard-to-track-down bugs common in\nother languages. Concurrent programming is no longer a concept to be afraid of:\ngo forth and make your programs concurrent, fearlessly!\n\nNext, we’ll talk about idiomatic ways to model problems and structure solutions\nas your Rust programs get bigger. In addition, we’ll discuss how Rust’s idioms\nrelate to those you might be familiar with from object-oriented programming.\n\n[sharing-a-mutext-between-multiple-threads]:\nch16-03-shared-state.html#sharing-a-mutext-between-multiple-threads\n[nomicon]: ../nomicon/index.html\n", number: Some(SectionNumber([16, 4])), sub_items: [], path: "ch16-04-extensible-concurrency-sync-and-send.md", parent_names: ["Fearless Concurrency"] })], path: "ch16-00-concurrency.md", parent_names: [] }), Chapter(Chapter { name: "Object Oriented Programming Features of Rust", content: "# Object Oriented Programming Features of Rust\n\nObject-oriented programming (OOP) is a way of modeling programs. Objects came\nfrom Simula in the 1960s. Those objects influenced Alan Kay’s programming\narchitecture in which objects pass messages to each other. He coined the term\n*object-oriented programming* in 1967 to describe this architecture. Many\ncompeting definitions describe what OOP is; some definitions would classify\nRust as object oriented, but other definitions would not. In this chapter,\nwe’ll explore certain characteristics that are commonly considered object\noriented and how those characteristics translate to idiomatic Rust. We’ll then\nshow you how to implement an object-oriented design pattern in Rust and discuss\nthe trade-offs of doing so versus implementing a solution using some of Rust’s\nstrengths instead.\n", number: Some(SectionNumber([17])), sub_items: [Chapter(Chapter { name: "Characteristics of Object-Oriented Languages", content: "## Characteristics of Object-Oriented Languages\n\nThere is no consensus in the programming community about what features a\nlanguage must have to be considered object oriented. Rust is influenced by many\nprogramming paradigms, including OOP; for example, we explored the features\nthat came from functional programming in Chapter 13. Arguably, OOP languages\nshare certain common characteristics, namely objects, encapsulation, and\ninheritance. Let’s look at what each of those characteristics means and whether\nRust supports it.\n\n### Objects Contain Data and Behavior\n\nThe book *Design Patterns: Elements of Reusable Object-Oriented Software* by\nErich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison-Wesley\nProfessional, 1994) colloquially referred to as *The Gang of Four* book, is a\ncatalog of object-oriented design patterns. It defines OOP this way:\n\n> Object-oriented programs are made up of objects. An *object* packages both\n> data and the procedures that operate on that data. The procedures are\n> typically called *methods* or *operations*.\n\nUsing this definition, Rust is object oriented: structs and enums have data,\nand `impl` blocks provide methods on structs and enums. Even though structs and\nenums with methods aren’t *called* objects, they provide the same\nfunctionality, according to the Gang of Four’s definition of objects.\n\n### Encapsulation that Hides Implementation Details\n\nAnother aspect commonly associated with OOP is the idea of *encapsulation*,\nwhich means that the implementation details of an object aren’t accessible to\ncode using that object. Therefore, the only way to interact with an object is\nthrough its public API; code using the object shouldn’t be able to reach into\nthe object’s internals and change data or behavior directly. This enables the\nprogrammer to change and refactor an object’s internals without needing to\nchange the code that uses the object.\n\nWe discussed how to control encapsulation in Chapter 7: we can use the `pub`\nkeyword to decide which modules, types, functions, and methods in our code\nshould be public, and by default everything else is private. For example, we\ncan define a struct `AveragedCollection` that has a field containing a vector\nof `i32` values. The struct can also have a field that contains the average of\nthe values in the vector, meaning the average doesn’t have to be computed\non demand whenever anyone needs it. In other words, `AveragedCollection` will\ncache the calculated average for us. Listing 17-1 has the definition of the\n`AveragedCollection` struct:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub struct AveragedCollection {\n    list: Vec<i32>,\n    average: f64,\n}\n```\n\n<span class=\"caption\">Listing 17-1: An `AveragedCollection` struct that\nmaintains a list of integers and the average of the items in the\ncollection</span>\n\nThe struct is marked `pub` so that other code can use it, but the fields within\nthe struct remain private. This is important in this case because we want to\nensure that whenever a value is added or removed from the list, the average is\nalso updated. We do this by implementing `add`, `remove`, and `average` methods\non the struct, as shown in Listing 17-2:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub struct AveragedCollection {\n#     list: Vec<i32>,\n#     average: f64,\n# }\n# \nimpl AveragedCollection {\n    pub fn add(&mut self, value: i32) {\n        self.list.push(value);\n        self.update_average();\n    }\n\n    pub fn remove(&mut self) -> Option<i32> {\n        let result = self.list.pop();\n        match result {\n            Some(value) => {\n                self.update_average();\n                Some(value)\n            }\n            None => None,\n        }\n    }\n\n    pub fn average(&self) -> f64 {\n        self.average\n    }\n\n    fn update_average(&mut self) {\n        let total: i32 = self.list.iter().sum();\n        self.average = total as f64 / self.list.len() as f64;\n    }\n}\n```\n\n<span class=\"caption\">Listing 17-2: Implementations of the public methods\n`add`, `remove`, and `average` on `AveragedCollection`</span>\n\nThe public methods `add`, `remove`, and `average` are the only ways to access\nor modify data in an instance of `AveragedCollection`. When an item is added\nto `list` using the `add` method or removed using the `remove` method, the\nimplementations of each call the private `update_average` method that handles\nupdating the `average` field as well.\n\nWe leave the `list` and `average` fields private so there is no way for\nexternal code to add or remove items to the `list` field directly; otherwise,\nthe `average` field might become out of sync when the `list` changes. The\n`average` method returns the value in the `average` field, allowing external\ncode to read the `average` but not modify it.\n\nBecause we’ve encapsulated the implementation details of the struct\n`AveragedCollection`, we can easily change aspects, such as the data structure,\nin the future. For instance, we could use a `HashSet<i32>` instead of a\n`Vec<i32>` for the `list` field. As long as the signatures of the `add`,\n`remove`, and `average` public methods stay the same, code using\n`AveragedCollection` wouldn’t need to change. If we made `list` public instead,\nthis wouldn’t necessarily be the case: `HashSet<i32>` and `Vec<i32>` have\ndifferent methods for adding and removing items, so the external code would\nlikely have to change if it were modifying `list` directly.\n\nIf encapsulation is a required aspect for a language to be considered object\noriented, then Rust meets that requirement. The option to use `pub` or not for\ndifferent parts of code enables encapsulation of implementation details.\n\n### Inheritance as a Type System and as Code Sharing\n\n*Inheritance* is a mechanism whereby an object can inherit from another\nobject’s definition, thus gaining the parent object’s data and behavior without\nyou having to define them again.\n\nIf a language must have inheritance to be an object-oriented language, then\nRust is not one. There is no way to define a struct that inherits the parent\nstruct’s fields and method implementations. However, if you’re used to having\ninheritance in your programming toolbox, you can use other solutions in Rust,\ndepending on your reason for reaching for inheritance in the first place.\n\nYou choose inheritance for two main reasons. One is for reuse of code: you can\nimplement particular behavior for one type, and inheritance enables you to\nreuse that implementation for a different type. You can share Rust code using\ndefault trait method implementations instead, which you saw in Listing 10-14\nwhen we added a default implementation of the `summarize` method on the\n`Summary` trait. Any type implementing the `Summary` trait would have the\n`summarize` method available on it without any further code. This is similar to\na parent class having an implementation of a method and an inheriting child\nclass also having the implementation of the method. We can also override the\ndefault implementation of the `summarize` method when we implement the\n`Summary` trait, which is similar to a child class overriding the\nimplementation of a method inherited from a parent class.\n\nThe other reason to use inheritance relates to the type system: to enable a\nchild type to be used in the same places as the parent type. This is also\ncalled *polymorphism*, which means that you can substitute multiple objects for\neach other at runtime if they share certain characteristics.\n\n> ### Polymorphism\n>\n> To many people, polymorphism is synonymous with inheritance. But it’s\n> actually a more general concept that refers to code that can work with data\n> of multiple types. For inheritance, those types are generally subclasses.\n>\n> Rust instead uses generics to abstract over different possible types and\n> trait bounds to impose constraints on what those types must provide. This is\n> sometimes called *bounded parametric polymorphism*.\n\nInheritance has recently fallen out of favor as a programming design solution\nin many programming languages because it’s often at risk of sharing more code\nthan necessary. Subclasses shouldn’t always share all characteristics of their\nparent class but will do so with inheritance. This can make a program’s design\nless flexible. It also introduces the possibility of calling methods on\nsubclasses that don’t make sense or that cause errors because the methods don’t\napply to the subclass. In addition, some languages will only allow a subclass\nto inherit from one class, further restricting the flexibility of a program’s\ndesign.\n\nFor these reasons, Rust takes a different approach, using trait objects instead\nof inheritance. Let’s look at how trait objects enable polymorphism in Rust.\n", number: Some(SectionNumber([17, 1])), sub_items: [], path: "ch17-01-what-is-oo.md", parent_names: ["Object Oriented Programming Features of Rust"] }), Chapter(Chapter { name: "Using Trait Objects That Allow for Values of Different Types", content: "## Using Trait Objects That Allow for Values of Different Types\n\nIn Chapter 8, we mentioned that one limitation of vectors is that they can\nstore elements of only one type. We created a workaround in Listing 8-10 where\nwe defined a `SpreadsheetCell` enum that had variants to hold integers, floats,\nand text. This meant we could store different types of data in each cell and\nstill have a vector that represented a row of cells. This is a perfectly good\nsolution when our interchangeable items are a fixed set of types that we know\nwhen our code is compiled.\n\nHowever, sometimes we want our library user to be able to extend the set of\ntypes that are valid in a particular situation. To show how we might achieve\nthis, we’ll create an example graphical user interface (GUI) tool that iterates\nthrough a list of items, calling a `draw` method on each one to draw it to the\nscreen—a common technique for GUI tools. We’ll create a library crate called\n`gui` that contains the structure of a GUI library. This crate might include\nsome types for people to use, such as `Button` or `TextField`. In addition,\n`gui` users will want to create their own types that can be drawn: for\ninstance, one programmer might add an `Image` and another might add a\n`SelectBox`.\n\nWe won’t implement a fully fledged GUI library for this example but will show\nhow the pieces would fit together. At the time of writing the library, we can’t\nknow and define all the types other programmers might want to create. But we do\nknow that `gui` needs to keep track of many values of different types, and it\nneeds to call a `draw` method on each of these differently typed values. It\ndoesn’t need to know exactly what will happen when we call the `draw` method,\njust that the value will have that method available for us to call.\n\nTo do this in a language with inheritance, we might define a class named\n`Component` that has a method named `draw` on it. The other classes, such as\n`Button`, `Image`, and `SelectBox`, would inherit from `Component` and thus\ninherit the `draw` method. They could each override the `draw` method to define\ntheir custom behavior, but the framework could treat all of the types as if\nthey were `Component` instances and call `draw` on them. But because Rust\ndoesn’t have inheritance, we need another way to structure the `gui` library to\nallow users to extend it with new types.\n\n### Defining a Trait for Common Behavior\n\nTo implement the behavior we want `gui` to have, we’ll define a trait named\n`Draw` that will have one method named `draw`. Then we can define a vector that\ntakes a *trait object*. A trait object points to both an instance of a type\nimplementing our specified trait as well as a table used to look up trait\nmethods on that type at runtime. We create a trait object by specifying some\nsort of pointer, such as a `&` reference or a `Box<T>` smart pointer, then the\n`dyn` keyword, and then specifying the relevant trait. (We’ll talk about the\nreason trait objects must use a pointer in Chapter 19 in the section\n[“Dynamically Sized Types and the `Sized` Trait.”][dynamically-sized]<!--\nignore -->) We can use trait objects in place of a generic or concrete type.\nWherever we use a trait object, Rust’s type system will ensure at compile time\nthat any value used in that context will implement the trait object’s trait.\nConsequently, we don’t need to know all the possible types at compile time.\n\nWe’ve mentioned that in Rust, we refrain from calling structs and enums\n“objects” to distinguish them from other languages’ objects. In a struct or\nenum, the data in the struct fields and the behavior in `impl` blocks are\nseparated, whereas in other languages, the data and behavior combined into one\nconcept is often labeled an object. However, trait objects *are* more like\nobjects in other languages in the sense that they combine data and behavior.\nBut trait objects differ from traditional objects in that we can’t add data to\na trait object. Trait objects aren’t as generally useful as objects in other\nlanguages: their specific purpose is to allow abstraction across common\nbehavior.\n\nListing 17-3 shows how to define a trait named `Draw` with one method named\n`draw`:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub trait Draw {\n    fn draw(&self);\n}\n```\n\n<span class=\"caption\">Listing 17-3: Definition of the `Draw` trait</span>\n\nThis syntax should look familiar from our discussions on how to define traits\nin Chapter 10. Next comes some new syntax: Listing 17-4 defines a struct named\n`Screen` that holds a vector named `components`. This vector is of type\n`Box<dyn Draw>`, which is a trait object; it’s a stand-in for any type inside\na `Box` that implements the `Draw` trait.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub trait Draw {\n#     fn draw(&self);\n# }\n# \npub struct Screen {\n    pub components: Vec<Box<dyn Draw>>,\n}\n```\n\n<span class=\"caption\">Listing 17-4: Definition of the `Screen` struct with a\n`components` field holding a vector of trait objects that implement the `Draw`\ntrait</span>\n\nOn the `Screen` struct, we’ll define a method named `run` that will call the\n`draw` method on each of its `components`, as shown in Listing 17-5:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub trait Draw {\n#     fn draw(&self);\n# }\n# \n# pub struct Screen {\n#     pub components: Vec<Box<dyn Draw>>,\n# }\n# \nimpl Screen {\n    pub fn run(&self) {\n        for component in self.components.iter() {\n            component.draw();\n        }\n    }\n}\n```\n\n<span class=\"caption\">Listing 17-5: A `run` method on `Screen` that calls the\n`draw` method on each component</span>\n\nThis works differently from defining a struct that uses a generic type\nparameter with trait bounds. A generic type parameter can only be substituted\nwith one concrete type at a time, whereas trait objects allow for multiple\nconcrete types to fill in for the trait object at runtime. For example, we\ncould have defined the `Screen` struct using a generic type and a trait bound\nas in Listing 17-6:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub trait Draw {\n#     fn draw(&self);\n# }\n# \npub struct Screen<T: Draw> {\n    pub components: Vec<T>,\n}\n\nimpl<T> Screen<T>\nwhere\n    T: Draw,\n{\n    pub fn run(&self) {\n        for component in self.components.iter() {\n            component.draw();\n        }\n    }\n}\n```\n\n<span class=\"caption\">Listing 17-6: An alternate implementation of the `Screen`\nstruct and its `run` method using generics and trait bounds</span>\n\nThis restricts us to a `Screen` instance that has a list of components all of\ntype `Button` or all of type `TextField`. If you’ll only ever have homogeneous\ncollections, using generics and trait bounds is preferable because the\ndefinitions will be monomorphized at compile time to use the concrete types.\n\nOn the other hand, with the method using trait objects, one `Screen` instance\ncan hold a `Vec<T>` that contains a `Box<Button>` as well as a\n`Box<TextField>`. Let’s look at how this works, and then we’ll talk about the\nruntime performance implications.\n\n### Implementing the Trait\n\nNow we’ll add some types that implement the `Draw` trait. We’ll provide the\n`Button` type. Again, actually implementing a GUI library is beyond the scope\nof this book, so the `draw` method won’t have any useful implementation in its\nbody. To imagine what the implementation might look like, a `Button` struct\nmight have fields for `width`, `height`, and `label`, as shown in Listing 17-7:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub trait Draw {\n#     fn draw(&self);\n# }\n# \n# pub struct Screen {\n#     pub components: Vec<Box<dyn Draw>>,\n# }\n# \n# impl Screen {\n#     pub fn run(&self) {\n#         for component in self.components.iter() {\n#             component.draw();\n#         }\n#     }\n# }\n# \npub struct Button {\n    pub width: u32,\n    pub height: u32,\n    pub label: String,\n}\n\nimpl Draw for Button {\n    fn draw(&self) {\n        // code to actually draw a button\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 17-7: A `Button` struct that implements the\n`Draw` trait</span>\n\nThe `width`, `height`, and `label` fields on `Button` will differ from the\nfields on other components, such as a `TextField` type, that might have those\nfields plus a `placeholder` field instead. Each of the types we want to draw on\nthe screen will implement the `Draw` trait but will use different code in the\n`draw` method to define how to draw that particular type, as `Button` has here\n(without the actual GUI code, which is beyond the scope of this chapter). The\n`Button` type, for instance, might have an additional `impl` block containing\nmethods related to what happens when a user clicks the button. These kinds of\nmethods won’t apply to types like `TextField`.\n\nIf someone using our library decides to implement a `SelectBox` struct that has\n`width`, `height`, and `options` fields, they implement the `Draw` trait on the\n`SelectBox` type as well, as shown in Listing 17-8:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\nuse gui::Draw;\n\nstruct SelectBox {\n    width: u32,\n    height: u32,\n    options: Vec<String>,\n}\n\nimpl Draw for SelectBox {\n    fn draw(&self) {\n        // code to actually draw a select box\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 17-8: Another crate using `gui` and implementing\nthe `Draw` trait on a `SelectBox` struct</span>\n\nOur library’s user can now write their `main` function to create a `Screen`\ninstance. To the `Screen` instance, they can add a `SelectBox` and a `Button`\nby putting each in a `Box<T>` to become a trait object. They can then call the\n`run` method on the `Screen` instance, which will call `draw` on each of the\ncomponents. Listing 17-9 shows this implementation:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use gui::Draw;\n# \n# struct SelectBox {\n#     width: u32,\n#     height: u32,\n#     options: Vec<String>,\n# }\n# \n# impl Draw for SelectBox {\n#     fn draw(&self) {\n#         // code to actually draw a select box\n#     }\n# }\n# \nuse gui::{Button, Screen};\n\nfn main() {\n    let screen = Screen {\n        components: vec![\n            Box::new(SelectBox {\n                width: 75,\n                height: 10,\n                options: vec![\n                    String::from(\"Yes\"),\n                    String::from(\"Maybe\"),\n                    String::from(\"No\"),\n                ],\n            }),\n            Box::new(Button {\n                width: 50,\n                height: 10,\n                label: String::from(\"OK\"),\n            }),\n        ],\n    };\n\n    screen.run();\n}\n```\n\n<span class=\"caption\">Listing 17-9: Using trait objects to store values of\ndifferent types that implement the same trait</span>\n\nWhen we wrote the library, we didn’t know that someone might add the\n`SelectBox` type, but our `Screen` implementation was able to operate on the\nnew type and draw it because `SelectBox` implements the `Draw` trait, which\nmeans it implements the `draw` method.\n\nThis concept—of being concerned only with the messages a value responds to\nrather than the value’s concrete type—is similar to the concept of *duck\ntyping* in dynamically typed languages: if it walks like a duck and quacks\nlike a duck, then it must be a duck! In the implementation of `run` on `Screen`\nin Listing 17-5, `run` doesn’t need to know what the concrete type of each\ncomponent is. It doesn’t check whether a component is an instance of a `Button`\nor a `SelectBox`, it just calls the `draw` method on the component. By\nspecifying `Box<dyn Draw>` as the type of the values in the `components`\nvector, we’ve defined `Screen` to need values that we can call the `draw`\nmethod on.\n\nThe advantage of using trait objects and Rust’s type system to write code\nsimilar to code using duck typing is that we never have to check whether a\nvalue implements a particular method at runtime or worry about getting errors\nif a value doesn’t implement a method but we call it anyway. Rust won’t compile\nour code if the values don’t implement the traits that the trait objects need.\n\nFor example, Listing 17-10 shows what happens if we try to create a `Screen`\nwith a `String` as a component:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nuse gui::Screen;\n\nfn main() {\n    let screen = Screen {\n        components: vec![Box::new(String::from(\"Hi\"))],\n    };\n\n    screen.run();\n}\n```\n\n<span class=\"caption\">Listing 17-10: Attempting to use a type that doesn’t\nimplement the trait object’s trait</span>\n\nWe’ll get this error because `String` doesn’t implement the `Draw` trait:\n\n```text\n$ cargo run\n   Compiling gui v0.1.0 (file:///projects/gui)\nerror[E0277]: the trait bound `std::string::String: gui::Draw` is not satisfied\n --> src/main.rs:5:26\n  |\n5 |         components: vec![Box::new(String::from(\"Hi\"))],\n  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `gui::Draw` is not implemented for `std::string::String`\n  |\n  = note: required for the cast to the object type `dyn gui::Draw`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `gui`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThis error lets us know that either we’re passing something to `Screen` we\ndidn’t mean to pass and we should pass a different type or we should implement\n`Draw` on `String` so that `Screen` is able to call `draw` on it.\n\n### Trait Objects Perform Dynamic Dispatch\n\nRecall in the [“Performance of Code Using\nGenerics”][performance-of-code-using-generics]<!-- ignore --> section in\nChapter 10 our discussion on the monomorphization process performed by the\ncompiler when we use trait bounds on generics: the compiler generates\nnongeneric implementations of functions and methods for each concrete type\nthat we use in place of a generic type parameter. The code that results from\nmonomorphization is doing *static dispatch*, which is when the compiler knows\nwhat method you’re calling at compile time. This is opposed to *dynamic\ndispatch*, which is when the compiler can’t tell at compile time which method\nyou’re calling. In dynamic dispatch cases, the compiler emits code that at\nruntime will figure out which method to call.\n\nWhen we use trait objects, Rust must use dynamic dispatch. The compiler doesn’t\nknow all the types that might be used with the code that is using trait\nobjects, so it doesn’t know which method implemented on which type to call.\nInstead, at runtime, Rust uses the pointers inside the trait object to know\nwhich method to call. There is a runtime cost when this lookup happens that\ndoesn’t occur with static dispatch. Dynamic dispatch also prevents the compiler\nfrom choosing to inline a method’s code, which in turn prevents some\noptimizations. However, we did get extra flexibility in the code that we wrote\nin Listing 17-5 and were able to support in Listing 17-9, so it’s a trade-off\nto consider.\n\n### Object Safety Is Required for Trait Objects\n\nYou can only make *object-safe* traits into trait objects. Some complex rules\ngovern all the properties that make a trait object safe, but in practice, only\ntwo rules are relevant. A trait is object safe if all the methods defined in\nthe trait have the following properties:\n\n* The return type isn’t `Self`.\n* There are no generic type parameters.\n\nThe `Self` keyword is an alias for the type we’re implementing the traits or\nmethods on. Trait objects must be object safe because once you’ve used a trait\nobject, Rust no longer knows the concrete type that’s implementing that trait.\nIf a trait method returns the concrete `Self` type, but a trait object forgets\nthe exact type that `Self` is, there is no way the method can use the original\nconcrete type. The same is true of generic type parameters that are filled in\nwith concrete type parameters when the trait is used: the concrete types become\npart of the type that implements the trait. When the type is forgotten through\nthe use of a trait object, there is no way to know what types to fill in the\ngeneric type parameters with.\n\nAn example of a trait whose methods are not object safe is the standard\nlibrary’s `Clone` trait. The signature for the `clone` method in the `Clone`\ntrait looks like this:\n\n```rust\npub trait Clone {\n    fn clone(&self) -> Self;\n}\n```\n\nThe `String` type implements the `Clone` trait, and when we call the `clone`\nmethod on an instance of `String` we get back an instance of `String`.\nSimilarly, if we call `clone` on an instance of `Vec<T>`, we get back an\ninstance of `Vec<T>`. The signature of `clone` needs to know what type will\nstand in for `Self`, because that’s the return type.\n\nThe compiler will indicate when you’re trying to do something that violates the\nrules of object safety in regard to trait objects. For example, let’s say we\ntried to implement the `Screen` struct in Listing 17-4 to hold types that\nimplement the `Clone` trait instead of the `Draw` trait, like this:\n\n```rust,ignore,does_not_compile\npub struct Screen {\n    pub components: Vec<Box<dyn Clone>>,\n}\n```\n\nWe would get this error:\n\n```text\n$ cargo build\n   Compiling gui v0.1.0 (file:///projects/gui)\nerror[E0038]: the trait `std::clone::Clone` cannot be made into an object\n --> src/lib.rs:2:5\n  |\n2 |     pub components: Vec<Box<dyn Clone>>,\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` cannot be made into an object\n  |\n  = note: the trait cannot require that `Self : Sized`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0038`.\nerror: could not compile `gui`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThis error means you can’t use this trait as a trait object in this way. If\nyou’re interested in more details on object safety, see [Rust RFC 255].\n\n[Rust RFC 255]: https://github.com/rust-lang/rfcs/blob/master/text/0255-object-safety.md\n\n[performance-of-code-using-generics]:\nch10-01-syntax.html#performance-of-code-using-generics\n[dynamically-sized]: ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\n", number: Some(SectionNumber([17, 2])), sub_items: [], path: "ch17-02-trait-objects.md", parent_names: ["Object Oriented Programming Features of Rust"] }), Chapter(Chapter { name: "Implementing an Object-Oriented Design Pattern", content: "## Implementing an Object-Oriented Design Pattern\n\nThe *state pattern* is an object-oriented design pattern. The crux of the\npattern is that a value has some internal state, which is represented by a set\nof *state objects*, and the value’s behavior changes based on the internal\nstate. The state objects share functionality: in Rust, of course, we use\nstructs and traits rather than objects and inheritance. Each state object is\nresponsible for its own behavior and for governing when it should change into\nanother state. The value that holds a state object knows nothing about the\ndifferent behavior of the states or when to transition between states.\n\nUsing the state pattern means when the business requirements of the program\nchange, we won’t need to change the code of the value holding the state or the\ncode that uses the value. We’ll only need to update the code inside one of the\nstate objects to change its rules or perhaps add more state objects. Let’s look\nat an example of the state design pattern and how to use it in Rust.\n\nWe’ll implement a blog post workflow in an incremental way. The blog’s final\nfunctionality will look like this:\n\n1. A blog post starts as an empty draft.\n2. When the draft is done, a review of the post is requested.\n3. When the post is approved, it gets published.\n4. Only published blog posts return content to print, so unapproved posts can’t\n   accidentally be published.\n\nAny other changes attempted on a post should have no effect. For example, if we\ntry to approve a draft blog post before we’ve requested a review, the post\nshould remain an unpublished draft.\n\nListing 17-11 shows this workflow in code form: this is an example usage of the\nAPI we’ll implement in a library crate named `blog`. This won’t compile yet\nbecause we haven’t implemented the `blog` crate yet.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nuse blog::Post;\n\nfn main() {\n    let mut post = Post::new();\n\n    post.add_text(\"I ate a salad for lunch today\");\n    assert_eq!(\"\", post.content());\n\n    post.request_review();\n    assert_eq!(\"\", post.content());\n\n    post.approve();\n    assert_eq!(\"I ate a salad for lunch today\", post.content());\n}\n```\n\n<span class=\"caption\">Listing 17-11: Code that demonstrates the desired\nbehavior we want our `blog` crate to have</span>\n\nWe want to allow the user to create a new draft blog post with `Post::new`.\nThen we want to allow text to be added to the blog post while it’s in the draft\nstate. If we try to get the post’s content immediately, before approval,\nnothing should happen because the post is still a draft. We’ve added\n`assert_eq!` in the code for demonstration purposes. An excellent unit test for\nthis would be to assert that a draft blog post returns an empty string from the\n`content` method, but we’re not going to write tests for this example.\n\nNext, we want to enable a request for a review of the post, and we want\n`content` to return an empty string while waiting for the review. When the post\nreceives approval, it should get published, meaning the text of the post will\nbe returned when `content` is called.\n\nNotice that the only type we’re interacting with from the crate is the `Post`\ntype. This type will use the state pattern and will hold a value that will be\none of three state objects representing the various states a post can be\nin—draft, waiting for review, or published. Changing from one state to another\nwill be managed internally within the `Post` type. The states change in\nresponse to the methods called by our library’s users on the `Post` instance,\nbut they don’t have to manage the state changes directly. Also, users can’t\nmake a mistake with the states, like publishing a post before it’s reviewed.\n\n### Defining `Post` and Creating a New Instance in the Draft State\n\nLet’s get started on the implementation of the library! We know we need a\npublic `Post` struct that holds some content, so we’ll start with the\ndefinition of the struct and an associated public `new` function to create an\ninstance of `Post`, as shown in Listing 17-12. We’ll also make a private\n`State` trait. Then `Post` will hold a trait object of `Box<dyn State>`\ninside an `Option<T>` in a private field named `state`. You’ll see why the\n`Option<T>` is necessary in a bit.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n}\n\ntrait State {}\n\nstruct Draft {}\n\nimpl State for Draft {}\n```\n\n<span class=\"caption\">Listing 17-12: Definition of a `Post` struct and a `new`\nfunction that creates a new `Post` instance, a `State` trait, and a `Draft`\nstruct</span>\n\nThe `State` trait defines the behavior shared by different post states, and the\n`Draft`, `PendingReview`, and `Published` states will all implement the `State`\ntrait. For now, the trait doesn’t have any methods, and we’ll start by defining\njust the `Draft` state because that is the state we want a post to start in.\n\nWhen we create a new `Post`, we set its `state` field to a `Some` value that\nholds a `Box`. This `Box` points to a new instance of the `Draft` struct. This\nensures whenever we create a new instance of `Post`, it will start out as a\ndraft. Because the `state` field of `Post` is private, there is no way to\ncreate a `Post` in any other state! In the `Post::new` function, we set the\n`content` field to a new, empty `String`.\n\n### Storing the Text of the Post Content\n\nListing 17-11 showed that we want to be able to call a method named\n`add_text` and pass it a `&str` that is then added to the text content of the\nblog post. We implement this as a method rather than exposing the `content`\nfield as `pub`. This means we can implement a method later that will control\nhow the `content` field’s data is read. The `add_text` method is pretty\nstraightforward, so let’s add the implementation in Listing 17-13 to the `impl\nPost` block:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub struct Post {\n#     state: Option<Box<dyn State>>,\n#     content: String,\n# }\n# \nimpl Post {\n    // --snip--\n#     pub fn new() -> Post {\n#         Post {\n#             state: Some(Box::new(Draft {})),\n#             content: String::new(),\n#         }\n#     }\n# \n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n}\n# \n# trait State {}\n# \n# struct Draft {}\n# \n# impl State for Draft {}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 17-13: Implementing the `add_text` method to add\ntext to a post’s `content`</span>\n\nThe `add_text` method takes a mutable reference to `self`, because we’re\nchanging the `Post` instance that we’re calling `add_text` on. We then call\n`push_str` on the `String` in `content` and pass the `text` argument to add to\nthe saved `content`. This behavior doesn’t depend on the state the post is in,\nso it’s not part of the state pattern. The `add_text` method doesn’t interact\nwith the `state` field at all, but it is part of the behavior we want to\nsupport.\n\n### Ensuring the Content of a Draft Post Is Empty\n\nEven after we’ve called `add_text` and added some content to our post, we still\nwant the `content` method to return an empty string slice because the post is\nstill in the draft state, as shown on line 7 of Listing 17-11. For now, let’s\nimplement the `content` method with the simplest thing that will fulfill this\nrequirement: always returning an empty string slice. We’ll change this later\nonce we implement the ability to change a post’s state so it can be published.\nSo far, posts can only be in the draft state, so the post content should always\nbe empty. Listing 17-14 shows this placeholder implementation:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub struct Post {\n#     state: Option<Box<dyn State>>,\n#     content: String,\n# }\n# \nimpl Post {\n    // --snip--\n#     pub fn new() -> Post {\n#         Post {\n#             state: Some(Box::new(Draft {})),\n#             content: String::new(),\n#         }\n#     }\n# \n#     pub fn add_text(&mut self, text: &str) {\n#         self.content.push_str(text);\n#     }\n# \n    pub fn content(&self) -> &str {\n        \"\"\n    }\n}\n# \n# trait State {}\n# \n# struct Draft {}\n# \n# impl State for Draft {}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 17-14: Adding a placeholder implementation for\nthe `content` method on `Post` that always returns an empty string slice</span>\n\nWith this added `content` method, everything in Listing 17-11 up to line 7\nworks as intended.\n\n### Requesting a Review of the Post Changes Its State\n\nNext, we need to add functionality to request a review of a post, which should\nchange its state from `Draft` to `PendingReview`. Listing 17-15 shows this code:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub struct Post {\n#     state: Option<Box<dyn State>>,\n#     content: String,\n# }\n# \nimpl Post {\n    // --snip--\n#     pub fn new() -> Post {\n#         Post {\n#             state: Some(Box::new(Draft {})),\n#             content: String::new(),\n#         }\n#     }\n# \n#     pub fn add_text(&mut self, text: &str) {\n#         self.content.push_str(text);\n#     }\n# \n#     pub fn content(&self) -> &str {\n#         \"\"\n#     }\n# \n    pub fn request_review(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.request_review())\n        }\n    }\n}\n\ntrait State {\n    fn request_review(self: Box<Self>) -> Box<dyn State>;\n}\n\nstruct Draft {}\n\nimpl State for Draft {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        Box::new(PendingReview {})\n    }\n}\n\nstruct PendingReview {}\n\nimpl State for PendingReview {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 17-15: Implementing `request_review` methods on\n`Post` and the `State` trait</span>\n\nWe give `Post` a public method named `request_review` that will take a mutable\nreference to `self`. Then we call an internal `request_review` method on the\ncurrent state of `Post`, and this second `request_review` method consumes the\ncurrent state and returns a new state.\n\nWe’ve added the `request_review` method to the `State` trait; all types that\nimplement the trait will now need to implement the `request_review` method.\nNote that rather than having `self`, `&self`, or `&mut self` as the first\nparameter of the method, we have `self: Box<Self>`. This syntax means the\nmethod is only valid when called on a `Box` holding the type. This syntax takes\nownership of `Box<Self>`, invalidating the old state so the state value of the\n`Post` can transform into a new state.\n\nTo consume the old state, the `request_review` method needs to take ownership\nof the state value. This is where the `Option` in the `state` field of `Post`\ncomes in: we call the `take` method to take the `Some` value out of the `state`\nfield and leave a `None` in its place, because Rust doesn’t let us have\nunpopulated fields in structs. This lets us move the `state` value out of\n`Post` rather than borrowing it. Then we’ll set the post’s `state` value to the\nresult of this operation.\n\nWe need to set `state` to `None` temporarily rather than setting it directly\nwith code like `self.state = self.state.request_review();` to get ownership of\nthe `state` value. This ensures `Post` can’t use the old `state` value after\nwe’ve transformed it into a new state.\n\nThe `request_review` method on `Draft` needs to return a new, boxed instance of\na new `PendingReview` struct, which represents the state when a post is waiting\nfor a review. The `PendingReview` struct also implements the `request_review`\nmethod but doesn’t do any transformations. Rather, it returns itself, because\nwhen we request a review on a post already in the `PendingReview` state, it\nshould stay in the `PendingReview` state.\n\nNow we can start seeing the advantages of the state pattern: the\n`request_review` method on `Post` is the same no matter its `state` value. Each\nstate is responsible for its own rules.\n\nWe’ll leave the `content` method on `Post` as is, returning an empty string\nslice. We can now have a `Post` in the `PendingReview` state as well as in the\n`Draft` state, but we want the same behavior in the `PendingReview` state.\nListing 17-11 now works up to line 10!\n\n### Adding the `approve` Method that Changes the Behavior of `content`\n\nThe `approve` method will be similar to the `request_review` method: it will\nset `state` to the value that the current state says it should have when that\nstate is approved, as shown in Listing 17-16:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub struct Post {\n#     state: Option<Box<dyn State>>,\n#     content: String,\n# }\n# \nimpl Post {\n    // --snip--\n#     pub fn new() -> Post {\n#         Post {\n#             state: Some(Box::new(Draft {})),\n#             content: String::new(),\n#         }\n#     }\n# \n#     pub fn add_text(&mut self, text: &str) {\n#         self.content.push_str(text);\n#     }\n# \n#     pub fn content(&self) -> &str {\n#         \"\"\n#     }\n# \n#     pub fn request_review(&mut self) {\n#         if let Some(s) = self.state.take() {\n#             self.state = Some(s.request_review())\n#         }\n#     }\n# \n    pub fn approve(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.approve())\n        }\n    }\n}\n\ntrait State {\n    fn request_review(self: Box<Self>) -> Box<dyn State>;\n    fn approve(self: Box<Self>) -> Box<dyn State>;\n}\n\nstruct Draft {}\n\nimpl State for Draft {\n    // --snip--\n#     fn request_review(self: Box<Self>) -> Box<dyn State> {\n#         Box::new(PendingReview {})\n#     }\n# \n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n\nstruct PendingReview {}\n\nimpl State for PendingReview {\n    // --snip--\n#     fn request_review(self: Box<Self>) -> Box<dyn State> {\n#         self\n#     }\n# \n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        Box::new(Published {})\n    }\n}\n\nstruct Published {}\n\nimpl State for Published {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n```\n\n<span class=\"caption\">Listing 17-16: Implementing the `approve` method on\n`Post` and the `State` trait</span>\n\nWe add the `approve` method to the `State` trait and add a new struct that\nimplements `State`, the `Published` state.\n\nSimilar to `request_review`, if we call the `approve` method on a `Draft`, it\nwill have no effect because it will return `self`. When we call `approve` on\n`PendingReview`, it returns a new, boxed instance of the `Published` struct.\nThe `Published` struct implements the `State` trait, and for both the\n`request_review` method and the `approve` method, it returns itself, because\nthe post should stay in the `Published` state in those cases.\n\nNow we need to update the `content` method on `Post`: if the state is\n`Published`, we want to return the value in the post’s `content` field;\notherwise, we want to return an empty string slice, as shown in Listing 17-17:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n# pub struct Post {\n#     state: Option<Box<dyn State>>,\n#     content: String,\n# }\n# \nimpl Post {\n    // --snip--\n#     pub fn new() -> Post {\n#         Post {\n#             state: Some(Box::new(Draft {})),\n#             content: String::new(),\n#         }\n#     }\n# \n#     pub fn add_text(&mut self, text: &str) {\n#         self.content.push_str(text);\n#     }\n# \n    pub fn content(&self) -> &str {\n        self.state.as_ref().unwrap().content(self)\n    }\n    // --snip--\n# \n#     pub fn request_review(&mut self) {\n#         if let Some(s) = self.state.take() {\n#             self.state = Some(s.request_review())\n#         }\n#     }\n# \n#     pub fn approve(&mut self) {\n#         if let Some(s) = self.state.take() {\n#             self.state = Some(s.approve())\n#         }\n#     }\n}\n# \n# trait State {\n#     fn request_review(self: Box<Self>) -> Box<dyn State>;\n#     fn approve(self: Box<Self>) -> Box<dyn State>;\n# }\n# \n# struct Draft {}\n# \n# impl State for Draft {\n#     fn request_review(self: Box<Self>) -> Box<dyn State> {\n#         Box::new(PendingReview {})\n#     }\n# \n#     fn approve(self: Box<Self>) -> Box<dyn State> {\n#         self\n#     }\n# }\n# \n# struct PendingReview {}\n# \n# impl State for PendingReview {\n#     fn request_review(self: Box<Self>) -> Box<dyn State> {\n#         self\n#     }\n# \n#     fn approve(self: Box<Self>) -> Box<dyn State> {\n#         Box::new(Published {})\n#     }\n# }\n# \n# struct Published {}\n# \n# impl State for Published {\n#     fn request_review(self: Box<Self>) -> Box<dyn State> {\n#         self\n#     }\n# \n#     fn approve(self: Box<Self>) -> Box<dyn State> {\n#         self\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 17-17: Updating the `content` method on `Post` to\ndelegate to a `content` method on `State`</span>\n\nBecause the goal is to keep all these rules inside the structs that implement\n`State`, we call a `content` method on the value in `state` and pass the post\ninstance (that is, `self`) as an argument. Then we return the value that is\nreturned from using the `content` method on the `state` value.\n\nWe call the `as_ref` method on the `Option` because we want a reference to the\nvalue inside the `Option` rather than ownership of the value. Because `state`\nis an `Option<Box<dyn State>>`, when we call `as_ref`, an `Option<&Box<dyn State>>` is\nreturned. If we didn’t call `as_ref`, we would get an error because we can’t\nmove `state` out of the borrowed `&self` of the function parameter.\n\nWe then call the `unwrap` method, which we know will never panic, because we\nknow the methods on `Post` ensure that `state` will always contain a `Some`\nvalue when those methods are done. This is one of the cases we talked about in\nthe [“Cases In Which You Have More Information Than the\nCompiler”][more-info-than-rustc]<!-- ignore --> section of Chapter 9 when we\nknow that a `None` value is never possible, even though the compiler isn’t able\nto understand that.\n\nAt this point, when we call `content` on the `&Box<dyn State>`, deref coercion will\ntake effect on the `&` and the `Box` so the `content` method will ultimately be\ncalled on the type that implements the `State` trait. That means we need to add\n`content` to the `State` trait definition, and that is where we’ll put the\nlogic for what content to return depending on which state we have, as shown in\nListing 17-18:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub struct Post {\n#     state: Option<Box<dyn State>>,\n#     content: String,\n# }\n# \n# impl Post {\n#     pub fn new() -> Post {\n#         Post {\n#             state: Some(Box::new(Draft {})),\n#             content: String::new(),\n#         }\n#     }\n# \n#     pub fn add_text(&mut self, text: &str) {\n#         self.content.push_str(text);\n#     }\n# \n#     pub fn content(&self) -> &str {\n#         self.state.as_ref().unwrap().content(self)\n#     }\n# \n#     pub fn request_review(&mut self) {\n#         if let Some(s) = self.state.take() {\n#             self.state = Some(s.request_review())\n#         }\n#     }\n# \n#     pub fn approve(&mut self) {\n#         if let Some(s) = self.state.take() {\n#             self.state = Some(s.approve())\n#         }\n#     }\n# }\n# \ntrait State {\n    // --snip--\n#     fn request_review(self: Box<Self>) -> Box<dyn State>;\n#     fn approve(self: Box<Self>) -> Box<dyn State>;\n# \n    fn content<\'a>(&self, post: &\'a Post) -> &\'a str {\n        \"\"\n    }\n}\n\n// --snip--\n# \n# struct Draft {}\n# \n# impl State for Draft {\n#     fn request_review(self: Box<Self>) -> Box<dyn State> {\n#         Box::new(PendingReview {})\n#     }\n# \n#     fn approve(self: Box<Self>) -> Box<dyn State> {\n#         self\n#     }\n# }\n# \n# struct PendingReview {}\n# \n# impl State for PendingReview {\n#     fn request_review(self: Box<Self>) -> Box<dyn State> {\n#         self\n#     }\n# \n#     fn approve(self: Box<Self>) -> Box<dyn State> {\n#         Box::new(Published {})\n#     }\n# }\n# \nstruct Published {}\n\nimpl State for Published {\n    // --snip--\n#     fn request_review(self: Box<Self>) -> Box<dyn State> {\n#         self\n#     }\n# \n#     fn approve(self: Box<Self>) -> Box<dyn State> {\n#         self\n#     }\n# \n    fn content<\'a>(&self, post: &\'a Post) -> &\'a str {\n        &post.content\n    }\n}\n```\n\n<span class=\"caption\">Listing 17-18: Adding the `content` method to the `State`\ntrait</span>\n\nWe add a default implementation for the `content` method that returns an empty\nstring slice. That means we don’t need to implement `content` on the `Draft`\nand `PendingReview` structs. The `Published` struct will override the `content`\nmethod and return the value in `post.content`.\n\nNote that we need lifetime annotations on this method, as we discussed in\nChapter 10. We’re taking a reference to a `post` as an argument and returning a\nreference to part of that `post`, so the lifetime of the returned reference is\nrelated to the lifetime of the `post` argument.\n\nAnd we’re done—all of Listing 17-11 now works! We’ve implemented the state\npattern with the rules of the blog post workflow. The logic related to the\nrules lives in the state objects rather than being scattered throughout `Post`.\n\n### Trade-offs of the State Pattern\n\nWe’ve shown that Rust is capable of implementing the object-oriented state\npattern to encapsulate the different kinds of behavior a post should have in\neach state. The methods on `Post` know nothing about the various behaviors. The\nway we organized the code, we have to look in only one place to know the\ndifferent ways a published post can behave: the implementation of the `State`\ntrait on the `Published` struct.\n\nIf we were to create an alternative implementation that didn’t use the state\npattern, we might instead use `match` expressions in the methods on `Post` or\neven in the `main` code that checks the state of the post and changes behavior\nin those places. That would mean we would have to look in several places to\nunderstand all the implications of a post being in the published state! This\nwould only increase the more states we added: each of those `match` expressions\nwould need another arm.\n\nWith the state pattern, the `Post` methods and the places we use `Post` don’t\nneed `match` expressions, and to add a new state, we would only need to add a\nnew struct and implement the trait methods on that one struct.\n\nThe implementation using the state pattern is easy to extend to add more\nfunctionality. To see the simplicity of maintaining code that uses the state\npattern, try a few of these suggestions:\n\n* Add a `reject` method that changes the post’s state from `PendingReview` back\n  to `Draft`.\n* Require two calls to `approve` before the state can be changed to `Published`.\n* Allow users to add text content only when a post is in the `Draft` state.\n  Hint: have the state object responsible for what might change about the\n  content but not responsible for modifying the `Post`.\n\nOne downside of the state pattern is that, because the states implement the\ntransitions between states, some of the states are coupled to each other. If we\nadd another state between `PendingReview` and `Published`, such as `Scheduled`,\nwe would have to change the code in `PendingReview` to transition to\n`Scheduled` instead. It would be less work if `PendingReview` didn’t need to\nchange with the addition of a new state, but that would mean switching to\nanother design pattern.\n\nAnother downside is that we’ve duplicated some logic. To eliminate some of the\nduplication, we might try to make default implementations for the\n`request_review` and `approve` methods on the `State` trait that return `self`;\nhowever, this would violate object safety, because the trait doesn’t know what\nthe concrete `self` will be exactly. We want to be able to use `State` as a\ntrait object, so we need its methods to be object safe.\n\nOther duplication includes the similar implementations of the `request_review`\nand `approve` methods on `Post`. Both methods delegate to the implementation of\nthe same method on the value in the `state` field of `Option` and set the new\nvalue of the `state` field to the result. If we had a lot of methods on `Post`\nthat followed this pattern, we might consider defining a macro to eliminate the\nrepetition (see the [“Macros”][macros]<!-- ignore --> section in Chapter 19).\n\nBy implementing the state pattern exactly as it’s defined for object-oriented\nlanguages, we’re not taking as full advantage of Rust’s strengths as we could.\nLet’s look at some changes we can make to the `blog` crate that can make\ninvalid states and transitions into compile time errors.\n\n#### Encoding States and Behavior as Types\n\nWe’ll show you how to rethink the state pattern to get a different set of\ntrade-offs. Rather than encapsulating the states and transitions completely so\noutside code has no knowledge of them, we’ll encode the states into different\ntypes. Consequently, Rust’s type checking system will prevent attempts to use\ndraft posts where only published posts are allowed by issuing a compiler error.\n\nLet’s consider the first part of `main` in Listing 17-11:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n# use blog::Post;\n# \nfn main() {\n    let mut post = Post::new();\n\n    post.add_text(\"I ate a salad for lunch today\");\n    assert_eq!(\"\", post.content());\n# \n#     post.request_review();\n#     assert_eq!(\"\", post.content());\n# \n#     post.approve();\n#     assert_eq!(\"I ate a salad for lunch today\", post.content());\n}\n```\n\nWe still enable the creation of new posts in the draft state using `Post::new`\nand the ability to add text to the post’s content. But instead of having a\n`content` method on a draft post that returns an empty string, we’ll make it so\ndraft posts don’t have the `content` method at all. That way, if we try to get\na draft post’s content, we’ll get a compiler error telling us the method\ndoesn’t exist. As a result, it will be impossible for us to accidentally\ndisplay draft post content in production, because that code won’t even compile.\nListing 17-19 shows the definition of a `Post` struct and a `DraftPost` struct,\nas well as methods on each:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub struct Post {\n    content: String,\n}\n\npub struct DraftPost {\n    content: String,\n}\n\nimpl Post {\n    pub fn new() -> DraftPost {\n        DraftPost {\n            content: String::new(),\n        }\n    }\n\n    pub fn content(&self) -> &str {\n        &self.content\n    }\n}\n\nimpl DraftPost {\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n}\n```\n\n<span class=\"caption\">Listing 17-19: A `Post` with a `content` method and a\n`DraftPost` without a `content` method</span>\n\nBoth the `Post` and `DraftPost` structs have a private `content` field that\nstores the blog post text. The structs no longer have the `state` field because\nwe’re moving the encoding of the state to the types of the structs. The `Post`\nstruct will represent a published post, and it has a `content` method that\nreturns the `content`.\n\nWe still have a `Post::new` function, but instead of returning an instance of\n`Post`, it returns an instance of `DraftPost`. Because `content` is private\nand there aren’t any functions that return `Post`, it’s not possible to create\nan instance of `Post` right now.\n\nThe `DraftPost` struct has an `add_text` method, so we can add text to\n`content` as before, but note that `DraftPost` does not have a `content` method\ndefined! So now the program ensures all posts start as draft posts, and draft\nposts don’t have their content available for display. Any attempt to get around\nthese constraints will result in a compiler error.\n\n#### Implementing Transitions as Transformations into Different Types\n\nSo how do we get a published post? We want to enforce the rule that a draft\npost has to be reviewed and approved before it can be published. A post in the\npending review state should still not display any content. Let’s implement\nthese constraints by adding another struct, `PendingReviewPost`, defining the\n`request_review` method on `DraftPost` to return a `PendingReviewPost`, and\ndefining an `approve` method on `PendingReviewPost` to return a `Post`, as\nshown in Listing 17-20:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub struct Post {\n#     content: String,\n# }\n# \n# pub struct DraftPost {\n#     content: String,\n# }\n# \n# impl Post {\n#     pub fn new() -> DraftPost {\n#         DraftPost {\n#             content: String::new(),\n#         }\n#     }\n# \n#     pub fn content(&self) -> &str {\n#         &self.content\n#     }\n# }\n# \nimpl DraftPost {\n    // --snip--\n#     pub fn add_text(&mut self, text: &str) {\n#         self.content.push_str(text);\n#     }\n# \n    pub fn request_review(self) -> PendingReviewPost {\n        PendingReviewPost {\n            content: self.content,\n        }\n    }\n}\n\npub struct PendingReviewPost {\n    content: String,\n}\n\nimpl PendingReviewPost {\n    pub fn approve(self) -> Post {\n        Post {\n            content: self.content,\n        }\n    }\n}\n```\n\n<span class=\"caption\">Listing 17-20: A `PendingReviewPost` that gets created by\ncalling `request_review` on `DraftPost` and an `approve` method that turns a\n`PendingReviewPost` into a published `Post`</span>\n\nThe `request_review` and `approve` methods take ownership of `self`, thus\nconsuming the `DraftPost` and `PendingReviewPost` instances and transforming\nthem into a `PendingReviewPost` and a published `Post`, respectively. This way,\nwe won’t have any lingering `DraftPost` instances after we’ve called\n`request_review` on them, and so forth. The `PendingReviewPost` struct doesn’t\nhave a `content` method defined on it, so attempting to read its content\nresults in a compiler error, as with `DraftPost`. Because the only way to get a\npublished `Post` instance that does have a `content` method defined is to call\nthe `approve` method on a `PendingReviewPost`, and the only way to get a\n`PendingReviewPost` is to call the `request_review` method on a `DraftPost`,\nwe’ve now encoded the blog post workflow into the type system.\n\nBut we also have to make some small changes to `main`. The `request_review` and\n`approve` methods return new instances rather than modifying the struct they’re\ncalled on, so we need to add more `let post =` shadowing assignments to save\nthe returned instances. We also can’t have the assertions about the draft and\npending review post’s contents be empty strings, nor do we need them: we can’t\ncompile code that tries to use the content of posts in those states any longer.\nThe updated code in `main` is shown in Listing 17-21:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\nuse blog::Post;\n\nfn main() {\n    let mut post = Post::new();\n\n    post.add_text(\"I ate a salad for lunch today\");\n\n    let post = post.request_review();\n\n    let post = post.approve();\n\n    assert_eq!(\"I ate a salad for lunch today\", post.content());\n}\n```\n\n<span class=\"caption\">Listing 17-21: Modifications to `main` to use the new\nimplementation of the blog post workflow</span>\n\nThe changes we needed to make to `main` to reassign `post` mean that this\nimplementation doesn’t quite follow the object-oriented state pattern anymore:\nthe transformations between the states are no longer encapsulated entirely\nwithin the `Post` implementation. However, our gain is that invalid states are\nnow impossible because of the type system and the type checking that happens at\ncompile time! This ensures that certain bugs, such as display of the content of\nan unpublished post, will be discovered before they make it to production.\n\nTry the tasks suggested for additional requirements that we mentioned at the\nstart of this section on the `blog` crate as it is after Listing 17-20 to see\nwhat you think about the design of this version of the code. Note that some of\nthe tasks might be completed already in this design.\n\nWe’ve seen that even though Rust is capable of implementing object-oriented\ndesign patterns, other patterns, such as encoding state into the type system,\nare also available in Rust. These patterns have different trade-offs. Although\nyou might be very familiar with object-oriented patterns, rethinking the\nproblem to take advantage of Rust’s features can provide benefits, such as\npreventing some bugs at compile time. Object-oriented patterns won’t always be\nthe best solution in Rust due to certain features, like ownership, that\nobject-oriented languages don’t have.\n\n## Summary\n\nNo matter whether or not you think Rust is an object-oriented language after\nreading this chapter, you now know that you can use trait objects to get some\nobject-oriented features in Rust. Dynamic dispatch can give your code some\nflexibility in exchange for a bit of runtime performance. You can use this\nflexibility to implement object-oriented patterns that can help your code’s\nmaintainability. Rust also has other features, like ownership, that\nobject-oriented languages don’t have. An object-oriented pattern won’t always\nbe the best way to take advantage of Rust’s strengths, but is an available\noption.\n\nNext, we’ll look at patterns, which are another of Rust’s features that enable\nlots of flexibility. We’ve looked at them briefly throughout the book but\nhaven’t seen their full capability yet. Let’s go!\n\n[more-info-than-rustc]: ch09-03-to-panic-or-not-to-panic.html#cases-in-which-you-have-more-information-than-the-compiler\n[macros]: ch19-06-macros.html#macros\n", number: Some(SectionNumber([17, 3])), sub_items: [], path: "ch17-03-oo-design-patterns.md", parent_names: ["Object Oriented Programming Features of Rust"] })], path: "ch17-00-oop.md", parent_names: [] }), Chapter(Chapter { name: "Patterns and Matching", content: "# Patterns and Matching\n\nPatterns are a special syntax in Rust for matching against the structure of\ntypes, both complex and simple. Using patterns in conjunction with `match`\nexpressions and other constructs gives you more control over a program’s\ncontrol flow. A pattern consists of some combination of the following:\n\n* Literals\n* Destructured arrays, enums, structs, or tuples\n* Variables\n* Wildcards\n* Placeholders\n\nThese components describe the shape of the data we’re working with, which we\nthen match against values to determine whether our program has the correct data\nto continue running a particular piece of code.\n\nTo use a pattern, we compare it to some value. If the pattern matches the\nvalue, we use the value parts in our code. Recall the `match` expressions in\nChapter 6 that used patterns, such as the coin-sorting machine example. If the\nvalue fits the shape of the pattern, we can use the named pieces. If it\ndoesn’t, the code associated with the pattern won’t run.\n\nThis chapter is a reference on all things related to patterns. We’ll cover the\nvalid places to use patterns, the difference between refutable and irrefutable\npatterns, and the different kinds of pattern syntax that you might see. By the\nend of the chapter, you’ll know how to use patterns to express many concepts in\na clear way.\n", number: Some(SectionNumber([18])), sub_items: [Chapter(Chapter { name: "All the Places Patterns Can Be Used", content: "## All the Places Patterns Can Be Used\n\nPatterns pop up in a number of places in Rust, and you’ve been using them a lot\nwithout realizing it! This section discusses all the places where patterns are\nvalid.\n\n### `match` Arms\n\nAs discussed in Chapter 6, we use patterns in the arms of `match` expressions.\nFormally, `match` expressions are defined as the keyword `match`, a value to\nmatch on, and one or more match arms that consist of a pattern and an\nexpression to run if the value matches that arm’s pattern, like this:\n\n```text\nmatch VALUE {\n    PATTERN => EXPRESSION,\n    PATTERN => EXPRESSION,\n    PATTERN => EXPRESSION,\n}\n```\n\nOne requirement for `match` expressions is that they need to be *exhaustive* in\nthe sense that all possibilities for the value in the `match` expression must\nbe accounted for. One way to ensure you’ve covered every possibility is to have\na catchall pattern for the last arm: for example, a variable name matching any\nvalue can never fail and thus covers every remaining case.\n\nA particular pattern `_` will match anything, but it never binds to a variable,\nso it’s often used in the last match arm. The `_` pattern can be useful when\nyou want to ignore any value not specified, for example. We’ll cover the `_`\npattern in more detail in the [“Ignoring Values in a\nPattern”][ignoring-values-in-a-pattern]<!-- ignore --> section later in this\nchapter.\n\n### Conditional `if let` Expressions\n\nIn Chapter 6 we discussed how to use `if let` expressions mainly as a shorter\nway to write the equivalent of a `match` that only matches one case.\nOptionally, `if let` can have a corresponding `else` containing code to run if\nthe pattern in the `if let` doesn’t match.\n\nListing 18-1 shows that it’s also possible to mix and match `if let`, `else\nif`, and `else if let` expressions. Doing so gives us more flexibility than a\n`match` expression in which we can express only one value to compare with the\npatterns. Also, the conditions in a series of `if let`, `else if`, `else if\nlet` arms aren’t required to relate to each other.\n\nThe code in Listing 18-1 shows a series of checks for several conditions that\ndecide what the background color should be. For this example, we’ve created\nvariables with hardcoded values that a real program might receive from user\ninput.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let favorite_color: Option<&str> = None;\n    let is_tuesday = false;\n    let age: Result<u8, _> = \"34\".parse();\n\n    if let Some(color) = favorite_color {\n        println!(\"Using your favorite color, {}, as the background\", color);\n    } else if is_tuesday {\n        println!(\"Tuesday is green day!\");\n    } else if let Ok(age) = age {\n        if age > 30 {\n            println!(\"Using purple as the background color\");\n        } else {\n            println!(\"Using orange as the background color\");\n        }\n    } else {\n        println!(\"Using blue as the background color\");\n    }\n}\n```\n\n<span class=\"caption\">Listing 18-1: Mixing `if let`, `else if`, `else if let`,\nand `else`</span>\n\nIf the user specifies a favorite color, that color is the background color. If\ntoday is Tuesday, the background color is green. If the user specifies\ntheir age as a string and we can parse it as a number successfully, the color\nis either purple or orange depending on the value of the number. If none of\nthese conditions apply, the background color is blue.\n\nThis conditional structure lets us support complex requirements. With the\nhardcoded values we have here, this example will print `Using purple as the\nbackground color`.\n\nYou can see that `if let` can also introduce shadowed variables in the same way\nthat `match` arms can: the line `if let Ok(age) = age` introduces a new\nshadowed `age` variable that contains the value inside the `Ok` variant. This\nmeans we need to place the `if age > 30` condition within that block: we can’t\ncombine these two conditions into `if let Ok(age) = age && age > 30`. The\nshadowed `age` we want to compare to 30 isn’t valid until the new scope starts\nwith the curly bracket.\n\nThe downside of using `if let` expressions is that the compiler doesn’t check\nexhaustiveness, whereas with `match` expressions it does. If we omitted the\nlast `else` block and therefore missed handling some cases, the compiler would\nnot alert us to the possible logic bug.\n\n### `while let` Conditional Loops\n\nSimilar in construction to `if let`, the `while let` conditional loop allows a\n`while` loop to run for as long as a pattern continues to match. The example in\nListing 18-2 shows a `while let` loop that uses a vector as a stack and prints\nthe values in the vector in the opposite order in which they were pushed.\n\n```rust\n# fn main() {\n    let mut stack = Vec::new();\n\n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n\n    while let Some(top) = stack.pop() {\n        println!(\"{}\", top);\n    }\n# }\n```\n\n<span class=\"caption\">Listing 18-2: Using a `while let` loop to print values\nfor as long as `stack.pop()` returns `Some`</span>\n\nThis example prints 3, 2, and then 1. The `pop` method takes the last element\nout of the vector and returns `Some(value)`. If the vector is empty, `pop`\nreturns `None`. The `while` loop continues running the code in its block as\nlong as `pop` returns `Some`. When `pop` returns `None`, the loop stops. We can\nuse `while let` to pop every element off our stack.\n\n### `for` Loops\n\nIn Chapter 3, we mentioned that the `for` loop is the most common loop\nconstruction in Rust code, but we haven’t yet discussed the pattern that `for`\ntakes. In a `for` loop, the pattern is the value that directly follows the\nkeyword `for`, so in `for x in y` the `x` is the pattern.\n\nListing 18-3 demonstrates how to use a pattern in a `for` loop to destructure,\nor break apart, a tuple as part of the `for` loop.\n\n```rust\n# fn main() {\n    let v = vec![\'a\', \'b\', \'c\'];\n\n    for (index, value) in v.iter().enumerate() {\n        println!(\"{} is at index {}\", value, index);\n    }\n# }\n```\n\n<span class=\"caption\">Listing 18-3: Using a pattern in a `for` loop to\ndestructure a tuple</span>\n\nThe code in Listing 18-3 will print the following:\n\n```text\n$ cargo run\n   Compiling patterns v0.1.0 (file:///projects/patterns)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.52s\n     Running `target/debug/patterns`\na is at index 0\nb is at index 1\nc is at index 2\n```\n\nWe use the `enumerate` method to adapt an iterator to produce a value and that\nvalue’s index in the iterator, placed into a tuple. The first call to\n`enumerate` produces the tuple `(0, \'a\')`. When this value is matched to the\npattern `(index, value)`, `index` will be `0` and `value` will be `\'a\'`,\nprinting the first line of the output.\n\n### `let` Statements\n\nPrior to this chapter, we had only explicitly discussed using patterns with\n`match` and `if let`, but in fact, we’ve used patterns in other places as well,\nincluding in `let` statements. For example, consider this straightforward\nvariable assignment with `let`:\n\n```rust\nlet x = 5;\n```\n\nThroughout this book, we’ve used `let` like this hundreds of times, and\nalthough you might not have realized it, you were using patterns! More\nformally, a `let` statement looks like this:\n\n```text\nlet PATTERN = EXPRESSION;\n```\n\nIn statements like `let x = 5;` with a variable name in the `PATTERN` slot, the\nvariable name is just a particularly simple form of a pattern. Rust compares\nthe expression against the pattern and assigns any names it finds. So in the\n`let x = 5;` example, `x` is a pattern that means “bind what matches here to\nthe variable `x`.” Because the name `x` is the whole pattern, this pattern\neffectively means “bind everything to the variable `x`, whatever the value is.”\n\nTo see the pattern matching aspect of `let` more clearly, consider Listing\n18-4, which uses a pattern with `let` to destructure a tuple.\n\n```rust\n# fn main() {\n    let (x, y, z) = (1, 2, 3);\n# }\n```\n\n<span class=\"caption\">Listing 18-4: Using a pattern to destructure a tuple and\ncreate three variables at once</span>\n\nHere, we match a tuple against a pattern. Rust compares the value `(1, 2, 3)`\nto the pattern `(x, y, z)` and sees that the value matches the pattern, so Rust\nbinds `1` to `x`, `2` to `y`, and `3` to `z`. You can think of this tuple\npattern as nesting three individual variable patterns inside it.\n\nIf the number of elements in the pattern doesn’t match the number of elements\nin the tuple, the overall type won’t match and we’ll get a compiler error. For\nexample, Listing 18-5 shows an attempt to destructure a tuple with three\nelements into two variables, which won’t work.\n\n```rust,ignore,does_not_compile\n# fn main() {\n    let (x, y) = (1, 2, 3);\n# }\n```\n\n<span class=\"caption\">Listing 18-5: Incorrectly constructing a pattern whose\nvariables don’t match the number of elements in the tuple</span>\n\nAttempting to compile this code results in this type error:\n\n```text\n$ cargo run\n   Compiling patterns v0.1.0 (file:///projects/patterns)\nerror[E0308]: mismatched types\n --> src/main.rs:2:9\n  |\n2 |     let (x, y) = (1, 2, 3);\n  |         ^^^^^^ expected a tuple with 3 elements, found one with 2 elements\n  |\n  = note: expected tuple `({integer}, {integer}, {integer})`\n             found tuple `(_, _)`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `patterns`.\n\nTo learn more, run the command again with --verbose.\n```\n\nIf we wanted to ignore one or more of the values in the tuple, we could use `_`\nor `..`, as you’ll see in the [“Ignoring Values in a\nPattern”][ignoring-values-in-a-pattern]<!-- ignore --> section. If the problem\nis that we have too many variables in the pattern, the solution is to make the\ntypes match by removing variables so the number of variables equals the number\nof elements in the tuple.\n\n### Function Parameters\n\nFunction parameters can also be patterns. The code in Listing 18-6, which\ndeclares a function named `foo` that takes one parameter named `x` of type\n`i32`, should by now look familiar.\n\n```rust\nfn foo(x: i32) {\n    // code goes here\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 18-6: A function signature uses patterns in the\nparameters</span>\n\nThe `x` part is a pattern! As we did with `let`, we could match a tuple in a\nfunction’s arguments to the pattern. Listing 18-7 splits the values in a tuple\nas we pass it to a function.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn print_coordinates(&(x, y): &(i32, i32)) {\n    println!(\"Current location: ({}, {})\", x, y);\n}\n\nfn main() {\n    let point = (3, 5);\n    print_coordinates(&point);\n}\n```\n\n<span class=\"caption\">Listing 18-7: A function with parameters that destructure\na tuple</span>\n\nThis code prints `Current location: (3, 5)`. The values `&(3, 5)` match the\npattern `&(x, y)`, so `x` is the value `3` and `y` is the value `5`.\n\nWe can also use patterns in closure parameter lists in the same way as in\nfunction parameter lists, because closures are similar to functions, as\ndiscussed in Chapter 13.\n\nAt this point, you’ve seen several ways of using patterns, but patterns don’t\nwork the same in every place we can use them. In some places, the patterns must\nbe irrefutable; in other circumstances, they can be refutable. We’ll discuss\nthese two concepts next.\n\n[ignoring-values-in-a-pattern]:\nch18-03-pattern-syntax.html#ignoring-values-in-a-pattern\n", number: Some(SectionNumber([18, 1])), sub_items: [], path: "ch18-01-all-the-places-for-patterns.md", parent_names: ["Patterns and Matching"] }), Chapter(Chapter { name: "Refutability: Whether a Pattern Might Fail to Match", content: "## Refutability: Whether a Pattern Might Fail to Match\n\nPatterns come in two forms: refutable and irrefutable. Patterns that will match\nfor any possible value passed are *irrefutable*. An example would be `x` in the\nstatement `let x = 5;` because `x` matches anything and therefore cannot fail\nto match. Patterns that can fail to match for some possible value are\n*refutable*. An example would be `Some(x)` in the expression `if let Some(x) =\na_value` because if the value in the `a_value` variable is `None` rather than\n`Some`, the `Some(x)` pattern will not match.\n\nFunction parameters, `let` statements, and `for` loops can only accept\nirrefutable patterns, because the program cannot do anything meaningful when\nvalues don’t match. The `if let` and `while let` expressions accept\nrefutable and irrefutable patterns, but the compiler warns against\nirrefutable patterns because by definition they’re intended to handle possible\nfailure: the functionality of a conditional is in its ability to perform\ndifferently depending on success or failure.\n\nIn general, you shouldn’t have to worry about the distinction between refutable\nand irrefutable patterns; however, you do need to be familiar with the concept\nof refutability so you can respond when you see it in an error message. In\nthose cases, you’ll need to change either the pattern or the construct you’re\nusing the pattern with, depending on the intended behavior of the code.\n\nLet’s look at an example of what happens when we try to use a refutable pattern\nwhere Rust requires an irrefutable pattern and vice versa. Listing 18-8 shows a\n`let` statement, but for the pattern we’ve specified `Some(x)`, a refutable\npattern. As you might expect, this code will not compile.\n\n```rust,ignore,does_not_compile\n# fn main() {\n#     let some_option_value: Option<i32> = None;\n    let Some(x) = some_option_value;\n# }\n```\n\n<span class=\"caption\">Listing 18-8: Attempting to use a refutable pattern with\n`let`</span>\n\nIf `some_option_value` was a `None` value, it would fail to match the pattern\n`Some(x)`, meaning the pattern is refutable. However, the `let` statement can\nonly accept an irrefutable pattern because there is nothing valid the code can\ndo with a `None` value. At compile time, Rust will complain that we’ve tried to\nuse a refutable pattern where an irrefutable pattern is required:\n\n```text\n$ cargo run\n   Compiling patterns v0.1.0 (file:///projects/patterns)\nerror[E0005]: refutable pattern in local binding: `None` not covered\n --> src/main.rs:3:9\n  |\n3 |     let Some(x) = some_option_value;\n  |         ^^^^^^^ pattern `None` not covered\n  |\n  = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n  = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\nhelp: you might want to use `if let` to ignore the variant that isn\'t matched\n  |\n3 |     if let Some(x) = some_option_value { /* */ }\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0005`.\nerror: could not compile `patterns`.\n\nTo learn more, run the command again with --verbose.\n```\n\nBecause we didn’t cover (and couldn’t cover!) every valid value with the\npattern `Some(x)`, Rust rightfully produces a compiler error.\n\nTo fix the problem where we have a refutable pattern where an irrefutable\npattern is needed, we can change the code that uses the pattern: instead of\nusing `let`, we can use `if let`. Then if the pattern doesn’t match, the code\nwill just skip the code in the curly brackets, giving it a way to continue\nvalidly. Listing 18-9 shows how to fix the code in Listing 18-8.\n\n```rust\n# fn main() {\n#     let some_option_value: Option<i32> = None;\n    if let Some(x) = some_option_value {\n        println!(\"{}\", x);\n    }\n# }\n```\n\n<span class=\"caption\">Listing 18-9: Using `if let` and a block with refutable\npatterns instead of `let`</span>\n\nWe’ve given the code an out! This code is perfectly valid, although it means we\ncannot use an irrefutable pattern without receiving an error. If we give `if\nlet` a pattern that will always match, such as `x`, as shown in Listing 18-10,\nthe compiler will give a warning.\n\n```rust\n# fn main() {\n    if let x = 5 {\n        println!(\"{}\", x);\n    };\n# }\n```\n\n<span class=\"caption\">Listing 18-10: Attempting to use an irrefutable pattern\nwith `if let`</span>\n\nRust complains that it doesn’t make sense to use `if let` with an irrefutable\npattern:\n\n```text\n$ cargo run\n   Compiling patterns v0.1.0 (file:///projects/patterns)\nwarning: irrefutable if-let pattern\n --> src/main.rs:2:5\n  |\n2 | /     if let x = 5 {\n3 | |         println!(\"{}\", x);\n4 | |     };\n  | |_____^\n  |\n  = note: `#[warn(irrefutable_let_patterns)]` on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.39s\n     Running `target/debug/patterns`\n5\n```\n\nFor this reason, match arms must use refutable patterns, except for the last\narm, which should match any remaining values with an irrefutable pattern. Rust\nallows us to use an irrefutable pattern in a `match` with only one arm, but\nthis syntax isn’t particularly useful and could be replaced with a simpler\n`let` statement.\n\nNow that you know where to use patterns and the difference between refutable\nand irrefutable patterns, let’s cover all the syntax we can use to create\npatterns.\n", number: Some(SectionNumber([18, 2])), sub_items: [], path: "ch18-02-refutability.md", parent_names: ["Patterns and Matching"] }), Chapter(Chapter { name: "Pattern Syntax", content: "## Pattern Syntax\n\nThroughout the book, you’ve seen examples of many kinds of patterns. In this\nsection, we gather all the syntax valid in patterns and discuss why you might\nwant to use each one.\n\n### Matching Literals\n\nAs you saw in Chapter 6, you can match patterns against literals directly. The\nfollowing code gives some examples:\n\n```rust\n# fn main() {\n    let x = 1;\n\n    match x {\n        1 => println!(\"one\"),\n        2 => println!(\"two\"),\n        3 => println!(\"three\"),\n        _ => println!(\"anything\"),\n    }\n# }\n```\n\nThis code prints `one` because the value in `x` is 1. This syntax is useful\nwhen you want your code to take an action if it gets a particular concrete\nvalue.\n\n### Matching Named Variables\n\nNamed variables are irrefutable patterns that match any value, and we’ve used\nthem many times in the book. However, there is a complication when you use\nnamed variables in `match` expressions. Because `match` starts a new scope,\nvariables declared as part of a pattern inside the `match` expression will\nshadow those with the same name outside the `match` construct, as is the case\nwith all variables. In Listing 18-11, we declare a variable named `x` with the\nvalue `Some(5)` and a variable `y` with the value `10`. We then create a\n`match` expression on the value `x`. Look at the patterns in the match arms and\n`println!` at the end, and try to figure out what the code will print before\nrunning this code or reading further.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# fn main() {\n    let x = Some(5);\n    let y = 10;\n\n    match x {\n        Some(50) => println!(\"Got 50\"),\n        Some(y) => println!(\"Matched, y = {:?}\", y),\n        _ => println!(\"Default case, x = {:?}\", x),\n    }\n\n    println!(\"at the end: x = {:?}, y = {:?}\", x, y);\n# }\n```\n\n<span class=\"caption\">Listing 18-11: A `match` expression with an arm that\nintroduces a shadowed variable `y`</span>\n\nLet’s walk through what happens when the `match` expression runs. The pattern\nin the first match arm doesn’t match the defined value of `x`, so the code\ncontinues.\n\nThe pattern in the second match arm introduces a new variable named `y` that\nwill match any value inside a `Some` value. Because we’re in a new scope inside\nthe `match` expression, this is a new `y` variable, not the `y` we declared at\nthe beginning with the value 10. This new `y` binding will match any value\ninside a `Some`, which is what we have in `x`. Therefore, this new `y` binds to\nthe inner value of the `Some` in `x`. That value is `5`, so the expression for\nthat arm executes and prints `Matched, y = 5`.\n\nIf `x` had been a `None` value instead of `Some(5)`, the patterns in the first\ntwo arms wouldn’t have matched, so the value would have matched to the\nunderscore. We didn’t introduce the `x` variable in the pattern of the\nunderscore arm, so the `x` in the expression is still the outer `x` that hasn’t\nbeen shadowed. In this hypothetical case, the `match` would print `Default\ncase, x = None`.\n\nWhen the `match` expression is done, its scope ends, and so does the scope of\nthe inner `y`. The last `println!` produces `at the end: x = Some(5), y = 10`.\n\nTo create a `match` expression that compares the values of the outer `x` and\n`y`, rather than introducing a shadowed variable, we would need to use a match\nguard conditional instead. We’ll talk about match guards later in the [“Extra\nConditionals with Match Guards”](#extra-conditionals-with-match-guards)<!--\nignore --> section.\n\n### Multiple Patterns\n\nIn `match` expressions, you can match multiple patterns using the `|` syntax,\nwhich means *or*. For example, the following code matches the value of `x`\nagainst the match arms, the first of which has an *or* option, meaning if the\nvalue of `x` matches either of the values in that arm, that arm’s code will\nrun:\n\n```rust\n# fn main() {\n    let x = 1;\n\n    match x {\n        1 | 2 => println!(\"one or two\"),\n        3 => println!(\"three\"),\n        _ => println!(\"anything\"),\n    }\n# }\n```\n\nThis code prints `one or two`.\n\n### Matching Ranges of Values with `..=`\n\nThe `..=` syntax allows us to match to an inclusive range of values. In the\nfollowing code, when a pattern matches any of the values within the range, that\narm will execute:\n\n```rust\n# fn main() {\n    let x = 5;\n\n    match x {\n        1..=5 => println!(\"one through five\"),\n        _ => println!(\"something else\"),\n    }\n# }\n```\n\nIf `x` is 1, 2, 3, 4, or 5, the first arm will match. This syntax is more\nconvenient than using the `|` operator to express the same idea; instead of\n`1..=5`, we would have to specify `1 | 2 | 3 | 4 | 5` if we used `|`.\nSpecifying a range is much shorter, especially if we want to match, say, any\nnumber between 1 and 1,000!\n\nRanges are only allowed with numeric values or `char` values, because the\ncompiler checks that the range isn’t empty at compile time. The only types for\nwhich Rust can tell if a range is empty or not are `char` and numeric values.\n\nHere is an example using ranges of `char` values:\n\n```rust\n# fn main() {\n    let x = \'c\';\n\n    match x {\n        \'a\'..=\'j\' => println!(\"early ASCII letter\"),\n        \'k\'..=\'z\' => println!(\"late ASCII letter\"),\n        _ => println!(\"something else\"),\n    }\n# }\n```\n\nRust can tell that `c` is within the first pattern’s range and prints `early\nASCII letter`.\n\n### Destructuring to Break Apart Values\n\nWe can also use patterns to destructure structs, enums, tuples, and references\nto use different parts of these values. Let’s walk through each value.\n\n#### Destructuring Structs\n\nListing 18-12 shows a `Point` struct with two fields, `x` and `y`, that we can\nbreak apart using a pattern with a `let` statement.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let p = Point { x: 0, y: 7 };\n\n    let Point { x: a, y: b } = p;\n    assert_eq!(0, a);\n    assert_eq!(7, b);\n}\n```\n\n<span class=\"caption\">Listing 18-12: Destructuring a struct’s fields into\nseparate variables</span>\n\nThis code creates the variables `a` and `b` that match the values of the `x`\nand `y` fields of the `p` struct. This example shows that the names of the\nvariables in the pattern don’t have to match the field names of the struct. But\nit’s common to want the variable names to match the field names to make it\neasier to remember which variables came from which fields.\n\nBecause having variable names match the fields is common and because writing\n`let Point { x: x, y: y } = p;` contains a lot of duplication, there is a\nshorthand for patterns that match struct fields: you only need to list the name\nof the struct field, and the variables created from the pattern will have the\nsame names. Listing 18-13 shows code that behaves in the same way as the code\nin Listing 18-12, but the variables created in the `let` pattern are `x` and\n`y` instead of `a` and `b`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let p = Point { x: 0, y: 7 };\n\n    let Point { x, y } = p;\n    assert_eq!(0, x);\n    assert_eq!(7, y);\n}\n```\n\n<span class=\"caption\">Listing 18-13: Destructuring struct fields using struct\nfield shorthand</span>\n\nThis code creates the variables `x` and `y` that match the `x` and `y` fields\nof the `p` variable. The outcome is that the variables `x` and `y` contain the\nvalues from the `p` struct.\n\nWe can also destructure with literal values as part of the struct pattern\nrather than creating variables for all the fields. Doing so allows us to test\nsome of the fields for particular values while creating variables to\ndestructure the other fields.\n\nListing 18-14 shows a `match` expression that separates `Point` values into\nthree cases: points that lie directly on the `x` axis (which is true when `y =\n0`), on the `y` axis (`x = 0`), or neither.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# struct Point {\n#     x: i32,\n#     y: i32,\n# }\n# \nfn main() {\n    let p = Point { x: 0, y: 7 };\n\n    match p {\n        Point { x, y: 0 } => println!(\"On the x axis at {}\", x),\n        Point { x: 0, y } => println!(\"On the y axis at {}\", y),\n        Point { x, y } => println!(\"On neither axis: ({}, {})\", x, y),\n    }\n}\n```\n\n<span class=\"caption\">Listing 18-14: Destructuring and matching literal values\nin one pattern</span>\n\nThe first arm will match any point that lies on the `x` axis by specifying that\nthe `y` field matches if its value matches the literal `0`. The pattern still\ncreates an `x` variable that we can use in the code for this arm.\n\nSimilarly, the second arm matches any point on the `y` axis by specifying that\nthe `x` field matches if its value is `0` and creates a variable `y` for the\nvalue of the `y` field. The third arm doesn’t specify any literals, so it\nmatches any other `Point` and creates variables for both the `x` and `y` fields.\n\nIn this example, the value `p` matches the second arm by virtue of `x`\ncontaining a 0, so this code will print `On the y axis at 7`.\n\n#### Destructuring Enums\n\nWe’ve destructured enums earlier in this book, for example, when we\ndestructured `Option<i32>` in Listing 6-5 in Chapter 6. One detail we haven’t\nmentioned explicitly is that the pattern to destructure an enum should\ncorrespond to the way the data stored within the enum is defined. As an\nexample, in Listing 18-15 we use the `Message` enum from Listing 6-2 and write\na `match` with patterns that will destructure each inner value.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\nfn main() {\n    let msg = Message::ChangeColor(0, 160, 255);\n\n    match msg {\n        Message::Quit => {\n            println!(\"The Quit variant has no data to destructure.\")\n        }\n        Message::Move { x, y } => {\n            println!(\n                \"Move in the x direction {} and in the y direction {}\",\n                x, y\n            );\n        }\n        Message::Write(text) => println!(\"Text message: {}\", text),\n        Message::ChangeColor(r, g, b) => println!(\n            \"Change the color to red {}, green {}, and blue {}\",\n            r, g, b\n        ),\n    }\n}\n```\n\n<span class=\"caption\">Listing 18-15: Destructuring enum variants that hold\ndifferent kinds of values</span>\n\nThis code will print `Change the color to red 0, green 160, and blue 255`. Try\nchanging the value of `msg` to see the code from the other arms run.\n\nFor enum variants without any data, like `Message::Quit`, we can’t destructure\nthe value any further. We can only match on the literal `Message::Quit` value,\nand no variables are in that pattern.\n\nFor struct-like enum variants, such as `Message::Move`, we can use a pattern\nsimilar to the pattern we specify to match structs. After the variant name, we\nplace curly brackets and then list the fields with variables so we break apart\nthe pieces to use in the code for this arm. Here we use the shorthand form as\nwe did in Listing 18-13.\n\nFor tuple-like enum variants, like `Message::Write` that holds a tuple with one\nelement and `Message::ChangeColor` that holds a tuple with three elements, the\npattern is similar to the pattern we specify to match tuples. The number of\nvariables in the pattern must match the number of elements in the variant we’re\nmatching.\n\n#### Destructuring Nested Structs and Enums\n\nUntil now, all our examples have been matching structs or enums that were one\nlevel deep. Matching can work on nested items too!\n\nFor example, we can refactor the code in Listing 18-15 to support RGB and HSV\ncolors in the `ChangeColor` message, as shown in Listing 18-16.\n\n```rust\nenum Color {\n    Rgb(i32, i32, i32),\n    Hsv(i32, i32, i32),\n}\n\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(Color),\n}\n\nfn main() {\n    let msg = Message::ChangeColor(Color::Hsv(0, 160, 255));\n\n    match msg {\n        Message::ChangeColor(Color::Rgb(r, g, b)) => println!(\n            \"Change the color to red {}, green {}, and blue {}\",\n            r, g, b\n        ),\n        Message::ChangeColor(Color::Hsv(h, s, v)) => println!(\n            \"Change the color to hue {}, saturation {}, and value {}\",\n            h, s, v\n        ),\n        _ => (),\n    }\n}\n```\n\n<span class=\"caption\">Listing 18-16: Matching on nested enums</span>\n\nThe pattern of the first arm in the `match` expression matches a\n`Message::ChangeColor` enum variant that contains a `Color::Rgb` variant; then\nthe pattern binds to the three inner `i32` values. The pattern of the second\narm also matches a `Message::ChangeColor` enum variant, but the inner enum\nmatches the `Color::Hsv` variant instead. We can specify these complex\nconditions in one `match` expression, even though two enums are involved.\n\n#### Destructuring Structs and Tuples\n\nWe can mix, match, and nest destructuring patterns in even more complex ways.\nThe following example shows a complicated destructure where we nest structs and\ntuples inside a tuple and destructure all the primitive values out:\n\n```rust\n# fn main() {\n#     struct Point {\n#         x: i32,\n#         y: i32,\n#     }\n# \n    let ((feet, inches), Point { x, y }) = ((3, 10), Point { x: 3, y: -10 });\n# }\n```\n\nThis code lets us break complex types into their component parts so we can use\nthe values we’re interested in separately.\n\nDestructuring with patterns is a convenient way to use pieces of values, such\nas the value from each field in a struct, separately from each other.\n\n### Ignoring Values in a Pattern\n\nYou’ve seen that it’s sometimes useful to ignore values in a pattern, such as\nin the last arm of a `match`, to get a catchall that doesn’t actually do\nanything but does account for all remaining possible values. There are a few\nways to ignore entire values or parts of values in a pattern: using the `_`\npattern (which you’ve seen), using the `_` pattern within another pattern,\nusing a name that starts with an underscore, or using `..` to ignore remaining\nparts of a value. Let’s explore how and why to use each of these patterns.\n\n#### Ignoring an Entire Value with `_`\n\nWe’ve used the underscore (`_`) as a wildcard pattern that will match any value\nbut not bind to the value. Although the underscore `_` pattern is especially\nuseful as the last arm in a `match` expression, we can use it in any pattern,\nincluding function parameters, as shown in Listing 18-17.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn foo(_: i32, y: i32) {\n    println!(\"This code only uses the y parameter: {}\", y);\n}\n\nfn main() {\n    foo(3, 4);\n}\n```\n\n<span class=\"caption\">Listing 18-17: Using `_` in a function signature</span>\n\nThis code will completely ignore the value passed as the first argument, `3`,\nand will print `This code only uses the y parameter: 4`.\n\nIn most cases when you no longer need a particular function parameter, you\nwould change the signature so it doesn’t include the unused parameter. Ignoring\na function parameter can be especially useful in some cases, for example, when\nimplementing a trait when you need a certain type signature but the function\nbody in your implementation doesn’t need one of the parameters. The compiler\nwill then not warn about unused function parameters, as it would if you used a\nname instead.\n\n#### Ignoring Parts of a Value with a Nested `_`\n\nWe can also use `_` inside another pattern to ignore just part of a value, for\nexample, when we want to test for only part of a value but have no use for the\nother parts in the corresponding code we want to run. Listing 18-18 shows code\nresponsible for managing a setting’s value. The business requirements are that\nthe user should not be allowed to overwrite an existing customization of a\nsetting but can unset the setting and give it a value if it is currently unset.\n\n```rust\n# fn main() {\n    let mut setting_value = Some(5);\n    let new_setting_value = Some(10);\n\n    match (setting_value, new_setting_value) {\n        (Some(_), Some(_)) => {\n            println!(\"Can\'t overwrite an existing customized value\");\n        }\n        _ => {\n            setting_value = new_setting_value;\n        }\n    }\n\n    println!(\"setting is {:?}\", setting_value);\n# }\n```\n\n<span class=\"caption\">Listing 18-18: Using an underscore within patterns that\nmatch `Some` variants when we don’t need to use the value inside the\n`Some`</span>\n\nThis code will print `Can\'t overwrite an existing customized value` and then\n`setting is Some(5)`. In the first match arm, we don’t need to match on or use\nthe values inside either `Some` variant, but we do need to test for the case\nwhen `setting_value` and `new_setting_value` are the `Some` variant. In that\ncase, we print why we’re not changing `setting_value`, and it doesn’t get\nchanged.\n\nIn all other cases (if either `setting_value` or `new_setting_value` are\n`None`) expressed by the `_` pattern in the second arm, we want to allow\n`new_setting_value` to become `setting_value`.\n\nWe can also use underscores in multiple places within one pattern to ignore\nparticular values. Listing 18-19 shows an example of ignoring the second and\nfourth values in a tuple of five items.\n\n```rust\n# fn main() {\n    let numbers = (2, 4, 8, 16, 32);\n\n    match numbers {\n        (first, _, third, _, fifth) => {\n            println!(\"Some numbers: {}, {}, {}\", first, third, fifth)\n        }\n    }\n# }\n```\n\n<span class=\"caption\">Listing 18-19: Ignoring multiple parts of a tuple</span>\n\nThis code will print `Some numbers: 2, 8, 32`, and the values 4 and 16 will be\nignored.\n\n#### Ignoring an Unused Variable by Starting Its Name with `_`\n\nIf you create a variable but don’t use it anywhere, Rust will usually issue a\nwarning because that could be a bug. But sometimes it’s useful to create a\nvariable you won’t use yet, such as when you’re prototyping or just starting a\nproject. In this situation, you can tell Rust not to warn you about the unused\nvariable by starting the name of the variable with an underscore. In Listing\n18-20, we create two unused variables, but when we run this code, we should\nonly get a warning about one of them.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let _x = 5;\n    let y = 10;\n}\n```\n\n<span class=\"caption\">Listing 18-20: Starting a variable name with an\nunderscore to avoid getting unused variable warnings</span>\n\nHere we get a warning about not using the variable `y`, but we don’t get a\nwarning about not using the variable preceded by the underscore.\n\nNote that there is a subtle difference between using only `_` and using a name\nthat starts with an underscore. The syntax `_x` still binds the value to the\nvariable, whereas `_` doesn’t bind at all. To show a case where this\ndistinction matters, Listing 18-21 will provide us with an error.\n\n```rust,ignore,does_not_compile\n# fn main() {\n    let s = Some(String::from(\"Hello!\"));\n\n    if let Some(_s) = s {\n        println!(\"found a string\");\n    }\n\n    println!(\"{:?}\", s);\n# }\n```\n\n<span class=\"caption\">Listing 18-21: An unused variable starting with an\nunderscore still binds the value, which might take ownership of the value</span>\n\nWe’ll receive an error because the `s` value will still be moved into `_s`,\nwhich prevents us from using `s` again. However, using the underscore by itself\ndoesn’t ever bind to the value. Listing 18-22 will compile without any errors\nbecause `s` doesn’t get moved into `_`.\n\n```rust\n# fn main() {\n    let s = Some(String::from(\"Hello!\"));\n\n    if let Some(_) = s {\n        println!(\"found a string\");\n    }\n\n    println!(\"{:?}\", s);\n# }\n```\n\n<span class=\"caption\">Listing 18-22: Using an underscore does not bind the\nvalue</span>\n\nThis code works just fine because we never bind `s` to anything; it isn’t moved.\n\n#### Ignoring Remaining Parts of a Value with `..`\n\nWith values that have many parts, we can use the `..` syntax to use only a few\nparts and ignore the rest, avoiding the need to list underscores for each\nignored value. The `..` pattern ignores any parts of a value that we haven’t\nexplicitly matched in the rest of the pattern. In Listing 18-23, we have a\n`Point` struct that holds a coordinate in three-dimensional space. In the\n`match` expression, we want to operate only on the `x` coordinate and ignore\nthe values in the `y` and `z` fields.\n\n```rust\n# fn main() {\n    struct Point {\n        x: i32,\n        y: i32,\n        z: i32,\n    }\n\n    let origin = Point { x: 0, y: 0, z: 0 };\n\n    match origin {\n        Point { x, .. } => println!(\"x is {}\", x),\n    }\n# }\n```\n\n<span class=\"caption\">Listing 18-23: Ignoring all fields of a `Point` except\nfor `x` by using `..`</span>\n\nWe list the `x` value and then just include the `..` pattern. This is quicker\nthan having to list `y: _` and `z: _`, particularly when we’re working with\nstructs that have lots of fields in situations where only one or two fields are\nrelevant.\n\nThe syntax `..` will expand to as many values as it needs to be. Listing 18-24\nshows how to use `..` with a tuple.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let numbers = (2, 4, 8, 16, 32);\n\n    match numbers {\n        (first, .., last) => {\n            println!(\"Some numbers: {}, {}\", first, last);\n        }\n    }\n}\n```\n\n<span class=\"caption\">Listing 18-24: Matching only the first and last values in\na tuple and ignoring all other values</span>\n\nIn this code, the first and last value are matched with `first` and `last`. The\n`..` will match and ignore everything in the middle.\n\nHowever, using `..` must be unambiguous. If it is unclear which values are\nintended for matching and which should be ignored, Rust will give us an error.\nListing 18-25 shows an example of using `..` ambiguously, so it will not\ncompile.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn main() {\n    let numbers = (2, 4, 8, 16, 32);\n\n    match numbers {\n        (.., second, ..) => {\n            println!(\"Some numbers: {}\", second)\n        },\n    }\n}\n```\n\n<span class=\"caption\">Listing 18-25: An attempt to use `..` in an ambiguous\nway</span>\n\nWhen we compile this example, we get this error:\n\n```text\n$ cargo run\n   Compiling patterns v0.1.0 (file:///projects/patterns)\nerror: `..` can only be used once per tuple pattern\n --> src/main.rs:5:22\n  |\n5 |         (.., second, ..) => {\n  |          --          ^^ can only be used once per tuple pattern\n  |          |\n  |          previously used here\n\nerror: aborting due to previous error\n\nerror: could not compile `patterns`.\n\nTo learn more, run the command again with --verbose.\n```\n\nIt’s impossible for Rust to determine how many values in the tuple to ignore\nbefore matching a value with `second` and then how many further values to\nignore thereafter. This code could mean that we want to ignore `2`, bind\n`second` to `4`, and then ignore `8`, `16`, and `32`; or that we want to ignore\n`2` and `4`, bind `second` to `8`, and then ignore `16` and `32`; and so forth.\nThe variable name `second` doesn’t mean anything special to Rust, so we get a\ncompiler error because using `..` in two places like this is ambiguous.\n\n### Extra Conditionals with Match Guards\n\nA *match guard* is an additional `if` condition specified after the pattern in\na `match` arm that must also match, along with the pattern matching, for that\narm to be chosen. Match guards are useful for expressing more complex ideas\nthan a pattern alone allows.\n\nThe condition can use variables created in the pattern. Listing 18-26 shows a\n`match` where the first arm has the pattern `Some(x)` and also has a match\nguard of `if x < 5`.\n\n```rust\n# fn main() {\n    let num = Some(4);\n\n    match num {\n        Some(x) if x < 5 => println!(\"less than five: {}\", x),\n        Some(x) => println!(\"{}\", x),\n        None => (),\n    }\n# }\n```\n\n<span class=\"caption\">Listing 18-26: Adding a match guard to a pattern</span>\n\nThis example will print `less than five: 4`. When `num` is compared to the\npattern in the first arm, it matches, because `Some(4)` matches `Some(x)`. Then\nthe match guard checks whether the value in `x` is less than `5`, and because\nit is, the first arm is selected.\n\nIf `num` had been `Some(10)` instead, the match guard in the first arm would\nhave been false because 10 is not less than 5. Rust would then go to the second\narm, which would match because the second arm doesn’t have a match guard and\ntherefore matches any `Some` variant.\n\nThere is no way to express the `if x < 5` condition within a pattern, so the\nmatch guard gives us the ability to express this logic.\n\nIn Listing 18-11, we mentioned that we could use match guards to solve our\npattern-shadowing problem. Recall that a new variable was created inside the\npattern in the `match` expression instead of using the variable outside the\n`match`. That new variable meant we couldn’t test against the value of the\nouter variable. Listing 18-27 shows how we can use a match guard to fix this\nproblem.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x = Some(5);\n    let y = 10;\n\n    match x {\n        Some(50) => println!(\"Got 50\"),\n        Some(n) if n == y => println!(\"Matched, n = {}\", n),\n        _ => println!(\"Default case, x = {:?}\", x),\n    }\n\n    println!(\"at the end: x = {:?}, y = {}\", x, y);\n}\n```\n\n<span class=\"caption\">Listing 18-27: Using a match guard to test for equality\nwith an outer variable</span>\n\nThis code will now print `Default case, x = Some(5)`. The pattern in the second\nmatch arm doesn’t introduce a new variable `y` that would shadow the outer `y`,\nmeaning we can use the outer `y` in the match guard. Instead of specifying the\npattern as `Some(y)`, which would have shadowed the outer `y`, we specify\n`Some(n)`. This creates a new variable `n` that doesn’t shadow anything because\nthere is no `n` variable outside the `match`.\n\nThe match guard `if n == y` is not a pattern and therefore doesn’t introduce\nnew variables. This `y` *is* the outer `y` rather than a new shadowed `y`, and\nwe can look for a value that has the same value as the outer `y` by comparing\n`n` to `y`.\n\nYou can also use the *or* operator `|` in a match guard to specify multiple\npatterns; the match guard condition will apply to all the patterns. Listing\n18-28 shows the precedence of combining a match guard with a pattern that uses\n`|`. The important part of this example is that the `if y` match guard applies\nto `4`, `5`, *and* `6`, even though it might look like `if y` only applies to\n`6`.\n\n```rust\n# fn main() {\n    let x = 4;\n    let y = false;\n\n    match x {\n        4 | 5 | 6 if y => println!(\"yes\"),\n        _ => println!(\"no\"),\n    }\n# }\n```\n\n<span class=\"caption\">Listing 18-28: Combining multiple patterns with a match\nguard</span>\n\nThe match condition states that the arm only matches if the value of `x` is\nequal to `4`, `5`, or `6` *and* if `y` is `true`. When this code runs, the\npattern of the first arm matches because `x` is `4`, but the match guard `if y`\nis false, so the first arm is not chosen. The code moves on to the second arm,\nwhich does match, and this program prints `no`. The reason is that the `if`\ncondition applies to the whole pattern `4 | 5 | 6`, not only to the last value\n`6`. In other words, the precedence of a match guard in relation to a pattern\nbehaves like this:\n\n```text\n(4 | 5 | 6) if y => ...\n```\n\nrather than this:\n\n```text\n4 | 5 | (6 if y) => ...\n```\n\nAfter running the code, the precedence behavior is evident: if the match guard\nwere applied only to the final value in the list of values specified using the\n`|` operator, the arm would have matched and the program would have printed\n`yes`.\n\n### `@` Bindings\n\nThe *at* operator (`@`) lets us create a variable that holds a value at the\nsame time we’re testing that value to see whether it matches a pattern. Listing\n18-29 shows an example where we want to test that a `Message::Hello` `id` field\nis within the range `3..=7`. But we also want to bind the value to the variable\n`id_variable` so we can use it in the code associated with the arm. We could\nname this variable `id`, the same as the field, but for this example we’ll use\na different name.\n\n```rust\n# fn main() {\n    enum Message {\n        Hello { id: i32 },\n    }\n\n    let msg = Message::Hello { id: 5 };\n\n    match msg {\n        Message::Hello {\n            id: id_variable @ 3..=7,\n        } => println!(\"Found an id in range: {}\", id_variable),\n        Message::Hello { id: 10..=12 } => {\n            println!(\"Found an id in another range\")\n        }\n        Message::Hello { id } => println!(\"Found some other id: {}\", id),\n    }\n# }\n```\n\n<span class=\"caption\">Listing 18-29: Using `@` to bind to a value in a pattern\nwhile also testing it</span>\n\nThis example will print `Found an id in range: 5`. By specifying `id_variable\n@` before the range `3..=7`, we’re capturing whatever value matched the range\nwhile also testing that the value matched the range pattern.\n\nIn the second arm, where we only have a range specified in the pattern, the code\nassociated with the arm doesn’t have a variable that contains the actual value\nof the `id` field. The `id` field’s value could have been 10, 11, or 12, but\nthe code that goes with that pattern doesn’t know which it is. The pattern code\nisn’t able to use the value from the `id` field, because we haven’t saved the\n`id` value in a variable.\n\nIn the last arm, where we’ve specified a variable without a range, we do have\nthe value available to use in the arm’s code in a variable named `id`. The\nreason is that we’ve used the struct field shorthand syntax. But we haven’t\napplied any test to the value in the `id` field in this arm, as we did with the\nfirst two arms: any value would match this pattern.\n\nUsing `@` lets us test a value and save it in a variable within one pattern.\n\n## Summary\n\nRust’s patterns are very useful in that they help distinguish between different\nkinds of data. When used in `match` expressions, Rust ensures your patterns\ncover every possible value, or your program won’t compile. Patterns in `let`\nstatements and function parameters make those constructs more useful, enabling\nthe destructuring of values into smaller parts at the same time as assigning to\nvariables. We can create simple or complex patterns to suit our needs.\n\nNext, for the penultimate chapter of the book, we’ll look at some advanced\naspects of a variety of Rust’s features.\n", number: Some(SectionNumber([18, 3])), sub_items: [], path: "ch18-03-pattern-syntax.md", parent_names: ["Patterns and Matching"] })], path: "ch18-00-patterns.md", parent_names: [] }), Chapter(Chapter { name: "Advanced Features", content: "# Advanced Features\n\nBy now, you’ve learned the most commonly used parts of the Rust programming\nlanguage. Before we do one more project in Chapter 20, we’ll look at a few\naspects of the language you might run into every once in a while. You can use\nthis chapter as a reference for when you encounter any unknowns when using\nRust. The features you’ll learn to use in this chapter are useful in very\nspecific situations. Although you might not reach for them often, we want to\nmake sure you have a grasp of all the features Rust has to offer.\n\nIn this chapter, we’ll cover:\n\n* Unsafe Rust: how to opt out of some of Rust’s guarantees and take\n  responsibility for manually upholding those guarantees\n* Advanced traits: associated types, default type parameters, fully qualified\n  syntax, supertraits, and the newtype pattern in relation to traits\n* Advanced types: more about the newtype pattern, type aliases, the never type,\n  and dynamically sized types\n* Advanced functions and closures: function pointers and returning closures\n* Macros: ways to define code that defines more code at compile time\n\nIt’s a panoply of Rust features with something for everyone! Let’s dive in!\n", number: Some(SectionNumber([19])), sub_items: [Chapter(Chapter { name: "Unsafe Rust", content: "## Unsafe Rust\n\nAll the code we’ve discussed so far has had Rust’s memory safety guarantees\nenforced at compile time. However, Rust has a second language hidden inside it\nthat doesn’t enforce these memory safety guarantees: it’s called *unsafe Rust*\nand works just like regular Rust, but gives us extra superpowers.\n\nUnsafe Rust exists because, by nature, static analysis is conservative. When\nthe compiler tries to determine whether or not code upholds the guarantees,\nit’s better for it to reject some valid programs rather than accept some\ninvalid programs. Although the code might be okay, as far as Rust is able to\ntell, it’s not! In these cases, you can use unsafe code to tell the compiler,\n“Trust me, I know what I’m doing.” The downside is that you use it at your own\nrisk: if you use unsafe code incorrectly, problems due to memory unsafety, such\nas null pointer dereferencing, can occur.\n\nAnother reason Rust has an unsafe alter ego is that the underlying computer\nhardware is inherently unsafe. If Rust didn’t let you do unsafe operations, you\ncouldn’t do certain tasks. Rust needs to allow you to do low-level systems\nprogramming, such as directly interacting with the operating system or even\nwriting your own operating system. Working with low-level systems programming\nis one of the goals of the language. Let’s explore what we can do with unsafe\nRust and how to do it.\n\n### Unsafe Superpowers\n\nTo switch to unsafe Rust, use the `unsafe` keyword and then start a new block\nthat holds the unsafe code. You can take five actions in unsafe Rust, called\n*unsafe superpowers*, that you can’t in safe Rust. Those superpowers include\nthe ability to:\n\n* Dereference a raw pointer\n* Call an unsafe function or method\n* Access or modify a mutable static variable\n* Implement an unsafe trait\n* Access fields of `union`s\n\nIt’s important to understand that `unsafe` doesn’t turn off the borrow checker\nor disable any other of Rust’s safety checks: if you use a reference in unsafe\ncode, it will still be checked. The `unsafe` keyword only gives you access to\nthese five features that are then not checked by the compiler for memory\nsafety. You’ll still get some degree of safety inside of an unsafe block.\n\nIn addition, `unsafe` does not mean the code inside the block is necessarily\ndangerous or that it will definitely have memory safety problems: the intent is\nthat as the programmer, you’ll ensure the code inside an `unsafe` block will\naccess memory in a valid way.\n\nPeople are fallible, and mistakes will happen, but by requiring these five\nunsafe operations to be inside blocks annotated with `unsafe` you’ll know that\nany errors related to memory safety must be within an `unsafe` block. Keep\n`unsafe` blocks small; you’ll be thankful later when you investigate memory\nbugs.\n\nTo isolate unsafe code as much as possible, it’s best to enclose unsafe code\nwithin a safe abstraction and provide a safe API, which we’ll discuss later in\nthe chapter when we examine unsafe functions and methods. Parts of the standard\nlibrary are implemented as safe abstractions over unsafe code that has been\naudited. Wrapping unsafe code in a safe abstraction prevents uses of `unsafe`\nfrom leaking out into all the places that you or your users might want to use\nthe functionality implemented with `unsafe` code, because using a safe\nabstraction is safe.\n\nLet’s look at each of the five unsafe superpowers in turn. We’ll also look at\nsome abstractions that provide a safe interface to unsafe code.\n\n### Dereferencing a Raw Pointer\n\nIn Chapter 4, in the [“Dangling References”][dangling-references]<!-- ignore\n--> section, we mentioned that the compiler ensures references are always\nvalid. Unsafe Rust has two new types called *raw pointers* that are similar to\nreferences. As with references, raw pointers can be immutable or mutable and\nare written as `*const T` and `*mut T`, respectively. The asterisk isn’t the\ndereference operator; it’s part of the type name. In the context of raw\npointers, *immutable* means that the pointer can’t be directly assigned to\nafter being dereferenced.\n\nDifferent from references and smart pointers, raw pointers:\n\n* Are allowed to ignore the borrowing rules by having both immutable and\n  mutable pointers or multiple mutable pointers to the same location\n* Aren’t guaranteed to point to valid memory\n* Are allowed to be null\n* Don’t implement any automatic cleanup\n\nBy opting out of having Rust enforce these guarantees, you can give up\nguaranteed safety in exchange for greater performance or the ability to\ninterface with another language or hardware where Rust’s guarantees don’t apply.\n\nListing 19-1 shows how to create an immutable and a mutable raw pointer from\nreferences.\n\n```rust\n# fn main() {\n    let mut num = 5;\n\n    let r1 = &num as *const i32;\n    let r2 = &mut num as *mut i32;\n# }\n```\n\n<span class=\"caption\">Listing 19-1: Creating raw pointers from references</span>\n\nNotice that we don’t include the `unsafe` keyword in this code. We can create\nraw pointers in safe code; we just can’t dereference raw pointers outside an\nunsafe block, as you’ll see in a bit.\n\nWe’ve created raw pointers by using `as` to cast an immutable and a mutable\nreference into their corresponding raw pointer types. Because we created them\ndirectly from references guaranteed to be valid, we know these particular raw\npointers are valid, but we can’t make that assumption about just any raw\npointer.\n\nNext, we’ll create a raw pointer whose validity we can’t be so certain of.\nListing 19-2 shows how to create a raw pointer to an arbitrary location in\nmemory. Trying to use arbitrary memory is undefined: there might be data at\nthat address or there might not, the compiler might optimize the code so there\nis no memory access, or the program might error with a segmentation fault.\nUsually, there is no good reason to write code like this, but it is possible.\n\n```rust\n# fn main() {\n    let address = 0x012345usize;\n    let r = address as *const i32;\n# }\n```\n\n<span class=\"caption\">Listing 19-2: Creating a raw pointer to an arbitrary\nmemory address</span>\n\nRecall that we can create raw pointers in safe code, but we can’t *dereference*\nraw pointers and read the data being pointed to. In Listing 19-3, we use the\ndereference operator `*` on a raw pointer that requires an `unsafe` block.\n\n```rust,unsafe\n# fn main() {\n    let mut num = 5;\n\n    let r1 = &num as *const i32;\n    let r2 = &mut num as *mut i32;\n\n    unsafe {\n        println!(\"r1 is: {}\", *r1);\n        println!(\"r2 is: {}\", *r2);\n    }\n# }\n```\n\n<span class=\"caption\">Listing 19-3: Dereferencing raw pointers within an\n`unsafe` block</span>\n\nCreating a pointer does no harm; it’s only when we try to access the value that\nit points at that we might end up dealing with an invalid value.\n\nNote also that in Listing 19-1 and 19-3, we created `*const i32` and `*mut i32`\nraw pointers that both pointed to the same memory location, where `num` is\nstored. If we instead tried to create an immutable and a mutable reference to\n`num`, the code would not have compiled because Rust’s ownership rules don’t\nallow a mutable reference at the same time as any immutable references. With\nraw pointers, we can create a mutable pointer and an immutable pointer to the\nsame location and change data through the mutable pointer, potentially creating\na data race. Be careful!\n\nWith all of these dangers, why would you ever use raw pointers? One major use\ncase is when interfacing with C code, as you’ll see in the next section,\n[“Calling an Unsafe Function or\nMethod.”](#calling-an-unsafe-function-or-method)<!-- ignore --> Another case is\nwhen building up safe abstractions that the borrow checker doesn’t understand.\nWe’ll introduce unsafe functions and then look at an example of a safe\nabstraction that uses unsafe code.\n\n### Calling an Unsafe Function or Method\n\nThe second type of operation that requires an unsafe block is calls to unsafe\nfunctions. Unsafe functions and methods look exactly like regular functions and\nmethods, but they have an extra `unsafe` before the rest of the definition. The\n`unsafe` keyword in this context indicates the function has requirements we\nneed to uphold when we call this function, because Rust can’t guarantee we’ve\nmet these requirements. By calling an unsafe function within an `unsafe` block,\nwe’re saying that we’ve read this function’s documentation and take\nresponsibility for upholding the function’s contracts.\n\nHere is an unsafe function named `dangerous` that doesn’t do anything in its\nbody:\n\n```rust,unsafe\n# fn main() {\n    unsafe fn dangerous() {}\n\n    unsafe {\n        dangerous();\n    }\n# }\n```\n\nWe must call the `dangerous` function within a separate `unsafe` block. If we\ntry to call `dangerous` without the `unsafe` block, we’ll get an error:\n\n```text\n$ cargo run\n   Compiling unsafe-example v0.1.0 (file:///projects/unsafe-example)\nerror[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n --> src/main.rs:4:5\n  |\n4 |     dangerous();\n  |     ^^^^^^^^^^^ call to unsafe function\n  |\n  = note: consult the function\'s documentation for information on how to avoid undefined behavior\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0133`.\nerror: could not compile `unsafe-example`.\n\nTo learn more, run the command again with --verbose.\n```\n\nBy inserting the `unsafe` block around our call to `dangerous`, we’re asserting\nto Rust that we’ve read the function’s documentation, we understand how to use\nit properly, and we’ve verified that we’re fulfilling the contract of the\nfunction.\n\nBodies of unsafe functions are effectively `unsafe` blocks, so to perform other\nunsafe operations within an unsafe function, we don’t need to add another\n`unsafe` block.\n\n#### Creating a Safe Abstraction over Unsafe Code\n\nJust because a function contains unsafe code doesn’t mean we need to mark the\nentire function as unsafe. In fact, wrapping unsafe code in a safe function is\na common abstraction. As an example, let’s study a function from the standard\nlibrary, `split_at_mut`, that requires some unsafe code and explore how we\nmight implement it. This safe method is defined on mutable slices: it takes one\nslice and makes it two by splitting the slice at the index given as an\nargument. Listing 19-4 shows how to use `split_at_mut`.\n\n```rust\n# fn main() {\n    let mut v = vec![1, 2, 3, 4, 5, 6];\n\n    let r = &mut v[..];\n\n    let (a, b) = r.split_at_mut(3);\n\n    assert_eq!(a, &mut [1, 2, 3]);\n    assert_eq!(b, &mut [4, 5, 6]);\n# }\n```\n\n<span class=\"caption\">Listing 19-4: Using the safe `split_at_mut`\nfunction</span>\n\nWe can’t implement this function using only safe Rust. An attempt might look\nsomething like Listing 19-5, which won’t compile. For simplicity, we’ll\nimplement `split_at_mut` as a function rather than a method and only for slices\nof `i32` values rather than for a generic type `T`.\n\n```rust,ignore,does_not_compile\nfn split_at_mut(slice: &mut [i32], mid: usize) -> (&mut [i32], &mut [i32]) {\n    let len = slice.len();\n\n    assert!(mid <= len);\n\n    (&mut slice[..mid], &mut slice[mid..])\n}\n# \n# fn main() {\n#     let mut vector = vec![1, 2, 3, 4, 5, 6];\n#     let (left, right) = split_at_mut(&mut vector, 3);\n# }\n```\n\n<span class=\"caption\">Listing 19-5: An attempted implementation of\n`split_at_mut` using only safe Rust</span>\n\nThis function first gets the total length of the slice. Then it asserts that\nthe index given as a parameter is within the slice by checking whether it’s\nless than or equal to the length. The assertion means that if we pass an index\nthat is greater than the length to split the slice at, the function will panic\nbefore it attempts to use that index.\n\nThen we return two mutable slices in a tuple: one from the start of the\noriginal slice to the `mid` index and another from `mid` to the end of the\nslice.\n\nWhen we try to compile the code in Listing 19-5, we’ll get an error.\n\n```text\n$ cargo run\n   Compiling unsafe-example v0.1.0 (file:///projects/unsafe-example)\nerror[E0499]: cannot borrow `*slice` as mutable more than once at a time\n --> src/main.rs:6:30\n  |\n1 | fn split_at_mut(slice: &mut [i32], mid: usize) -> (&mut [i32], &mut [i32]) {\n  |                        - let\'s call the lifetime of this reference `\'1`\n...\n6 |     (&mut slice[..mid], &mut slice[mid..])\n  |     -------------------------^^^^^--------\n  |     |     |                  |\n  |     |     |                  second mutable borrow occurs here\n  |     |     first mutable borrow occurs here\n  |     returning this value requires that `*slice` is borrowed for `\'1`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0499`.\nerror: could not compile `unsafe-example`.\n\nTo learn more, run the command again with --verbose.\n```\n\nRust’s borrow checker can’t understand that we’re borrowing different parts of\nthe slice; it only knows that we’re borrowing from the same slice twice.\nBorrowing different parts of a slice is fundamentally okay because the two\nslices aren’t overlapping, but Rust isn’t smart enough to know this. When we\nknow code is okay, but Rust doesn’t, it’s time to reach for unsafe code.\n\nListing 19-6 shows how to use an `unsafe` block, a raw pointer, and some calls\nto unsafe functions to make the implementation of `split_at_mut` work.\n\n```rust,unsafe\nuse std::slice;\n\nfn split_at_mut(slice: &mut [i32], mid: usize) -> (&mut [i32], &mut [i32]) {\n    let len = slice.len();\n    let ptr = slice.as_mut_ptr();\n\n    assert!(mid <= len);\n\n    unsafe {\n        (\n            slice::from_raw_parts_mut(ptr, mid),\n            slice::from_raw_parts_mut(ptr.add(mid), len - mid),\n        )\n    }\n}\n# \n# fn main() {\n#     let mut vector = vec![1, 2, 3, 4, 5, 6];\n#     let (left, right) = split_at_mut(&mut vector, 3);\n# }\n```\n\n<span class=\"caption\">Listing 19-6: Using unsafe code in the implementation of\nthe `split_at_mut` function</span>\n\nRecall from [“The Slice Type”][the-slice-type]<!-- ignore --> section in\nChapter 4 that slices are a pointer to some data and the length of the slice.\nWe use the `len` method to get the length of a slice and the `as_mut_ptr`\nmethod to access the raw pointer of a slice. In this case, because we have a\nmutable slice to `i32` values, `as_mut_ptr` returns a raw pointer with the type\n`*mut i32`, which we’ve stored in the variable `ptr`.\n\nWe keep the assertion that the `mid` index is within the slice. Then we get to\nthe unsafe code: the `slice::from_raw_parts_mut` function takes a raw pointer\nand a length, and it creates a slice. We use this function to create a slice\nthat starts from `ptr` and is `mid` items long. Then we call the `add`\nmethod on `ptr` with `mid` as an argument to get a raw pointer that starts at\n`mid`, and we create a slice using that pointer and the remaining number of\nitems after `mid` as the length.\n\nThe function `slice::from_raw_parts_mut` is unsafe because it takes a raw\npointer and must trust that this pointer is valid. The `add` method on raw\npointers is also unsafe, because it must trust that the offset location is also\na valid pointer. Therefore, we had to put an `unsafe` block around our calls to\n`slice::from_raw_parts_mut` and `add` so we could call them. By looking at\nthe code and by adding the assertion that `mid` must be less than or equal to\n`len`, we can tell that all the raw pointers used within the `unsafe` block\nwill be valid pointers to data within the slice. This is an acceptable and\nappropriate use of `unsafe`.\n\nNote that we don’t need to mark the resulting `split_at_mut` function as\n`unsafe`, and we can call this function from safe Rust. We’ve created a safe\nabstraction to the unsafe code with an implementation of the function that uses\n`unsafe` code in a safe way, because it creates only valid pointers from the\ndata this function has access to.\n\nIn contrast, the use of `slice::from_raw_parts_mut` in Listing 19-7 would\nlikely crash when the slice is used. This code takes an arbitrary memory\nlocation and creates a slice 10,000 items long.\n\n```rust,unsafe\n# fn main() {\n    use std::slice;\n\n    let address = 0x01234usize;\n    let r = address as *mut i32;\n\n    let slice: &[i32] = unsafe { slice::from_raw_parts_mut(r, 10000) };\n# }\n```\n\n<span class=\"caption\">Listing 19-7: Creating a slice from an arbitrary memory\nlocation</span>\n\nWe don’t own the memory at this arbitrary location, and there is no guarantee\nthat the slice this code creates contains valid `i32` values. Attempting to use\n`slice` as though it’s a valid slice results in undefined behavior.\n\n#### Using `extern` Functions to Call External Code\n\nSometimes, your Rust code might need to interact with code written in another\nlanguage. For this, Rust has a keyword, `extern`, that facilitates the creation\nand use of a *Foreign Function Interface (FFI)*. An FFI is a way for a\nprogramming language to define functions and enable a different (foreign)\nprogramming language to call those functions.\n\nListing 19-8 demonstrates how to set up an integration with the `abs` function\nfrom the C standard library. Functions declared within `extern` blocks are\nalways unsafe to call from Rust code. The reason is that other languages don’t\nenforce Rust’s rules and guarantees, and Rust can’t check them, so\nresponsibility falls on the programmer to ensure safety.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,unsafe\nextern \"C\" {\n    fn abs(input: i32) -> i32;\n}\n\nfn main() {\n    unsafe {\n        println!(\"Absolute value of -3 according to C: {}\", abs(-3));\n    }\n}\n```\n\n<span class=\"caption\">Listing 19-8: Declaring and calling an `extern` function\ndefined in another language</span>\n\nWithin the `extern \"C\"` block, we list the names and signatures of external\nfunctions from another language we want to call. The `\"C\"` part defines which\n*application binary interface (ABI)* the external function uses: the ABI\ndefines how to call the function at the assembly level. The `\"C\"` ABI is the\nmost common and follows the C programming language’s ABI.\n\n> #### Calling Rust Functions from Other Languages\n>\n> We can also use `extern` to create an interface that allows other languages\n> to call Rust functions. Instead of an `extern` block, we add the `extern`\n> keyword and specify the ABI to use just before the `fn` keyword. We also need\n> to add a `#[no_mangle]` annotation to tell the Rust compiler not to mangle\n> the name of this function. *Mangling* is when a compiler changes the name\n> we’ve given a function to a different name that contains more information for\n> other parts of the compilation process to consume but is less human readable.\n> Every programming language compiler mangles names slightly differently, so\n> for a Rust function to be nameable by other languages, we must disable the\n> Rust compiler’s name mangling.\n>\n> In the following example, we make the `call_from_c` function accessible from\n> C code, after it’s compiled to a shared library and linked from C:\n>\n> ```rust\n> #[no_mangle]\n> pub extern \"C\" fn call_from_c() {\n>     println!(\"Just called a Rust function from C!\");\n> }\n> ```\n>\n> This usage of `extern` does not require `unsafe`.\n\n### Accessing or Modifying a Mutable Static Variable\n\nUntil now, we’ve not talked about *global variables*, which Rust does support\nbut can be problematic with Rust’s ownership rules. If two threads are\naccessing the same mutable global variable, it can cause a data race.\n\nIn Rust, global variables are called *static* variables. Listing 19-9 shows an\nexample declaration and use of a static variable with a string slice as a\nvalue.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nstatic HELLO_WORLD: &str = \"Hello, world!\";\n\nfn main() {\n    println!(\"name is: {}\", HELLO_WORLD);\n}\n```\n\n<span class=\"caption\">Listing 19-9: Defining and using an immutable static\nvariable</span>\n\nStatic variables are similar to constants, which we discussed in the\n[“Differences Between Variables and\nConstants”][differences-between-variables-and-constants]<!-- ignore -->\nsection in Chapter 3. The names of static variables are in\n`SCREAMING_SNAKE_CASE` by convention, and we *must* annotate the variable’s\ntype, which is `&\'static str` in this example. Static variables can only store\nreferences with the `\'static` lifetime, which means the Rust compiler can\nfigure out the lifetime; we don’t need to annotate it explicitly. Accessing an\nimmutable static variable is safe.\n\nConstants and immutable static variables might seem similar, but a subtle\ndifference is that values in a static variable have a fixed address in memory.\nUsing the value will always access the same data. Constants, on the other hand,\nare allowed to duplicate their data whenever they’re used.\n\nAnother difference between constants and static variables is that static\nvariables can be mutable. Accessing and modifying mutable static variables is\n*unsafe*. Listing 19-10 shows how to declare, access, and modify a mutable\nstatic variable named `COUNTER`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,unsafe\nstatic mut COUNTER: u32 = 0;\n\nfn add_to_count(inc: u32) {\n    unsafe {\n        COUNTER += inc;\n    }\n}\n\nfn main() {\n    add_to_count(3);\n\n    unsafe {\n        println!(\"COUNTER: {}\", COUNTER);\n    }\n}\n```\n\n<span class=\"caption\">Listing 19-10: Reading from or writing to a mutable\nstatic variable is unsafe</span>\n\nAs with regular variables, we specify mutability using the `mut` keyword. Any\ncode that reads or writes from `COUNTER` must be within an `unsafe` block. This\ncode compiles and prints `COUNTER: 3` as we would expect because it’s single\nthreaded. Having multiple threads access `COUNTER` would likely result in data\nraces.\n\nWith mutable data that is globally accessible, it’s difficult to ensure there\nare no data races, which is why Rust considers mutable static variables to be\nunsafe. Where possible, it’s preferable to use the concurrency techniques and\nthread-safe smart pointers we discussed in Chapter 16 so the compiler checks\nthat data accessed from different threads is done safely.\n\n### Implementing an Unsafe Trait\n\nThe final action that works only with `unsafe` is implementing an unsafe trait.\nA trait is unsafe when at least one of its methods has some invariant that the\ncompiler can’t verify. We can declare that a trait is `unsafe` by adding the\n`unsafe` keyword before `trait` and marking the implementation of the trait as\n`unsafe` too, as shown in Listing 19-11.\n\n```rust,unsafe\nunsafe trait Foo {\n    // methods go here\n}\n\nunsafe impl Foo for i32 {\n    // method implementations go here\n}\n\nfn main() {}\n```\n\n<span class=\"caption\">Listing 19-11: Defining and implementing an unsafe\ntrait</span>\n\nBy using `unsafe impl`, we’re promising that we’ll uphold the invariants that\nthe compiler can’t verify.\n\nAs an example, recall the `Sync` and `Send` marker traits we discussed in the\n[“Extensible Concurrency with the `Sync` and `Send`\nTraits”][extensible-concurrency-with-the-sync-and-send-traits]<!-- ignore -->\nsection in Chapter 16: the compiler implements these traits automatically if\nour types are composed entirely of `Send` and `Sync` types. If we implement a\ntype that contains a type that is not `Send` or `Sync`, such as raw pointers,\nand we want to mark that type as `Send` or `Sync`, we must use `unsafe`. Rust\ncan’t verify that our type upholds the guarantees that it can be safely sent\nacross threads or accessed from multiple threads; therefore, we need to do\nthose checks manually and indicate as such with `unsafe`.\n\n### Accessing Fields of a Union\n\nA `union` is similar to a `struct`, but only one declared field is used in a\nparticular instance at one time. Unions are primarily used to interface with\nunions in C code. Accessing union fields is unsafe because Rust can’t guarantee\nthe type of the data currently being stored in the union instance. You can\nlearn more about unions in [the reference][reference].\n\n### When to Use Unsafe Code\n\nUsing `unsafe` to take one of the five actions (superpowers) just discussed\nisn’t wrong or even frowned upon. But it is trickier to get `unsafe` code\ncorrect because the compiler can’t help uphold memory safety. When you have a\nreason to use `unsafe` code, you can do so, and having the explicit `unsafe`\nannotation makes it easier to track down the source of problems when they occur.\n\n[dangling-references]:\nch04-02-references-and-borrowing.html#dangling-references\n[differences-between-variables-and-constants]:\nch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n[extensible-concurrency-with-the-sync-and-send-traits]:\nch16-04-extensible-concurrency-sync-and-send.html#extensible-concurrency-with-the-sync-and-send-traits\n[the-slice-type]: ch04-03-slices.html#the-slice-type\n[reference]: ../reference/items/unions.html\n", number: Some(SectionNumber([19, 1])), sub_items: [], path: "ch19-01-unsafe-rust.md", parent_names: ["Advanced Features"] }), Chapter(Chapter { name: "Advanced Traits", content: "## Advanced Traits\n\nWe first covered traits in the [“Traits: Defining Shared\nBehavior”][traits-defining-shared-behavior]<!-- ignore --> section of Chapter\n10, but as with lifetimes, we didn’t discuss the more advanced details. Now\nthat you know more about Rust, we can get into the nitty-gritty.\n\n### Specifying Placeholder Types in Trait Definitions with Associated Types\n\n*Associated types* connect a type placeholder with a trait such that the trait\nmethod definitions can use these placeholder types in their signatures. The\nimplementor of a trait will specify the concrete type to be used in this type’s\nplace for the particular implementation. That way, we can define a trait that\nuses some types without needing to know exactly what those types are until the\ntrait is implemented.\n\nWe’ve described most of the advanced features in this chapter as being rarely\nneeded. Associated types are somewhere in the middle: they’re used more rarely\nthan features explained in the rest of the book but more commonly than many of\nthe other features discussed in this chapter.\n\nOne example of a trait with an associated type is the `Iterator` trait that the\nstandard library provides. The associated type is named `Item` and stands in\nfor the type of the values the type implementing the `Iterator` trait is\niterating over. In [“The `Iterator` Trait and the `next`\nMethod”][the-iterator-trait-and-the-next-method]<!-- ignore --> section of\nChapter 13, we mentioned that the definition of the `Iterator` trait is as\nshown in Listing 19-12.\n\n```rust\npub trait Iterator {\n    type Item;\n\n    fn next(&mut self) -> Option<Self::Item>;\n}\n```\n\n<span class=\"caption\">Listing 19-12: The definition of the `Iterator` trait\nthat has an associated type `Item`</span>\n\nThe type `Item` is a placeholder type, and the `next` method’s definition shows\nthat it will return values of type `Option<Self::Item>`. Implementors of the\n`Iterator` trait will specify the concrete type for `Item`, and the `next`\nmethod will return an `Option` containing a value of that concrete type.\n\nAssociated types might seem like a similar concept to generics, in that the\nlatter allow us to define a function without specifying what types it can\nhandle. So why use associated types?\n\nLet’s examine the difference between the two concepts with an example from\nChapter 13 that implements the `Iterator` trait on the `Counter` struct. In\nListing 13-21, we specified that the `Item` type was `u32`:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n# struct Counter {\n#     count: u32,\n# }\n# \n# impl Counter {\n#     fn new() -> Counter {\n#         Counter { count: 0 }\n#     }\n# }\n# \nimpl Iterator for Counter {\n    type Item = u32;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        // --snip--\n#         if self.count < 5 {\n#             self.count += 1;\n#             Some(self.count)\n#         } else {\n#             None\n#         }\n#     }\n# }\n# \n# fn main() {}\n```\n\nThis syntax seems comparable to that of generics. So why not just define the\n`Iterator` trait with generics, as shown in Listing 19-13?\n\n```rust\npub trait Iterator<T> {\n    fn next(&mut self) -> Option<T>;\n}\n```\n\n<span class=\"caption\">Listing 19-13: A hypothetical definition of the\n`Iterator` trait using generics</span>\n\nThe difference is that when using generics, as in Listing 19-13, we must\nannotate the types in each implementation; because we can also implement\n`Iterator<String> for Counter` or any other type, we could have multiple\nimplementations of `Iterator` for `Counter`. In other words, when a trait has a\ngeneric parameter, it can be implemented for a type multiple times, changing\nthe concrete types of the generic type parameters each time. When we use the\n`next` method on `Counter`, we would have to provide type annotations to\nindicate which implementation of `Iterator` we want to use.\n\nWith associated types, we don’t need to annotate types because we can’t\nimplement a trait on a type multiple times. In Listing 19-12 with the\ndefinition that uses associated types, we can only choose what the type of\n`Item` will be once, because there can only be one `impl Iterator for Counter`.\nWe don’t have to specify that we want an iterator of `u32` values everywhere\nthat we call `next` on `Counter`.\n\n### Default Generic Type Parameters and Operator Overloading\n\nWhen we use generic type parameters, we can specify a default concrete type for\nthe generic type. This eliminates the need for implementors of the trait to\nspecify a concrete type if the default type works. The syntax for specifying a\ndefault type for a generic type is `<PlaceholderType=ConcreteType>` when\ndeclaring the generic type.\n\nA great example of a situation where this technique is useful is with operator\noverloading. *Operator overloading* is customizing the behavior of an operator\n(such as `+`) in particular situations.\n\nRust doesn’t allow you to create your own operators or overload arbitrary\noperators. But you can overload the operations and corresponding traits listed\nin `std::ops` by implementing the traits associated with the operator. For\nexample, in Listing 19-14 we overload the `+` operator to add two `Point`\ninstances together. We do this by implementing the `Add` trait on a `Point`\nstruct:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::ops::Add;\n\n#[derive(Debug, PartialEq)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl Add for Point {\n    type Output = Point;\n\n    fn add(self, other: Point) -> Point {\n        Point {\n            x: self.x + other.x,\n            y: self.y + other.y,\n        }\n    }\n}\n\nfn main() {\n    assert_eq!(\n        Point { x: 1, y: 0 } + Point { x: 2, y: 3 },\n        Point { x: 3, y: 3 }\n    );\n}\n```\n\n<span class=\"caption\">Listing 19-14: Implementing the `Add` trait to overload\nthe `+` operator for `Point` instances</span>\n\nThe `add` method adds the `x` values of two `Point` instances and the `y`\nvalues of two `Point` instances to create a new `Point`. The `Add` trait has an\nassociated type named `Output` that determines the type returned from the `add`\nmethod.\n\nThe default generic type in this code is within the `Add` trait. Here is its\ndefinition:\n\n```rust\ntrait Add<RHS=Self> {\n    type Output;\n\n    fn add(self, rhs: RHS) -> Self::Output;\n}\n```\n\nThis code should look generally familiar: a trait with one method and an\nassociated type. The new part is `RHS=Self`: this syntax is called *default\ntype parameters*. The `RHS` generic type parameter (short for “right hand\nside”) defines the type of the `rhs` parameter in the `add` method. If we don’t\nspecify a concrete type for `RHS` when we implement the `Add` trait, the type\nof `RHS` will default to `Self`, which will be the type we’re implementing\n`Add` on.\n\nWhen we implemented `Add` for `Point`, we used the default for `RHS` because we\nwanted to add two `Point` instances. Let’s look at an example of implementing\nthe `Add` trait where we want to customize the `RHS` type rather than using the\ndefault.\n\nWe have two structs, `Millimeters` and `Meters`, holding values in different\nunits. We want to add values in millimeters to values in meters and have the\nimplementation of `Add` do the conversion correctly. We can implement `Add` for\n`Millimeters` with `Meters` as the `RHS`, as shown in Listing 19-15.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nuse std::ops::Add;\n\nstruct Millimeters(u32);\nstruct Meters(u32);\n\nimpl Add<Meters> for Millimeters {\n    type Output = Millimeters;\n\n    fn add(self, other: Meters) -> Millimeters {\n        Millimeters(self.0 + (other.0 * 1000))\n    }\n}\n```\n\n<span class=\"caption\">Listing 19-15: Implementing the `Add` trait on\n`Millimeters` to add `Millimeters` to `Meters`</span>\n\nTo add `Millimeters` and `Meters`, we specify `impl Add<Meters>` to set the\nvalue of the `RHS` type parameter instead of using the default of `Self`.\n\nYou’ll use default type parameters in two main ways:\n\n* To extend a type without breaking existing code\n* To allow customization in specific cases most users won’t need\n\nThe standard library’s `Add` trait is an example of the second purpose:\nusually, you’ll add two like types, but the `Add` trait provides the ability to\ncustomize beyond that. Using a default type parameter in the `Add` trait\ndefinition means you don’t have to specify the extra parameter most of the\ntime. In other words, a bit of implementation boilerplate isn’t needed, making\nit easier to use the trait.\n\nThe first purpose is similar to the second but in reverse: if you want to add a\ntype parameter to an existing trait, you can give it a default to allow\nextension of the functionality of the trait without breaking the existing\nimplementation code.\n\n### Fully Qualified Syntax for Disambiguation: Calling Methods with the Same Name\n\nNothing in Rust prevents a trait from having a method with the same name as\nanother trait’s method, nor does Rust prevent you from implementing both traits\non one type. It’s also possible to implement a method directly on the type with\nthe same name as methods from traits.\n\nWhen calling methods with the same name, you’ll need to tell Rust which one you\nwant to use. Consider the code in Listing 19-16 where we’ve defined two traits,\n`Pilot` and `Wizard`, that both have a method called `fly`. We then implement\nboth traits on a type `Human` that already has a method named `fly` implemented\non it. Each `fly` method does something different.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\ntrait Pilot {\n    fn fly(&self);\n}\n\ntrait Wizard {\n    fn fly(&self);\n}\n\nstruct Human;\n\nimpl Pilot for Human {\n    fn fly(&self) {\n        println!(\"This is your captain speaking.\");\n    }\n}\n\nimpl Wizard for Human {\n    fn fly(&self) {\n        println!(\"Up!\");\n    }\n}\n\nimpl Human {\n    fn fly(&self) {\n        println!(\"*waving arms furiously*\");\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 19-16: Two traits are defined to have a `fly`\nmethod and are implemented on the `Human` type, and a `fly` method is\nimplemented on `Human` directly</span>\n\nWhen we call `fly` on an instance of `Human`, the compiler defaults to calling\nthe method that is directly implemented on the type, as shown in Listing 19-17.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# trait Pilot {\n#     fn fly(&self);\n# }\n# \n# trait Wizard {\n#     fn fly(&self);\n# }\n# \n# struct Human;\n# \n# impl Pilot for Human {\n#     fn fly(&self) {\n#         println!(\"This is your captain speaking.\");\n#     }\n# }\n# \n# impl Wizard for Human {\n#     fn fly(&self) {\n#         println!(\"Up!\");\n#     }\n# }\n# \n# impl Human {\n#     fn fly(&self) {\n#         println!(\"*waving arms furiously*\");\n#     }\n# }\n# \nfn main() {\n    let person = Human;\n    person.fly();\n}\n```\n\n<span class=\"caption\">Listing 19-17: Calling `fly` on an instance of\n`Human`</span>\n\nRunning this code will print `*waving arms furiously*`, showing that Rust\ncalled the `fly` method implemented on `Human` directly.\n\nTo call the `fly` methods from either the `Pilot` trait or the `Wizard` trait,\nwe need to use more explicit syntax to specify which `fly` method we mean.\nListing 19-18 demonstrates this syntax.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# trait Pilot {\n#     fn fly(&self);\n# }\n# \n# trait Wizard {\n#     fn fly(&self);\n# }\n# \n# struct Human;\n# \n# impl Pilot for Human {\n#     fn fly(&self) {\n#         println!(\"This is your captain speaking.\");\n#     }\n# }\n# \n# impl Wizard for Human {\n#     fn fly(&self) {\n#         println!(\"Up!\");\n#     }\n# }\n# \n# impl Human {\n#     fn fly(&self) {\n#         println!(\"*waving arms furiously*\");\n#     }\n# }\n# \nfn main() {\n    let person = Human;\n    Pilot::fly(&person);\n    Wizard::fly(&person);\n    person.fly();\n}\n```\n\n<span class=\"caption\">Listing 19-18: Specifying which trait’s `fly` method we\nwant to call</span>\n\nSpecifying the trait name before the method name clarifies to Rust which\nimplementation of `fly` we want to call. We could also write\n`Human::fly(&person)`, which is equivalent to the `person.fly()` that we used\nin Listing 19-18, but this is a bit longer to write if we don’t need to\ndisambiguate.\n\nRunning this code prints the following:\n\n```text\n$ cargo run\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.46s\n     Running `target/debug/traits-example`\nThis is your captain speaking.\nUp!\n*waving arms furiously*\n```\n\nBecause the `fly` method takes a `self` parameter, if we had two *types* that\nboth implement one *trait*, Rust could figure out which implementation of a\ntrait to use based on the type of `self`.\n\nHowever, associated functions that are part of traits don’t have a `self`\nparameter. When two types in the same scope implement that trait, Rust can’t\nfigure out which type you mean unless you use *fully qualified syntax*. For\nexample, the `Animal` trait in Listing 19-19 has the associated function\n`baby_name`, the implementation of `Animal` for the struct `Dog`, and the\nassociated function `baby_name` defined on `Dog` directly.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\ntrait Animal {\n    fn baby_name() -> String;\n}\n\nstruct Dog;\n\nimpl Dog {\n    fn baby_name() -> String {\n        String::from(\"Spot\")\n    }\n}\n\nimpl Animal for Dog {\n    fn baby_name() -> String {\n        String::from(\"puppy\")\n    }\n}\n\nfn main() {\n    println!(\"A baby dog is called a {}\", Dog::baby_name());\n}\n```\n\n<span class=\"caption\">Listing 19-19: A trait with an associated function and a\ntype with an associated function of the same name that also implements the\ntrait</span>\n\nThis code is for an animal shelter that wants to name all puppies Spot, which\nis implemented in the `baby_name` associated function that is defined on `Dog`.\nThe `Dog` type also implements the trait `Animal`, which describes\ncharacteristics that all animals have. Baby dogs are called puppies, and that\nis expressed in the implementation of the `Animal` trait on `Dog` in the\n`baby_name` function associated with the `Animal` trait.\n\nIn `main`, we call the `Dog::baby_name` function, which calls the associated\nfunction defined on `Dog` directly. This code prints the following:\n\n```text\n$ cargo run\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.54s\n     Running `target/debug/traits-example`\nA baby dog is called a Spot\n```\n\nThis output isn’t what we wanted. We want to call the `baby_name` function that\nis part of the `Animal` trait that we implemented on `Dog` so the code prints\n`A baby dog is called a puppy`. The technique of specifying the trait name that\nwe used in Listing 19-18 doesn’t help here; if we change `main` to the code in\nListing 19-20, we’ll get a compilation error.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n# trait Animal {\n#     fn baby_name() -> String;\n# }\n# \n# struct Dog;\n# \n# impl Dog {\n#     fn baby_name() -> String {\n#         String::from(\"Spot\")\n#     }\n# }\n# \n# impl Animal for Dog {\n#     fn baby_name() -> String {\n#         String::from(\"puppy\")\n#     }\n# }\n# \nfn main() {\n    println!(\"A baby dog is called a {}\", Animal::baby_name());\n}\n```\n\n<span class=\"caption\">Listing 19-20: Attempting to call the `baby_name`\nfunction from the `Animal` trait, but Rust doesn’t know which implementation to\nuse</span>\n\nBecause `Animal::baby_name` is an associated function rather than a method, and\nthus doesn’t have a `self` parameter, Rust can’t figure out which\nimplementation of `Animal::baby_name` we want. We’ll get this compiler error:\n\n```text\n$ cargo run\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\nerror[E0283]: type annotations needed\n  --> src/main.rs:20:43\n   |\n2  |     fn baby_name() -> String;\n   |     ------------------------- required by `Animal::baby_name`\n...\n20 |     println!(\"A baby dog is called a {}\", Animal::baby_name());\n   |                                           ^^^^^^^^^^^^^^^^^ cannot infer type\n   |\n   = note: cannot resolve `_: Animal`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0283`.\nerror: could not compile `traits-example`.\n\nTo learn more, run the command again with --verbose.\n```\n\nTo disambiguate and tell Rust that we want to use the implementation of\n`Animal` for `Dog`, we need to use fully qualified syntax. Listing 19-21\ndemonstrates how to use fully qualified syntax.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# trait Animal {\n#     fn baby_name() -> String;\n# }\n# \n# struct Dog;\n# \n# impl Dog {\n#     fn baby_name() -> String {\n#         String::from(\"Spot\")\n#     }\n# }\n# \n# impl Animal for Dog {\n#     fn baby_name() -> String {\n#         String::from(\"puppy\")\n#     }\n# }\n# \nfn main() {\n    println!(\"A baby dog is called a {}\", <Dog as Animal>::baby_name());\n}\n```\n\n<span class=\"caption\">Listing 19-21: Using fully qualified syntax to specify\nthat we want to call the `baby_name` function from the `Animal` trait as\nimplemented on `Dog`</span>\n\nWe’re providing Rust with a type annotation within the angle brackets, which\nindicates we want to call the `baby_name` method from the `Animal` trait as\nimplemented on `Dog` by saying that we want to treat the `Dog` type as an\n`Animal` for this function call. This code will now print what we want:\n\n```text\n$ cargo run\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/traits-example`\nA baby dog is called a puppy\n```\n\nIn general, fully qualified syntax is defined as follows:\n\n```rust,ignore\n<Type as Trait>::function(receiver_if_method, next_arg, ...);\n```\n\nFor associated functions, there would not be a `receiver`: there would only be\nthe list of other arguments. You could use fully qualified syntax everywhere\nthat you call functions or methods. However, you’re allowed to omit any part of\nthis syntax that Rust can figure out from other information in the program. You\nonly need to use this more verbose syntax in cases where there are multiple\nimplementations that use the same name and Rust needs help to identify which\nimplementation you want to call.\n\n### Using Supertraits to Require One Trait’s Functionality Within Another Trait\n\nSometimes, you might need one trait to use another trait’s functionality. In\nthis case, you need to rely on the dependent trait also being implemented.\nThe trait you rely on is a *supertrait* of the trait you’re implementing.\n\nFor example, let’s say we want to make an `OutlinePrint` trait with an\n`outline_print` method that will print a value framed in asterisks. That is,\ngiven a `Point` struct that implements `Display` to result in `(x, y)`, when we\ncall `outline_print` on a `Point` instance that has `1` for `x` and `3` for\n`y`, it should print the following:\n\n```text\n**********\n*        *\n* (1, 3) *\n*        *\n**********\n```\n\nIn the implementation of `outline_print`, we want to use the `Display` trait’s\nfunctionality. Therefore, we need to specify that the `OutlinePrint` trait will\nwork only for types that also implement `Display` and provide the functionality\nthat `OutlinePrint` needs. We can do that in the trait definition by specifying\n`OutlinePrint: Display`. This technique is similar to adding a trait bound to\nthe trait. Listing 19-22 shows an implementation of the `OutlinePrint` trait.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::fmt;\n\ntrait OutlinePrint: fmt::Display {\n    fn outline_print(&self) {\n        let output = self.to_string();\n        let len = output.len();\n        println!(\"{}\", \"*\".repeat(len + 4));\n        println!(\"*{}*\", \" \".repeat(len + 2));\n        println!(\"* {} *\", output);\n        println!(\"*{}*\", \" \".repeat(len + 2));\n        println!(\"{}\", \"*\".repeat(len + 4));\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 19-22: Implementing the `OutlinePrint` trait that\nrequires the functionality from `Display`</span>\n\nBecause we’ve specified that `OutlinePrint` requires the `Display` trait, we\ncan use the `to_string` function that is automatically implemented for any type\nthat implements `Display`. If we tried to use `to_string` without adding a\ncolon and specifying the `Display` trait after the trait name, we’d get an\nerror saying that no method named `to_string` was found for the type `&Self` in\nthe current scope.\n\nLet’s see what happens when we try to implement `OutlinePrint` on a type that\ndoesn’t implement `Display`, such as the `Point` struct:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n# use std::fmt;\n# \n# trait OutlinePrint: fmt::Display {\n#     fn outline_print(&self) {\n#         let output = self.to_string();\n#         let len = output.len();\n#         println!(\"{}\", \"*\".repeat(len + 4));\n#         println!(\"*{}*\", \" \".repeat(len + 2));\n#         println!(\"* {} *\", output);\n#         println!(\"*{}*\", \" \".repeat(len + 2));\n#         println!(\"{}\", \"*\".repeat(len + 4));\n#     }\n# }\n# \nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl OutlinePrint for Point {}\n# \n# fn main() {\n#     let p = Point { x: 1, y: 3 };\n#     p.outline_print();\n# }\n```\n\nWe get an error saying that `Display` is required but not implemented:\n\n```text\n$ cargo run\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\nerror[E0277]: `Point` doesn\'t implement `std::fmt::Display`\n  --> src/main.rs:20:6\n   |\n20 | impl OutlinePrint for Point {}\n   |      ^^^^^^^^^^^^ `Point` cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `Point`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `traits-example`.\n\nTo learn more, run the command again with --verbose.\n```\n\nTo fix this, we implement `Display` on `Point` and satisfy the constraint that\n`OutlinePrint` requires, like so:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n# trait OutlinePrint: fmt::Display {\n#     fn outline_print(&self) {\n#         let output = self.to_string();\n#         let len = output.len();\n#         println!(\"{}\", \"*\".repeat(len + 4));\n#         println!(\"*{}*\", \" \".repeat(len + 2));\n#         println!(\"* {} *\", output);\n#         println!(\"*{}*\", \" \".repeat(len + 2));\n#         println!(\"{}\", \"*\".repeat(len + 4));\n#     }\n# }\n# \n# struct Point {\n#     x: i32,\n#     y: i32,\n# }\n# \n# impl OutlinePrint for Point {}\n# \nuse std::fmt;\n\nimpl fmt::Display for Point {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"({}, {})\", self.x, self.y)\n    }\n}\n# \n# fn main() {\n#     let p = Point { x: 1, y: 3 };\n#     p.outline_print();\n# }\n```\n\nThen implementing the `OutlinePrint` trait on `Point` will compile\nsuccessfully, and we can call `outline_print` on a `Point` instance to display\nit within an outline of asterisks.\n\n### Using the Newtype Pattern to Implement External Traits on External Types\n\nIn Chapter 10 in the [“Implementing a Trait on a\nType”][implementing-a-trait-on-a-type]<!-- ignore --> section, we mentioned\nthe orphan rule that states we’re allowed to implement a trait on a type as\nlong as either the trait or the type are local to our crate. It’s possible to\nget around this restriction using the *newtype pattern*, which involves\ncreating a new type in a tuple struct. (We covered tuple structs in the\n[“Using Tuple Structs without Named Fields to Create Different\nTypes”][tuple-structs]<!-- ignore --> section of Chapter 5.) The tuple struct\nwill have one field and be a thin wrapper around the type we want to implement\na trait for. Then the wrapper type is local to our crate, and we can implement\nthe trait on the wrapper. *Newtype* is a term that originates from the Haskell\nprogramming language. There is no runtime performance penalty for using this\npattern, and the wrapper type is elided at compile time.\n\nAs an example, let’s say we want to implement `Display` on `Vec<T>`, which the\norphan rule prevents us from doing directly because the `Display` trait and the\n`Vec<T>` type are defined outside our crate. We can make a `Wrapper` struct\nthat holds an instance of `Vec<T>`; then we can implement `Display` on\n`Wrapper` and use the `Vec<T>` value, as shown in Listing 19-23.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nuse std::fmt;\n\nstruct Wrapper(Vec<String>);\n\nimpl fmt::Display for Wrapper {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"[{}]\", self.0.join(\", \"))\n    }\n}\n\nfn main() {\n    let w = Wrapper(vec![String::from(\"hello\"), String::from(\"world\")]);\n    println!(\"w = {}\", w);\n}\n```\n\n<span class=\"caption\">Listing 19-23: Creating a `Wrapper` type around\n`Vec<String>` to implement `Display`</span>\n\nThe implementation of `Display` uses `self.0` to access the inner `Vec<T>`,\nbecause `Wrapper` is a tuple struct and `Vec<T>` is the item at index 0 in the\ntuple. Then we can use the functionality of the `Display` type on `Wrapper`.\n\nThe downside of using this technique is that `Wrapper` is a new type, so it\ndoesn’t have the methods of the value it’s holding. We would have to implement\nall the methods of `Vec<T>` directly on `Wrapper` such that the methods\ndelegate to `self.0`, which would allow us to treat `Wrapper` exactly like a\n`Vec<T>`. If we wanted the new type to have every method the inner type has,\nimplementing the `Deref` trait (discussed in Chapter 15 in the [“Treating Smart\nPointers Like Regular References with the `Deref`\nTrait”][smart-pointer-deref]<!-- ignore --> section) on the `Wrapper` to return\nthe inner type would be a solution. If we don’t want the `Wrapper` type to have\nall the methods of the inner type—for example, to restrict the `Wrapper` type’s\nbehavior—we would have to implement just the methods we do want manually.\n\nNow you know how the newtype pattern is used in relation to traits; it’s also a\nuseful pattern even when traits are not involved. Let’s switch focus and look\nat some advanced ways to interact with Rust’s type system.\n\n[implementing-a-trait-on-a-type]:\nch10-02-traits.html#implementing-a-trait-on-a-type\n[the-iterator-trait-and-the-next-method]:\nch13-02-iterators.html#the-iterator-trait-and-the-next-method\n[traits-defining-shared-behavior]:\nch10-02-traits.html#traits-defining-shared-behavior\n[smart-pointer-deref]: ch15-02-deref.html#treating-smart-pointers-like-regular-references-with-the-deref-trait\n[tuple-structs]: ch05-01-defining-structs.html#using-tuple-structs-without-named-fields-to-create-different-types\n", number: Some(SectionNumber([19, 2])), sub_items: [], path: "ch19-03-advanced-traits.md", parent_names: ["Advanced Features"] }), Chapter(Chapter { name: "Advanced Types", content: "## Advanced Types\n\nThe Rust type system has some features that we’ve mentioned in this book but\nhaven’t yet discussed. We’ll start by discussing newtypes in general as we\nexamine why newtypes are useful as types. Then we’ll move on to type aliases, a\nfeature similar to newtypes but with slightly different semantics. We’ll also\ndiscuss the `!` type and dynamically sized types.\n\n> Note: The next section assumes you’ve read the earlier section [“Using the\n> Newtype Pattern to Implement External Traits on External\n> Types.”][using-the-newtype-pattern]<!-- ignore -->\n\n### Using the Newtype Pattern for Type Safety and Abstraction\n\nThe newtype pattern is useful for tasks beyond those we’ve discussed so far,\nincluding statically enforcing that values are never confused and indicating\nthe units of a value. You saw an example of using newtypes to indicate units in\nListing 19-15: recall that the `Millimeters` and `Meters` structs wrapped `u32`\nvalues in a newtype. If we wrote a function with a parameter of type\n`Millimeters`, we couldn’t compile a program that accidentally tried to call\nthat function with a value of type `Meters` or a plain `u32`.\n\nAnother use of the newtype pattern is in abstracting away some implementation\ndetails of a type: the new type can expose a public API that is different from\nthe API of the private inner type if we used the new type directly to restrict\nthe available functionality, for example.\n\nNewtypes can also hide internal implementation. For example, we could provide a\n`People` type to wrap a `HashMap<i32, String>` that stores a person’s ID\nassociated with their name. Code using `People` would only interact with the\npublic API we provide, such as a method to add a name string to the `People`\ncollection; that code wouldn’t need to know that we assign an `i32` ID to names\ninternally. The newtype pattern is a lightweight way to achieve encapsulation\nto hide implementation details, which we discussed in the [“Encapsulation that\nHides Implementation\nDetails”][encapsulation-that-hides-implementation-details]<!-- ignore -->\nsection of Chapter 17.\n\n### Creating Type Synonyms with Type Aliases\n\nAlong with the newtype pattern, Rust provides the ability to declare a *type\nalias* to give an existing type another name. For this we use the `type`\nkeyword. For example, we can create the alias `Kilometers` to `i32` like so:\n\n```rust\n# fn main() {\n    type Kilometers = i32;\n# \n#     let x: i32 = 5;\n#     let y: Kilometers = 5;\n# \n#     println!(\"x + y = {}\", x + y);\n# }\n```\n\nNow, the alias `Kilometers` is a *synonym* for `i32`; unlike the `Millimeters`\nand `Meters` types we created in Listing 19-15, `Kilometers` is not a separate,\nnew type. Values that have the type `Kilometers` will be treated the same as\nvalues of type `i32`:\n\n```rust\n# fn main() {\n    type Kilometers = i32;\n\n    let x: i32 = 5;\n    let y: Kilometers = 5;\n\n    println!(\"x + y = {}\", x + y);\n# }\n```\n\nBecause `Kilometers` and `i32` are the same type, we can add values of both\ntypes and we can pass `Kilometers` values to functions that take `i32`\nparameters. However, using this method, we don’t get the type checking benefits\nthat we get from the newtype pattern discussed earlier.\n\nThe main use case for type synonyms is to reduce repetition. For example, we\nmight have a lengthy type like this:\n\n```rust,ignore\nBox<dyn Fn() + Send + \'static>\n```\n\nWriting this lengthy type in function signatures and as type annotations all\nover the code can be tiresome and error prone. Imagine having a project full of\ncode like that in Listing 19-24.\n\n```rust\n# fn main() {\n    let f: Box<dyn Fn() + Send + \'static> = Box::new(|| println!(\"hi\"));\n\n    fn takes_long_type(f: Box<dyn Fn() + Send + \'static>) {\n        // --snip--\n    }\n\n    fn returns_long_type() -> Box<dyn Fn() + Send + \'static> {\n        // --snip--\n#         Box::new(|| ())\n    }\n# }\n```\n\n<span class=\"caption\">Listing 19-24: Using a long type in many places</span>\n\nA type alias makes this code more manageable by reducing the repetition. In\nListing 19-25, we’ve introduced an alias named `Thunk` for the verbose type and\ncan replace all uses of the type with the shorter alias `Thunk`.\n\n```rust\n# fn main() {\n    type Thunk = Box<dyn Fn() + Send + \'static>;\n\n    let f: Thunk = Box::new(|| println!(\"hi\"));\n\n    fn takes_long_type(f: Thunk) {\n        // --snip--\n    }\n\n    fn returns_long_type() -> Thunk {\n        // --snip--\n#         Box::new(|| ())\n    }\n# }\n```\n\n<span class=\"caption\">Listing 19-25: Introducing a type alias `Thunk` to reduce\nrepetition</span>\n\nThis code is much easier to read and write! Choosing a meaningful name for a\ntype alias can help communicate your intent as well (*thunk* is a word for code\nto be evaluated at a later time, so it’s an appropriate name for a closure that\ngets stored).\n\nType aliases are also commonly used with the `Result<T, E>` type for reducing\nrepetition. Consider the `std::io` module in the standard library. I/O\noperations often return a `Result<T, E>` to handle situations when operations\nfail to work. This library has a `std::io::Error` struct that represents all\npossible I/O errors. Many of the functions in `std::io` will be returning\n`Result<T, E>` where the `E` is `std::io::Error`, such as these functions in\nthe `Write` trait:\n\n```rust\nuse std::fmt;\nuse std::io::Error;\n\npub trait Write {\n    fn write(&mut self, buf: &[u8]) -> Result<usize, Error>;\n    fn flush(&mut self) -> Result<(), Error>;\n\n    fn write_all(&mut self, buf: &[u8]) -> Result<(), Error>;\n    fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<(), Error>;\n}\n```\n\nThe `Result<..., Error>` is repeated a lot. As such, `std::io` has this type of\nalias declaration:\n\n```rust\n# use std::fmt;\n# \ntype Result<T> = std::result::Result<T, std::io::Error>;\n# \n# pub trait Write {\n#     fn write(&mut self, buf: &[u8]) -> Result<usize>;\n#     fn flush(&mut self) -> Result<()>;\n# \n#     fn write_all(&mut self, buf: &[u8]) -> Result<()>;\n#     fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<()>;\n# }\n# \n# fn main() {}\n```\n\nBecause this declaration is in the `std::io` module, we can use the fully\nqualified alias `std::io::Result<T>`—that is, a `Result<T, E>` with the `E`\nfilled in as `std::io::Error`. The `Write` trait function signatures end up\nlooking like this:\n\n```rust\n# use std::fmt;\n# \n# type Result<T> = std::result::Result<T, std::io::Error>;\n# \npub trait Write {\n    fn write(&mut self, buf: &[u8]) -> Result<usize>;\n    fn flush(&mut self) -> Result<()>;\n\n    fn write_all(&mut self, buf: &[u8]) -> Result<()>;\n    fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<()>;\n}\n# \n# fn main() {}\n```\n\nThe type alias helps in two ways: it makes code easier to write *and* it gives\nus a consistent interface across all of `std::io`. Because it’s an alias, it’s\njust another `Result<T, E>`, which means we can use any methods that work on\n`Result<T, E>` with it, as well as special syntax like the `?` operator.\n\n### The Never Type that Never Returns\n\nRust has a special type named `!` that’s known in type theory lingo as the\n*empty type* because it has no values. We prefer to call it the *never type*\nbecause it stands in the place of the return type when a function will never\nreturn. Here is an example:\n\n```rust\nfn bar() -> ! {\n    // --snip--\n#     panic!();\n}\n# \n# fn main() {}\n```\n\nThis code is read as “the function `bar` returns never.” Functions that return\nnever are called *diverging functions*. We can’t create values of the type `!`\nso `bar` can never possibly return.\n\nBut what use is a type you can never create values for? Recall the code from\nListing 2-5; we’ve reproduced part of it here in Listing 19-26.\n\n```rust,ignore\n# use rand::Rng;\n# use std::cmp::Ordering;\n# use std::io;\n# \n# fn main() {\n#     println!(\"Guess the number!\");\n# \n#     let secret_number = rand::thread_rng().gen_range(1, 101);\n# \n#     println!(\"The secret number is: {}\", secret_number);\n# \n#     loop {\n#         println!(\"Please input your guess.\");\n# \n#         let mut guess = String::new();\n# \n#         // --snip--\n# \n#         io::stdin()\n#             .read_line(&mut guess)\n#             .expect(\"Failed to read line\");\n# \n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n# \n#         println!(\"You guessed: {}\", guess);\n# \n#         // --snip--\n# \n#         match guess.cmp(&secret_number) {\n#             Ordering::Less => println!(\"Too small!\"),\n#             Ordering::Greater => println!(\"Too big!\"),\n#             Ordering::Equal => {\n#                 println!(\"You win!\");\n#                 break;\n#             }\n#         }\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 19-26: A `match` with an arm that ends in\n`continue`</span>\n\nAt the time, we skipped over some details in this code. In Chapter 6 in [“The\n`match` Control Flow Operator”][the-match-control-flow-operator]<!-- ignore\n--> section, we discussed that `match` arms must all return the same type. So,\nfor example, the following code doesn’t work:\n\n```rust,ignore,does_not_compile\n# fn main() {\n#     let guess = \"3\";\n    let guess = match guess.trim().parse() {\n        Ok(_) => 5,\n        Err(_) => \"hello\",\n    };\n# }\n```\n\nThe type of `guess` in this code would have to be an integer *and* a string,\nand Rust requires that `guess` have only one type. So what does `continue`\nreturn? How were we allowed to return a `u32` from one arm and have another arm\nthat ends with `continue` in Listing 19-26?\n\nAs you might have guessed, `continue` has a `!` value. That is, when Rust\ncomputes the type of `guess`, it looks at both match arms, the former with a\nvalue of `u32` and the latter with a `!` value. Because `!` can never have a\nvalue, Rust decides that the type of `guess` is `u32`.\n\nThe formal way of describing this behavior is that expressions of type `!` can\nbe coerced into any other type. We’re allowed to end this `match` arm with\n`continue` because `continue` doesn’t return a value; instead, it moves control\nback to the top of the loop, so in the `Err` case, we never assign a value to\n`guess`.\n\nThe never type is useful with the `panic!` macro as well. Remember the `unwrap`\nfunction that we call on `Option<T>` values to produce a value or panic? Here\nis its definition:\n\n```rust,ignore\n# enum Option<T> {\n#     Some(T),\n#     None,\n# }\n# \n# use crate::Option::*;\n# \nimpl<T> Option<T> {\n    pub fn unwrap(self) -> T {\n        match self {\n            Some(val) => val,\n            None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n        }\n    }\n}\n```\n\nIn this code, the same thing happens as in the `match` in Listing 19-26: Rust\nsees that `val` has the type `T` and `panic!` has the type `!`, so the result\nof the overall `match` expression is `T`. This code works because `panic!`\ndoesn’t produce a value; it ends the program. In the `None` case, we won’t be\nreturning a value from `unwrap`, so this code is valid.\n\nOne final expression that has the type `!` is a `loop`:\n\n```rust,ignore\n# fn main() {\n    print!(\"forever \");\n\n    loop {\n        print!(\"and ever \");\n    }\n# }\n```\n\nHere, the loop never ends, so `!` is the value of the expression. However, this\nwouldn’t be true if we included a `break`, because the loop would terminate\nwhen it got to the `break`.\n\n### Dynamically Sized Types and the `Sized` Trait\n\nDue to Rust’s need to know certain details, such as how much space to allocate\nfor a value of a particular type, there is a corner of its type system that can\nbe confusing: the concept of *dynamically sized types*. Sometimes referred to\nas *DSTs* or *unsized types*, these types let us write code using values whose\nsize we can know only at runtime.\n\nLet’s dig into the details of a dynamically sized type called `str`, which\nwe’ve been using throughout the book. That’s right, not `&str`, but `str` on\nits own, is a DST. We can’t know how long the string is until runtime, meaning\nwe can’t create a variable of type `str`, nor can we take an argument of type\n`str`. Consider the following code, which does not work:\n\n```rust,ignore,does_not_compile\n# fn main() {\n    let s1: str = \"Hello there!\";\n    let s2: str = \"How\'s it going?\";\n# }\n```\n\nRust needs to know how much memory to allocate for any value of a particular\ntype, and all values of a type must use the same amount of memory. If Rust\nallowed us to write this code, these two `str` values would need to take up the\nsame amount of space. But they have different lengths: `s1` needs 12 bytes of\nstorage and `s2` needs 15. This is why it’s not possible to create a variable\nholding a dynamically sized type.\n\nSo what do we do? In this case, you already know the answer: we make the types\nof `s1` and `s2` a `&str` rather than a `str`. Recall that in the [“String\nSlices”][string-slices]<!-- ignore --> section of Chapter 4, we said the slice\ndata structure stores the starting position and the length of the slice.\n\nSo although a `&T` is a single value that stores the memory address of where\nthe `T` is located, a `&str` is *two* values: the address of the `str` and its\nlength. As such, we can know the size of a `&str` value at compile time: it’s\ntwice the length of a `usize`. That is, we always know the size of a `&str`, no\nmatter how long the string it refers to is. In general, this is the way in\nwhich dynamically sized types are used in Rust: they have an extra bit of\nmetadata that stores the size of the dynamic information. The golden rule of\ndynamically sized types is that we must always put values of dynamically sized\ntypes behind a pointer of some kind.\n\nWe can combine `str` with all kinds of pointers: for example, `Box<str>` or\n`Rc<str>`. In fact, you’ve seen this before but with a different dynamically\nsized type: traits. Every trait is a dynamically sized type we can refer to by\nusing the name of the trait. In Chapter 17 in the [“Using Trait Objects That\nAllow for Values of Different\nTypes”][using-trait-objects-that-allow-for-values-of-different-types]<!--\nignore --> section, we mentioned that to use traits as trait objects, we must\nput them behind a pointer, such as `&dyn Trait` or `Box<dyn Trait>` (`Rc<dyn\nTrait>` would work too).\n\nTo work with DSTs, Rust has a particular trait called the `Sized` trait to\ndetermine whether or not a type’s size is known at compile time. This trait is\nautomatically implemented for everything whose size is known at compile time.\nIn addition, Rust implicitly adds a bound on `Sized` to every generic function.\nThat is, a generic function definition like this:\n\n```rust,ignore\nfn generic<T>(t: T) {\n    // --snip--\n}\n```\n\nis actually treated as though we had written this:\n\n```rust,ignore\nfn generic<T: Sized>(t: T) {\n    // --snip--\n}\n```\n\nBy default, generic functions will work only on types that have a known size at\ncompile time. However, you can use the following special syntax to relax this\nrestriction:\n\n```rust,ignore\nfn generic<T: ?Sized>(t: &T) {\n    // --snip--\n}\n```\n\nA trait bound on `?Sized` is the opposite of a trait bound on `Sized`: we would\nread this as “`T` may or may not be `Sized`.” This syntax is only available for\n`Sized`, not any other traits.\n\nAlso note that we switched the type of the `t` parameter from `T` to `&T`.\nBecause the type might not be `Sized`, we need to use it behind some kind of\npointer. In this case, we’ve chosen a reference.\n\nNext, we’ll talk about functions and closures!\n\n[encapsulation-that-hides-implementation-details]:\nch17-01-what-is-oo.html#encapsulation-that-hides-implementation-details\n[string-slices]: ch04-03-slices.html#string-slices\n[the-match-control-flow-operator]:\nch06-02-match.html#the-match-control-flow-operator\n[using-trait-objects-that-allow-for-values-of-different-types]:\nch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n[using-the-newtype-pattern]: ch19-03-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types\n", number: Some(SectionNumber([19, 3])), sub_items: [], path: "ch19-04-advanced-types.md", parent_names: ["Advanced Features"] }), Chapter(Chapter { name: "Advanced Functions and Closures", content: "## Advanced Functions and Closures\n\nNext, we’ll explore some advanced features related to functions and\nclosures, which include function pointers and returning closures.\n\n### Function Pointers\n\nWe’ve talked about how to pass closures to functions; you can also pass regular\nfunctions to functions! This technique is useful when you want to pass a\nfunction you’ve already defined rather than defining a new closure. Doing this\nwith function pointers will allow you to use functions as arguments to other\nfunctions. Functions coerce to the type `fn` (with a lowercase f), not to be\nconfused with the `Fn` closure trait. The `fn` type is called a *function\npointer*. The syntax for specifying that a parameter is a function pointer is\nsimilar to that of closures, as shown in Listing 19-27.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n\nfn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n    f(arg) + f(arg)\n}\n\nfn main() {\n    let answer = do_twice(add_one, 5);\n\n    println!(\"The answer is: {}\", answer);\n}\n```\n\n<span class=\"caption\">Listing 19-27: Using the `fn` type to accept a function\npointer as an argument</span>\n\nThis code prints `The answer is: 12`. We specify that the parameter `f` in\n`do_twice` is an `fn` that takes one parameter of type `i32` and returns an\n`i32`. We can then call `f` in the body of `do_twice`. In `main`, we can pass\nthe function name `add_one` as the first argument to `do_twice`.\n\nUnlike closures, `fn` is a type rather than a trait, so we specify `fn` as the\nparameter type directly rather than declaring a generic type parameter with one\nof the `Fn` traits as a trait bound.\n\nFunction pointers implement all three of the closure traits (`Fn`, `FnMut`, and\n`FnOnce`), so you can always pass a function pointer as an argument for a\nfunction that expects a closure. It’s best to write functions using a generic\ntype and one of the closure traits so your functions can accept either\nfunctions or closures.\n\nAn example of where you would want to only accept `fn` and not closures is when\ninterfacing with external code that doesn’t have closures: C functions can\naccept functions as arguments, but C doesn’t have closures.\n\nAs an example of where you could use either a closure defined inline or a named\nfunction, let’s look at a use of `map`. To use the `map` function to turn a\nvector of numbers into a vector of strings, we could use a closure, like this:\n\n```rust\n# fn main() {\n    let list_of_numbers = vec![1, 2, 3];\n    let list_of_strings: Vec<String> =\n        list_of_numbers.iter().map(|i| i.to_string()).collect();\n# }\n```\n\nOr we could name a function as the argument to `map` instead of the closure,\nlike this:\n\n```rust\n# fn main() {\n    let list_of_numbers = vec![1, 2, 3];\n    let list_of_strings: Vec<String> =\n        list_of_numbers.iter().map(ToString::to_string).collect();\n# }\n```\n\nNote that we must use the fully qualified syntax that we talked about earlier\nin the [“Advanced Traits”][advanced-traits]<!-- ignore --> section because\nthere are multiple functions available named `to_string`. Here, we’re using the\n`to_string` function defined in the `ToString` trait, which the standard\nlibrary has implemented for any type that implements `Display`.\n\nWe have another useful pattern that exploits an implementation detail of tuple\nstructs and tuple-struct enum variants. These types use `()` as initializer\nsyntax, which looks like a function call. The initializers are actually\nimplemented as functions returning an instance that’s constructed from their\narguments. We can use these initializer functions as function pointers that\nimplement the closure traits, which means we can specify the initializer\nfunctions as arguments for methods that take closures, like so:\n\n```rust\n# fn main() {\n    enum Status {\n        Value(u32),\n        Stop,\n    }\n\n    let list_of_statuses: Vec<Status> = (0u32..20).map(Status::Value).collect();\n# }\n```\n\nHere we create `Status::Value` instances using each `u32` value in the range\nthat `map` is called on by using the initializer function of `Status::Value`.\nSome people prefer this style, and some people prefer to use closures. They\ncompile to the same code, so use whichever style is clearer to you.\n\n### Returning Closures\n\nClosures are represented by traits, which means you can’t return closures\ndirectly. In most cases where you might want to return a trait, you can instead\nuse the concrete type that implements the trait as the return value of the\nfunction. But you can’t do that with closures because they don’t have a\nconcrete type that is returnable; you’re not allowed to use the function\npointer `fn` as a return type, for example.\n\nThe following code tries to return a closure directly, but it won’t compile:\n\n```rust,ignore,does_not_compile\nfn returns_closure() -> dyn Fn(i32) -> i32 {\n    |x| x + 1\n}\n```\n\nThe compiler error is as follows:\n\n```text\n$ cargo build\n   Compiling functions-example v0.1.0 (file:///projects/functions-example)\nerror[E0277]: the size for values of type `(dyn std::ops::Fn(i32) -> i32 + \'static)` cannot be known at compilation time\n --> src/lib.rs:1:25\n  |\n1 | fn returns_closure() -> dyn Fn(i32) -> i32 {\n  |                         ^^^^^^^^^^^^^^^^^^ doesn\'t have a size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn(i32) -> i32 + \'static)`\n  = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n  = note: the return type of a function must have a statically known size\n\nerror[E0308]: mismatched types\n --> src/lib.rs:2:5\n  |\n1 | fn returns_closure() -> dyn Fn(i32) -> i32 {\n  |                         ------------------ expected `(dyn std::ops::Fn(i32) -> i32 + \'static)` because of return type\n2 |     |x| x + 1\n  |     ^^^^^^^^^ expected trait `std::ops::Fn`, found closure\n  |\n  = note: expected trait object `(dyn std::ops::Fn(i32) -> i32 + \'static)`\n                  found closure `[closure@src/lib.rs:2:5: 2:14]`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\nerror: could not compile `functions-example`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe error references the `Sized` trait again! Rust doesn’t know how much space\nit will need to store the closure. We saw a solution to this problem earlier.\nWe can use a trait object:\n\n```rust\nfn returns_closure() -> Box<dyn Fn(i32) -> i32> {\n    Box::new(|x| x + 1)\n}\n```\n\nThis code will compile just fine. For more about trait objects, refer to the\nsection [“Using Trait Objects That Allow for Values of Different\nTypes”][using-trait-objects-that-allow-for-values-of-different-types]<!--\nignore --> in Chapter 17.\n\nNext, let’s look at macros!\n\n[advanced-traits]:\nch19-03-advanced-traits.html#advanced-traits\n[using-trait-objects-that-allow-for-values-of-different-types]:\nch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n", number: Some(SectionNumber([19, 4])), sub_items: [], path: "ch19-05-advanced-functions-and-closures.md", parent_names: ["Advanced Features"] }), Chapter(Chapter { name: "Macros", content: "## Macros\n\nWe’ve used macros like `println!` throughout this book, but we haven’t fully\nexplored what a macro is and how it works. The term *macro* refers to a family\nof features in Rust: *declarative* macros with `macro_rules!` and three kinds\nof *procedural* macros:\n\n* Custom `#[derive]` macros that specify code added with the `derive` attribute\n  used on structs and enums\n* Attribute-like macros that define custom attributes usable on any item\n* Function-like macros that look like function calls but operate on the tokens\n  specified as their argument\n\nWe’ll talk about each of these in turn, but first, let’s look at why we even\nneed macros when we already have functions.\n\n### The Difference Between Macros and Functions\n\nFundamentally, macros are a way of writing code that writes other code, which\nis known as *metaprogramming*. In Appendix C, we discuss the `derive`\nattribute, which generates an implementation of various traits for you. We’ve\nalso used the `println!` and `vec!` macros throughout the book. All of these\nmacros *expand* to produce more code than the code you’ve written manually.\n\nMetaprogramming is useful for reducing the amount of code you have to write and\nmaintain, which is also one of the roles of functions. However, macros have\nsome additional powers that functions don’t.\n\nA function signature must declare the number and type of parameters the\nfunction has. Macros, on the other hand, can take a variable number of\nparameters: we can call `println!(\"hello\")` with one argument or\n`println!(\"hello {}\", name)` with two arguments. Also, macros are expanded\nbefore the compiler interprets the meaning of the code, so a macro can, for\nexample, implement a trait on a given type. A function can’t, because it gets\ncalled at runtime and a trait needs to be implemented at compile time.\n\nThe downside to implementing a macro instead of a function is that macro\ndefinitions are more complex than function definitions because you’re writing\nRust code that writes Rust code. Due to this indirection, macro definitions are\ngenerally more difficult to read, understand, and maintain than function\ndefinitions.\n\nAnother important difference between macros and functions is that you must\ndefine macros or bring them into scope *before* you call them in a file, as\nopposed to functions you can define anywhere and call anywhere.\n\n### Declarative Macros with `macro_rules!` for General Metaprogramming\n\nThe most widely used form of macros in Rust is *declarative macros*. These are\nalso sometimes referred to as “macros by example,” “`macro_rules!` macros,” or\njust plain “macros.” At their core, declarative macros allow you to write\nsomething similar to a Rust `match` expression. As discussed in Chapter 6,\n`match` expressions are control structures that take an expression, compare the\nresulting value of the expression to patterns, and then run the code associated\nwith the matching pattern. Macros also compare a value to patterns that are\nassociated with particular code: in this situation, the value is the literal\nRust source code passed to the macro; the patterns are compared with the\nstructure of that source code; and the code associated with each pattern, when\nmatched, replaces the code passed to the macro. This all happens during\ncompilation.\n\nTo define a macro, you use the `macro_rules!` construct. Let’s explore how to\nuse `macro_rules!` by looking at how the `vec!` macro is defined. Chapter 8\ncovered how we can use the `vec!` macro to create a new vector with particular\nvalues. For example, the following macro creates a new vector containing three\nintegers:\n\n```rust\nlet v: Vec<u32> = vec![1, 2, 3];\n```\n\nWe could also use the `vec!` macro to make a vector of two integers or a vector\nof five string slices. We wouldn’t be able to use a function to do the same\nbecause we wouldn’t know the number or type of values up front.\n\nListing 19-28 shows a slightly simplified definition of the `vec!` macro.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n#[macro_export]\nmacro_rules! vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $(\n                temp_vec.push($x);\n            )*\n            temp_vec\n        }\n    };\n}\n```\n\n<span class=\"caption\">Listing 19-28: A simplified version of the `vec!` macro\ndefinition</span>\n\n> Note: The actual definition of the `vec!` macro in the standard library\n> includes code to preallocate the correct amount of memory up front. That code\n> is an optimization that we don’t include here to make the example simpler.\n\nThe `#[macro_export]` annotation indicates that this macro should be made\navailable whenever the crate in which the macro is defined is brought into\nscope. Without this annotation, the macro can’t be brought into scope.\n\nWe then start the macro definition with `macro_rules!` and the name of the\nmacro we’re defining *without* the exclamation mark. The name, in this case\n`vec`, is followed by curly brackets denoting the body of the macro definition.\n\nThe structure in the `vec!` body is similar to the structure of a `match`\nexpression. Here we have one arm with the pattern `( $( $x:expr ),* )`,\nfollowed by `=>` and the block of code associated with this pattern. If the\npattern matches, the associated block of code will be emitted. Given that this\nis the only pattern in this macro, there is only one valid way to match; any\nother pattern will result in an error. More complex macros will have more than\none arm.\n\nValid pattern syntax in macro definitions is different than the pattern syntax\ncovered in Chapter 18 because macro patterns are matched against Rust code\nstructure rather than values. Let’s walk through what the pattern pieces in\nListing 19-28 mean; for the full macro pattern syntax, see [the reference].\n\n[the reference]: ../reference/macros-by-example.html\n\nFirst, a set of parentheses encompasses the whole pattern. A dollar sign (`$`)\nis next, followed by a set of parentheses that captures values that match the\npattern within the parentheses for use in the replacement code. Within `$()` is\n`$x:expr`, which matches any Rust expression and gives the expression the name\n`$x`.\n\nThe comma following `$()` indicates that a literal comma separator character\ncould optionally appear after the code that matches the code in `$()`. The `*`\nspecifies that the pattern matches zero or more of whatever precedes the `*`.\n\nWhen we call this macro with `vec![1, 2, 3];`, the `$x` pattern matches three\ntimes with the three expressions `1`, `2`, and `3`.\n\nNow let’s look at the pattern in the body of the code associated with this arm:\n`temp_vec.push()` within `$()*` is generated for each part that matches `$()`\nin the pattern zero or more times depending on how many times the pattern\nmatches. The `$x` is replaced with each expression matched. When we call this\nmacro with `vec![1, 2, 3];`, the code generated that replaces this macro call\nwill be the following:\n\n```rust,ignore\n{\n    let mut temp_vec = Vec::new();\n    temp_vec.push(1);\n    temp_vec.push(2);\n    temp_vec.push(3);\n    temp_vec\n}\n```\n\nWe’ve defined a macro that can take any number of arguments of any type and can\ngenerate code to create a vector containing the specified elements.\n\nThere are some strange edge cases with `macro_rules!`. In the future, Rust will\nhave a second kind of declarative macro that will work in a similar fashion but\nfix some of these edge cases. After that update, `macro_rules!` will be\neffectively deprecated. With this in mind, as well as the fact that most Rust\nprogrammers will *use* macros more than *write* macros, we won’t discuss\n`macro_rules!` any further. To learn more about how to write macros, consult\nthe online documentation or other resources, such as [“The Little Book of Rust\nMacros”][tlborm].\n\n[tlborm]: https://danielkeep.github.io/tlborm/book/index.html\n\n### Procedural Macros for Generating Code from Attributes\n\nThe second form of macros is *procedural macros*, which act more like functions\n(and are a type of procedure). Procedural macros accept some code as an input,\noperate on that code, and produce some code as an output rather than matching\nagainst patterns and replacing the code with other code as declarative macros\ndo.\n\nThe three kinds of procedural macros (custom derive, attribute-like, and\nfunction-like) all work in a similar fashion.\n\nWhen creating procedural macros, the definitions must reside in their own crate\nwith a special crate type. This is for complex technical reasons that we hope\nto eliminate in the future. Using procedural macros looks like the code in\nListing 19-29, where `some_attribute` is a placeholder for using a specific\nmacro.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\nuse proc_macro;\n\n#[some_attribute]\npub fn some_name(input: TokenStream) -> TokenStream {\n}\n```\n\n<span class=\"caption\">Listing 19-29: An example of using a procedural\nmacro</span>\n\nThe function that defines a procedural macro takes a `TokenStream` as an input\nand produces a `TokenStream` as an output. The `TokenStream` type is defined by\nthe `proc_macro` crate that is included with Rust and represents a sequence of\ntokens. This is the core of the macro: the source code that the macro is\noperating on makes up the input `TokenStream`, and the code the macro produces\nis the output `TokenStream`. The function also has an attribute attached to it\nthat specifies which kind of procedural macro we’re creating. We can have\nmultiple kinds of procedural macros in the same crate.\n\nLet’s look at the different kinds of procedural macros. We’ll start with a\ncustom derive macro and then explain the small dissimilarities that make the\nother forms different.\n\n### How to Write a Custom `derive` Macro\n\nLet’s create a crate named `hello_macro` that defines a trait named\n`HelloMacro` with one associated function named `hello_macro`. Rather than\nmaking our crate users implement the `HelloMacro` trait for each of their\ntypes, we’ll provide a procedural macro so users can annotate their type with\n`#[derive(HelloMacro)]` to get a default implementation of the `hello_macro`\nfunction. The default implementation will print `Hello, Macro! My name is\nTypeName!` where `TypeName` is the name of the type on which this trait has\nbeen defined. In other words, we’ll write a crate that enables another\nprogrammer to write code like Listing 19-30 using our crate.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nuse hello_macro::HelloMacro;\nuse hello_macro_derive::HelloMacro;\n\n#[derive(HelloMacro)]\nstruct Pancakes;\n\nfn main() {\n    Pancakes::hello_macro();\n}\n```\n\n<span class=\"caption\">Listing 19-30: The code a user of our crate will be able\nto write when using our procedural macro</span>\n\nThis code will print `Hello, Macro! My name is Pancakes!` when we’re done. The\nfirst step is to make a new library crate, like this:\n\n```text\n$ cargo new hello_macro --lib\n```\n\nNext, we’ll define the `HelloMacro` trait and its associated function:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub trait HelloMacro {\n    fn hello_macro();\n}\n```\n\nWe have a trait and its function. At this point, our crate user could implement\nthe trait to achieve the desired functionality, like so:\n\n```rust,ignore\nuse hello_macro::HelloMacro;\n\nstruct Pancakes;\n\nimpl HelloMacro for Pancakes {\n    fn hello_macro() {\n        println!(\"Hello, Macro! My name is Pancakes!\");\n    }\n}\n\nfn main() {\n    Pancakes::hello_macro();\n}\n```\n\nHowever, they would need to write the implementation block for each type they\nwanted to use with `hello_macro`; we want to spare them from having to do this\nwork.\n\nAdditionally, we can’t yet provide the `hello_macro` function with default\nimplementation that will print the name of the type the trait is implemented\non: Rust doesn’t have reflection capabilities, so it can’t look up the type’s\nname at runtime. We need a macro to generate code at compile time.\n\nThe next step is to define the procedural macro. At the time of this writing,\nprocedural macros need to be in their own crate. Eventually, this restriction\nmight be lifted. The convention for structuring crates and macro crates is as\nfollows: for a crate named `foo`, a custom derive procedural macro crate is\ncalled `foo_derive`. Let’s start a new crate called `hello_macro_derive` inside\nour `hello_macro` project:\n\n```text\n$ cargo new hello_macro_derive --lib\n```\n\nOur two crates are tightly related, so we create the procedural macro crate\nwithin the directory of our `hello_macro` crate. If we change the trait\ndefinition in `hello_macro`, we’ll have to change the implementation of the\nprocedural macro in `hello_macro_derive` as well. The two crates will need to\nbe published separately, and programmers using these crates will need to add\nboth as dependencies and bring them both into scope. We could instead have the\n`hello_macro` crate use `hello_macro_derive` as a dependency and re-export the\nprocedural macro code. However, the way we’ve structured the project makes it\npossible for programmers to use `hello_macro` even if they don’t want the\n`derive` functionality.\n\nWe need to declare the `hello_macro_derive` crate as a procedural macro crate.\nWe’ll also need functionality from the `syn` and `quote` crates, as you’ll see\nin a moment, so we need to add them as dependencies. Add the following to the\n*Cargo.toml* file for `hello_macro_derive`:\n\n<span class=\"filename\">Filename: hello_macro_derive/Cargo.toml</span>\n\n```toml\n[lib]\nproc-macro = true\n\n[dependencies]\nsyn = \"1.0\"\nquote = \"1.0\"\n```\n\nTo start defining the procedural macro, place the code in Listing 19-31 into\nyour *src/lib.rs* file for the `hello_macro_derive` crate. Note that this code\nwon’t compile until we add a definition for the `impl_hello_macro` function.\n\n<span class=\"filename\">Filename: hello_macro_derive/src/lib.rs</span>\n\n```rust,ignore,does_not_compile\nextern crate proc_macro;\n\nuse proc_macro::TokenStream;\nuse quote::quote;\nuse syn;\n\n#[proc_macro_derive(HelloMacro)]\npub fn hello_macro_derive(input: TokenStream) -> TokenStream {\n    // Construct a representation of Rust code as a syntax tree\n    // that we can manipulate\n    let ast = syn::parse(input).unwrap();\n\n    // Build the trait implementation\n    impl_hello_macro(&ast)\n}\n```\n\n<span class=\"caption\">Listing 19-31: Code that most procedural macro crates\nwill require in order to process Rust code</span>\n\nNotice that we’ve split the code into the `hello_macro_derive` function, which\nis responsible for parsing the `TokenStream`, and the `impl_hello_macro`\nfunction, which is responsible for transforming the syntax tree: this makes\nwriting a procedural macro more convenient. The code in the outer function\n(`hello_macro_derive` in this case) will be the same for almost every\nprocedural macro crate you see or create. The code you specify in the body of\nthe inner function (`impl_hello_macro` in this case) will be different\ndepending on your procedural macro’s purpose.\n\nWe’ve introduced three new crates: `proc_macro`, [`syn`], and [`quote`]. The\n`proc_macro` crate comes with Rust, so we didn’t need to add that to the\ndependencies in *Cargo.toml*. The `proc_macro` crate is the compiler’s API that\nallows us to read and manipulate Rust code from our code.\n\n[`syn`]: https://crates.io/crates/syn\n[`quote`]: https://crates.io/crates/quote\n\nThe `syn` crate parses Rust code from a string into a data structure that we\ncan perform operations on. The `quote` crate turns `syn` data structures back\ninto Rust code. These crates make it much simpler to parse any sort of Rust\ncode we might want to handle: writing a full parser for Rust code is no simple\ntask.\n\nThe `hello_macro_derive` function will be called when a user of our library\nspecifies `#[derive(HelloMacro)]` on a type. This is possible because we’ve\nannotated the `hello_macro_derive` function here with `proc_macro_derive` and\nspecified the name, `HelloMacro`, which matches our trait name; this is the\nconvention most procedural macros follow.\n\nThe `hello_macro_derive` function first converts the `input` from a\n`TokenStream` to a data structure that we can then interpret and perform\noperations on. This is where `syn` comes into play. The `parse` function in\n`syn` takes a `TokenStream` and returns a `DeriveInput` struct representing the\nparsed Rust code. Listing 19-32 shows the relevant parts of the `DeriveInput`\nstruct we get from parsing the `struct Pancakes;` string:\n\n```rust,ignore\nDeriveInput {\n    // --snip--\n\n    ident: Ident {\n        ident: \"Pancakes\",\n        span: #0 bytes(95..103)\n    },\n    data: Struct(\n        DataStruct {\n            struct_token: Struct,\n            fields: Unit,\n            semi_token: Some(\n                Semi\n            )\n        }\n    )\n}\n```\n\n<span class=\"caption\">Listing 19-32: The `DeriveInput` instance we get when\nparsing the code that has the macro’s attribute in Listing 19-30</span>\n\nThe fields of this struct show that the Rust code we’ve parsed is a unit struct\nwith the `ident` (identifier, meaning the name) of `Pancakes`. There are more\nfields on this struct for describing all sorts of Rust code; check the [`syn`\ndocumentation for `DeriveInput`][syn-docs] for more information.\n\n[syn-docs]: https://docs.rs/syn/1.0/syn/struct.DeriveInput.html\n\nSoon we’ll define the `impl_hello_macro` function, which is where we’ll build\nthe new Rust code we want to include. But before we do, note that the output\nfor our derive macro is also a `TokenStream`. The returned `TokenStream` is\nadded to the code that our crate users write, so when they compile their crate,\nthey’ll get the extra functionality that we provide in the modified\n`TokenStream`.\n\nYou might have noticed that we’re calling `unwrap` to cause the\n`hello_macro_derive` function to panic if the call to the `syn::parse` function\nfails here. It’s necessary for our procedural macro to panic on errors because\n`proc_macro_derive` functions must return `TokenStream` rather than `Result` to\nconform to the procedural macro API. We’ve simplified this example by using\n`unwrap`; in production code, you should provide more specific error messages\nabout what went wrong by using `panic!` or `expect`.\n\nNow that we have the code to turn the annotated Rust code from a `TokenStream`\ninto a `DeriveInput` instance, let’s generate the code that implements the\n`HelloMacro` trait on the annotated type, as shown in Listing 19-33.\n\n<span class=\"filename\">Filename: hello_macro_derive/src/lib.rs</span>\n\n```rust,ignore\n# extern crate proc_macro;\n# \n# use proc_macro::TokenStream;\n# use quote::quote;\n# use syn;\n# \n# #[proc_macro_derive(HelloMacro)]\n# pub fn hello_macro_derive(input: TokenStream) -> TokenStream {\n#     // Construct a representation of Rust code as a syntax tree\n#     // that we can manipulate\n#     let ast = syn::parse(input).unwrap();\n# \n#     // Build the trait implementation\n#     impl_hello_macro(&ast)\n# }\n# \nfn impl_hello_macro(ast: &syn::DeriveInput) -> TokenStream {\n    let name = &ast.ident;\n    let gen = quote! {\n        impl HelloMacro for #name {\n            fn hello_macro() {\n                println!(\"Hello, Macro! My name is {}!\", stringify!(#name));\n            }\n        }\n    };\n    gen.into()\n}\n```\n\n<span class=\"caption\">Listing 19-33: Implementing the `HelloMacro` trait using\nthe parsed Rust code</span>\n\nWe get an `Ident` struct instance containing the name (identifier) of the\nannotated type using `ast.ident`. The struct in Listing 19-32 shows that when\nwe run the `impl_hello_macro` function on the code in Listing 19-30, the\n`ident` we get will have the `ident` field with a value of `\"Pancakes\"`. Thus,\nthe `name` variable in Listing 19-33 will contain an `Ident` struct instance\nthat, when printed, will be the string `\"Pancakes\"`, the name of the struct in\nListing 19-30.\n\nThe `quote!` macro lets us define the Rust code that we want to return. The\ncompiler expects something different to the direct result of the `quote!`\nmacro’s execution, so we need to convert it to a `TokenStream`. We do this by\ncalling the `into` method, which consumes this intermediate representation and\nreturns a value of the required `TokenStream` type.\n\nThe `quote!` macro also provides some very cool templating mechanics: we can\nenter `#name`, and `quote!` will replace it with the value in the variable\n`name`. You can even do some repetition similar to the way regular macros work.\nCheck out [the `quote` crate’s docs][quote-docs] for a thorough introduction.\n\n[quote-docs]: https://docs.rs/quote\n\nWe want our procedural macro to generate an implementation of our `HelloMacro`\ntrait for the type the user annotated, which we can get by using `#name`. The\ntrait implementation has one function, `hello_macro`, whose body contains the\nfunctionality we want to provide: printing `Hello, Macro! My name is` and then\nthe name of the annotated type.\n\nThe `stringify!` macro used here is built into Rust. It takes a Rust\nexpression, such as `1 + 2`, and at compile time turns the expression into a\nstring literal, such as `\"1 + 2\"`. This is different than `format!` or\n`println!`, macros which evaluate the expression and then turn the result into\na `String`. There is a possibility that the `#name` input might be an\nexpression to print literally, so we use `stringify!`. Using `stringify!` also\nsaves an allocation by converting `#name` to a string literal at compile time.\n\nAt this point, `cargo build` should complete successfully in both `hello_macro`\nand `hello_macro_derive`. Let’s hook up these crates to the code in Listing\n19-30 to see the procedural macro in action! Create a new binary project in\nyour *projects* directory using `cargo new pancakes`. We need to add\n`hello_macro` and `hello_macro_derive` as dependencies in the `pancakes`\ncrate’s *Cargo.toml*. If you’re publishing your versions of `hello_macro` and\n`hello_macro_derive` to [crates.io](https://crates.io/), they would be regular\ndependencies; if not, you can specify them as `path` dependencies as follows:\n\n```toml\n[dependencies]\nhello_macro = { path = \"../hello_macro\" }\nhello_macro_derive = { path = \"../hello_macro/hello_macro_derive\" }\n```\n\nPut the code in Listing 19-30 into *src/main.rs*, and run `cargo run`: it\nshould print `Hello, Macro! My name is Pancakes!` The implementation of the\n`HelloMacro` trait from the procedural macro was included without the\n`pancakes` crate needing to implement it; the `#[derive(HelloMacro)]` added the\ntrait implementation.\n\nNext, let’s explore how the other kinds of procedural macros differ from custom\nderive macros.\n\n### Attribute-like macros\n\nAttribute-like macros are similar to custom derive macros, but instead of\ngenerating code for the `derive` attribute, they allow you to create new\nattributes. They’re also more flexible: `derive` only works for structs and\nenums; attributes can be applied to other items as well, such as functions.\nHere’s an example of using an attribute-like macro: say you have an attribute\nnamed `route` that annotates functions when using a web application framework:\n\n```rust,ignore\n#[route(GET, \"/\")]\nfn index() {\n```\n\nThis `#[route]` attribute would be defined by the framework as a procedural\nmacro. The signature of the macro definition function would look like this:\n\n```rust,ignore\n#[proc_macro_attribute]\npub fn route(attr: TokenStream, item: TokenStream) -> TokenStream {\n```\n\nHere, we have two parameters of type `TokenStream`. The first is for the\ncontents of the attribute: the `GET, \"/\"` part. The second is the body of the\nitem the attribute is attached to: in this case, `fn index() {}` and the rest\nof the function’s body.\n\nOther than that, attribute-like macros work the same way as custom derive\nmacros: you create a crate with the `proc-macro` crate type and implement a\nfunction that generates the code you want!\n\n### Function-like macros\n\nFunction-like macros define macros that look like function calls. Similarly to\n`macro_rules!` macros, they’re more flexible than functions; for example, they\ncan take an unknown number of arguments. However, `macro_rules!` macros can be\ndefined only using the match-like syntax we discussed in the section\n[“Declarative Macros with `macro_rules!` for General Metaprogramming”][decl]\nearlier. Function-like macros take a `TokenStream` parameter and their\ndefinition manipulates that `TokenStream` using Rust code as the other two\ntypes of procedural macros do. An example of a function-like macro is an `sql!`\nmacro that might be called like so:\n\n[decl]: #declarative-macros-with-macro_rules-for-general-metaprogramming\n\n```rust,ignore\nlet sql = sql!(SELECT * FROM posts WHERE id=1);\n```\n\nThis macro would parse the SQL statement inside it and check that it’s\nsyntactically correct, which is much more complex processing than a\n`macro_rules!` macro can do. The `sql!` macro would be defined like this:\n\n```rust,ignore\n#[proc_macro]\npub fn sql(input: TokenStream) -> TokenStream {\n```\n\nThis definition is similar to the custom derive macro’s signature: we receive\nthe tokens that are inside the parentheses and return the code we wanted to\ngenerate.\n\n## Summary\n\nWhew! Now you have some Rust features in your toolbox that you won’t use often,\nbut you’ll know they’re available in very particular circumstances. We’ve\nintroduced several complex topics so that when you encounter them in error\nmessage suggestions or in other peoples’ code, you’ll be able to recognize\nthese concepts and syntax. Use this chapter as a reference to guide you to\nsolutions.\n\nNext, we’ll put everything we’ve discussed throughout the book into practice\nand do one more project!\n", number: Some(SectionNumber([19, 5])), sub_items: [], path: "ch19-06-macros.md", parent_names: ["Advanced Features"] })], path: "ch19-00-advanced-features.md", parent_names: [] }), Chapter(Chapter { name: "Final Project: Building a Multithreaded Web Server", content: "# Final Project: Building a Multithreaded Web Server\n\nIt’s been a long journey, but we’ve reached the end of the book. In this\nchapter, we’ll build one more project together to demonstrate some of the\nconcepts we covered in the final chapters, as well as recap some earlier\nlessons.\n\nFor our final project, we’ll make a web server that says “hello” and looks like\nFigure 20-1 in a web browser.\n\n![hello from rust](img/trpl20-01.png)\n\n<span class=\"caption\">Figure 20-1: Our final shared project</span>\n\nHere is the plan to build the web server:\n\n1. Learn a bit about TCP and HTTP.\n2. Listen for TCP connections on a socket.\n3. Parse a small number of HTTP requests.\n4. Create a proper HTTP response.\n5. Improve the throughput of our server with a thread pool.\n\nBut before we get started, we should mention one detail: the method we’ll use\nwon’t be the best way to build a web server with Rust. A number of\nproduction-ready crates are available on [crates.io](https://crates.io/) that\nprovide more complete web server and thread pool implementations than we’ll\nbuild.\n\nHowever, our intention in this chapter is to help you learn, not to take the\neasy route. Because Rust is a systems programming language, we can choose the\nlevel of abstraction we want to work with and can go to a lower level than is\npossible or practical in other languages. We’ll write the basic HTTP server and\nthread pool manually so you can learn the general ideas and techniques behind\nthe crates you might use in the future.\n", number: Some(SectionNumber([20])), sub_items: [Chapter(Chapter { name: "Building a Single-Threaded Web Server", content: "## Building a Single-Threaded Web Server\n\nWe’ll start by getting a single-threaded web server working. Before we begin,\nlet’s look at a quick overview of the protocols involved in building web\nservers. The details of these protocols are beyond the scope of this book, but\na brief overview will give you the information you need.\n\nThe two main protocols involved in web servers are the *Hypertext Transfer\nProtocol* *(HTTP)* and the *Transmission Control Protocol* *(TCP)*. Both\nprotocols are *request-response* protocols, meaning a *client* initiates\nrequests and a *server* listens to the requests and provides a response to the\nclient. The contents of those requests and responses are defined by the\nprotocols.\n\nTCP is the lower-level protocol that describes the details of how information\ngets from one server to another but doesn’t specify what that information is.\nHTTP builds on top of TCP by defining the contents of the requests and\nresponses. It’s technically possible to use HTTP with other protocols, but in\nthe vast majority of cases, HTTP sends its data over TCP. We’ll work with the\nraw bytes of TCP and HTTP requests and responses.\n\n### Listening to the TCP Connection\n\nOur web server needs to listen to a TCP connection, so that’s the first part\nwe’ll work on. The standard library offers a `std::net` module that lets us do\nthis. Let’s make a new project in the usual fashion:\n\n```text\n$ cargo new hello\n     Created binary (application) `hello` project\n$ cd hello\n```\n\nNow enter the code in Listing 20-1 in *src/main.rs* to start. This code will\nlisten at the address `127.0.0.1:7878` for incoming TCP streams. When it gets\nan incoming stream, it will print `Connection established!`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\nuse std::net::TcpListener;\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        println!(\"Connection established!\");\n    }\n}\n```\n\n<span class=\"caption\">Listing 20-1: Listening for incoming streams and printing\na message when we receive a stream</span>\n\nUsing `TcpListener`, we can listen for TCP connections at the address\n`127.0.0.1:7878`. In the address, the section before the colon is an IP address\nrepresenting your computer (this is the same on every computer and doesn’t\nrepresent the authors’ computer specifically), and `7878` is the port. We’ve\nchosen this port for two reasons: HTTP is normally accepted on this port, and\n7878 is *rust* typed on a telephone.\n\nThe `bind` function in this scenario works like the `new` function in that it\nwill return a new `TcpListener` instance. The reason the function is called\n`bind` is that in networking, connecting to a port to listen to is known as\n“binding to a port.”\n\nThe `bind` function returns a `Result<T, E>`, which indicates that binding\nmight fail. For example, connecting to port 80 requires administrator\nprivileges (nonadministrators can listen only on ports higher than 1024), so if\nwe tried to connect to port 80 without being an administrator, binding wouldn’t\nwork. As another example, binding wouldn’t work if we ran two instances of our\nprogram and so had two programs listening to the same port. Because we’re\nwriting a basic server just for learning purposes, we won’t worry about\nhandling these kinds of errors; instead, we use `unwrap` to stop the program if\nerrors happen.\n\nThe `incoming` method on `TcpListener` returns an iterator that gives us a\nsequence of streams (more specifically, streams of type `TcpStream`). A single\n*stream* represents an open connection between the client and the server. A\n*connection* is the name for the full request and response process in which a\nclient connects to the server, the server generates a response, and the server\ncloses the connection. As such, `TcpStream` will read from itself to see what\nthe client sent and then allow us to write our response to the stream. Overall,\nthis `for` loop will process each connection in turn and produce a series of\nstreams for us to handle.\n\nFor now, our handling of the stream consists of calling `unwrap` to terminate\nour program if the stream has any errors; if there aren’t any errors, the\nprogram prints a message. We’ll add more functionality for the success case in\nthe next listing. The reason we might receive errors from the `incoming` method\nwhen a client connects to the server is that we’re not actually iterating over\nconnections. Instead, we’re iterating over *connection attempts*. The\nconnection might not be successful for a number of reasons, many of them\noperating system specific. For example, many operating systems have a limit to\nthe number of simultaneous open connections they can support; new connection\nattempts beyond that number will produce an error until some of the open\nconnections are closed.\n\nLet’s try running this code! Invoke `cargo run` in the terminal and then load\n*127.0.0.1:7878* in a web browser. The browser should show an error message\nlike “Connection reset,” because the server isn’t currently sending back any\ndata. But when you look at your terminal, you should see several messages that\nwere printed when the browser connected to the server!\n\n```text\n     Running `target/debug/hello`\nConnection established!\nConnection established!\nConnection established!\n```\n\nSometimes, you’ll see multiple messages printed for one browser request; the\nreason might be that the browser is making a request for the page as well as a\nrequest for other resources, like the *favicon.ico* icon that appears in the\nbrowser tab.\n\nIt could also be that the browser is trying to connect to the server multiple\ntimes because the server isn’t responding with any data. When `stream` goes out\nof scope and is dropped at the end of the loop, the connection is closed as\npart of the `drop` implementation. Browsers sometimes deal with closed\nconnections by retrying, because the problem might be temporary. The important\nfactor is that we’ve successfully gotten a handle to a TCP connection!\n\nRemember to stop the program by pressing <span class=\"keystroke\">ctrl-c</span>\nwhen you’re done running a particular version of the code. Then restart `cargo\nrun` after you’ve made each set of code changes to make sure you’re running the\nnewest code.\n\n### Reading the Request\n\nLet’s implement the functionality to read the request from the browser! To\nseparate the concerns of first getting a connection and then taking some action\nwith the connection, we’ll start a new function for processing connections. In\nthis new `handle_connection` function, we’ll read data from the TCP stream and\nprint it so we can see the data being sent from the browser. Change the code to\nlook like Listing 20-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\nuse std::io::prelude::*;\nuse std::net::TcpListener;\nuse std::net::TcpStream;\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        handle_connection(stream);\n    }\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let mut buffer = [0; 1024];\n\n    stream.read(&mut buffer).unwrap();\n\n    println!(\"Request: {}\", String::from_utf8_lossy(&buffer[..]));\n}\n```\n\n<span class=\"caption\">Listing 20-2: Reading from the `TcpStream` and printing\nthe data</span>\n\nWe bring `std::io::prelude` into scope to get access to certain traits that let\nus read from and write to the stream. In the `for` loop in the `main` function,\ninstead of printing a message that says we made a connection, we now call the\nnew `handle_connection` function and pass the `stream` to it.\n\nIn the `handle_connection` function, we’ve made the `stream` parameter mutable.\nThe reason is that the `TcpStream` instance keeps track of what data it returns\nto us internally. It might read more data than we asked for and save that data\nfor the next time we ask for data. It therefore needs to be `mut` because its\ninternal state might change; usually, we think of “reading” as not needing\nmutation, but in this case we need the `mut` keyword.\n\nNext, we need to actually read from the stream. We do this in two steps:\nfirst, we declare a `buffer` on the stack to hold the data that is read in.\nWe’ve made the buffer 1024 bytes in size, which is big enough to hold the\ndata of a basic request and sufficient for our purposes in this chapter. If\nwe wanted to handle requests of an arbitrary size, buffer management would\nneed to be more complicated; we’ll keep it simple for now. We pass the buffer\nto `stream.read`, which will read bytes from the `TcpStream` and put them in\nthe buffer.\n\nSecond, we convert the bytes in the buffer to a string and print that string.\nThe `String::from_utf8_lossy` function takes a `&[u8]` and produces a `String`\nfrom it. The “lossy” part of the name indicates the behavior of this function\nwhen it sees an invalid UTF-8 sequence: it will replace the invalid sequence\nwith `�`, the `U+FFFD REPLACEMENT CHARACTER`. You might see replacement\ncharacters for characters in the buffer that aren’t filled by request data.\n\nLet’s try this code! Start the program and make a request in a web browser\nagain. Note that we’ll still get an error page in the browser, but our\nprogram’s output in the terminal will now look similar to this:\n\n```text\n$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.42s\n     Running `target/debug/hello`\nRequest: GET / HTTP/1.1\nHost: 127.0.0.1:7878\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101\nFirefox/52.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\n������������������������������������\n```\n\nDepending on your browser, you might get slightly different output. Now that\nwe’re printing the request data, we can see why we get multiple connections\nfrom one browser request by looking at the path after `Request: GET`. If the\nrepeated connections are all requesting */*, we know the browser is trying to\nfetch */* repeatedly because it’s not getting a response from our program.\n\nLet’s break down this request data to understand what the browser is asking of\nour program.\n\n### A Closer Look at an HTTP Request\n\nHTTP is a text-based protocol, and a request takes this format:\n\n```text\nMethod Request-URI HTTP-Version CRLF\nheaders CRLF\nmessage-body\n```\n\nThe first line is the *request line* that holds information about what the\nclient is requesting. The first part of the request line indicates the *method*\nbeing used, such as `GET` or `POST`, which describes how the client is making\nthis request. Our client used a `GET` request.\n\nThe next part of the request line is */*, which indicates the *Uniform Resource\nIdentifier* *(URI)* the client is requesting: a URI is almost, but not quite,\nthe same as a *Uniform Resource Locator* *(URL)*. The difference between URIs\nand URLs isn’t important for our purposes in this chapter, but the HTTP spec\nuses the term URI, so we can just mentally substitute URL for URI here.\n\nThe last part is the HTTP version the client uses, and then the request line\nends in a *CRLF sequence*. (CRLF stands for *carriage return* and *line feed*,\nwhich are terms from the typewriter days!) The CRLF sequence can also be\nwritten as `\\r\\n`, where `\\r` is a carriage return and `\\n` is a line feed. The\nCRLF sequence separates the request line from the rest of the request data.\nNote that when the CRLF is printed, we see a new line start rather than `\\r\\n`.\n\nLooking at the request line data we received from running our program so far,\nwe see that `GET` is the method, */* is the request URI, and `HTTP/1.1` is the\nversion.\n\nAfter the request line, the remaining lines starting from `Host:` onward are\nheaders. `GET` requests have no body.\n\nTry making a request from a different browser or asking for a different\naddress, such as *127.0.0.1:7878/test*, to see how the request data changes.\n\nNow that we know what the browser is asking for, let’s send back some data!\n\n### Writing a Response\n\nNow we’ll implement sending data in response to a client request. Responses\nhave the following format:\n\n```text\nHTTP-Version Status-Code Reason-Phrase CRLF\nheaders CRLF\nmessage-body\n```\n\nThe first line is a *status line* that contains the HTTP version used in the\nresponse, a numeric status code that summarizes the result of the request, and\na reason phrase that provides a text description of the status code. After the\nCRLF sequence are any headers, another CRLF sequence, and the body of the\nresponse.\n\nHere is an example response that uses HTTP version 1.1, has a status code of\n200, an OK reason phrase, no headers, and no body:\n\n```text\nHTTP/1.1 200 OK\\r\\n\\r\\n\n```\n\nThe status code 200 is the standard success response. The text is a tiny\nsuccessful HTTP response. Let’s write this to the stream as our response to a\nsuccessful request! From the `handle_connection` function, remove the\n`println!` that was printing the request data and replace it with the code in\nListing 20-3.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n# \n# fn main() {\n#     let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n# \n#     for stream in listener.incoming() {\n#         let stream = stream.unwrap();\n# \n#         handle_connection(stream);\n#     }\n# }\n# \nfn handle_connection(mut stream: TcpStream) {\n    let mut buffer = [0; 1024];\n\n    stream.read(&mut buffer).unwrap();\n\n    let response = \"HTTP/1.1 200 OK\\r\\n\\r\\n\";\n\n    stream.write(response.as_bytes()).unwrap();\n    stream.flush().unwrap();\n}\n```\n\n<span class=\"caption\">Listing 20-3: Writing a tiny successful HTTP response to\nthe stream</span>\n\nThe first new line defines the `response` variable that holds the success\nmessage’s data. Then we call `as_bytes` on our `response` to convert the string\ndata to bytes. The `write` method on `stream` takes a `&[u8]` and sends those\nbytes directly down the connection.\n\nBecause the `write` operation could fail, we use `unwrap` on any error result\nas before. Again, in a real application you would add error handling here.\nFinally, `flush` will wait and prevent the program from continuing until all\nthe bytes are written to the connection; `TcpStream` contains an internal\nbuffer to minimize calls to the underlying operating system.\n\nWith these changes, let’s run our code and make a request. We’re no longer\nprinting any data to the terminal, so we won’t see any output other than the\noutput from Cargo. When you load *127.0.0.1:7878* in a web browser, you should\nget a blank page instead of an error. You’ve just hand-coded an HTTP request\nand response!\n\n### Returning Real HTML\n\nLet’s implement the functionality for returning more than a blank page. Create\na new file, *hello.html*, in the root of your project directory, not in the\n*src* directory. You can input any HTML you want; Listing 20-4 shows one\npossibility.\n\n<span class=\"filename\">Filename: hello.html</span>\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Hello!</title>\n  </head>\n  <body>\n    <h1>Hello!</h1>\n    <p>Hi from Rust</p>\n  </body>\n</html>\n```\n\n<span class=\"caption\">Listing 20-4: A sample HTML file to return in a\nresponse</span>\n\nThis is a minimal HTML5 document with a heading and some text. To return this\nfrom the server when a request is received, we’ll modify `handle_connection` as\nshown in Listing 20-5 to read the HTML file, add it to the response as a body,\nand send it.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\nuse std::fs;\n// --snip--\n\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n# \n# fn main() {\n#     let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n# \n#     for stream in listener.incoming() {\n#         let stream = stream.unwrap();\n# \n#         handle_connection(stream);\n#     }\n# }\n# \nfn handle_connection(mut stream: TcpStream) {\n    let mut buffer = [0; 1024];\n    stream.read(&mut buffer).unwrap();\n\n    let contents = fs::read_to_string(\"hello.html\").unwrap();\n\n    let response = format!(\n        \"HTTP/1.1 200 OK\\r\\nContent-Length: {}\\r\\n\\r\\n{}\",\n        contents.len(),\n        contents\n    );\n\n    stream.write(response.as_bytes()).unwrap();\n    stream.flush().unwrap();\n}\n```\n\n<span class=\"caption\">Listing 20-5: Sending the contents of *hello.html* as the\nbody of the response</span>\n\nWe’ve added a line at the top to bring the standard library’s filesystem module\ninto scope. The code for reading the contents of a file to a string should look\nfamiliar; we used it in Chapter 12 when we read the contents of a file for our\nI/O project in Listing 12-4.\n\nNext, we use `format!` to add the file’s contents as the body of the success\nresponse. To ensure a valid HTTP response, we add the `Content-Length` header\nwhich is set to the size of our response body, in this case the size of `hello.html`.\n\nRun this code with `cargo run` and load *127.0.0.1:7878* in your browser; you\nshould see your HTML rendered!\n\nCurrently, we’re ignoring the request data in `buffer` and just sending back\nthe contents of the HTML file unconditionally. That means if you try requesting\n*127.0.0.1:7878/something-else* in your browser, you’ll still get back this\nsame HTML response. Our server is very limited and is not what most web servers\ndo. We want to customize our responses depending on the request and only send\nback the HTML file for a well-formed request to */*.\n\n### Validating the Request and Selectively Responding\n\nRight now, our web server will return the HTML in the file no matter what the\nclient requested. Let’s add functionality to check that the browser is\nrequesting */* before returning the HTML file and return an error if the\nbrowser requests anything else. For this we need to modify `handle_connection`,\nas shown in Listing 20-6. This new code checks the content of the request\nreceived against what we know a request for */* looks like and adds `if` and\n`else` blocks to treat requests differently.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n# use std::fs;\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n# \n# fn main() {\n#     let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n# \n#     for stream in listener.incoming() {\n#         let stream = stream.unwrap();\n# \n#         handle_connection(stream);\n#     }\n# }\n# \n// --snip--\n\nfn handle_connection(mut stream: TcpStream) {\n    let mut buffer = [0; 1024];\n    stream.read(&mut buffer).unwrap();\n\n    let get = b\"GET / HTTP/1.1\\r\\n\";\n\n    if buffer.starts_with(get) {\n        let contents = fs::read_to_string(\"hello.html\").unwrap();\n\n        let response = format!(\n            \"HTTP/1.1 200 OK\\r\\nContent-Length: {}\\r\\n\\r\\n{}\",\n            contents.len(),\n            contents\n        );\n\n        stream.write(response.as_bytes()).unwrap();\n        stream.flush().unwrap();\n    } else {\n        // some other request\n    }\n}\n```\n\n<span class=\"caption\">Listing 20-6: Matching the request and handling requests\nto */* differently from other requests</span>\n\nFirst, we hardcode the data corresponding to the */* request into the `get`\nvariable. Because we’re reading raw bytes into the buffer, we transform `get`\ninto a byte string by adding the `b\"\"` byte string syntax at the start of the\ncontent data. Then we check whether `buffer` starts with the bytes in `get`. If\nit does, it means we’ve received a well-formed request to */*, which is the\nsuccess case we’ll handle in the `if` block that returns the contents of our\nHTML file.\n\nIf `buffer` does *not* start with the bytes in `get`, it means we’ve received\nsome other request. We’ll add code to the `else` block in a moment to respond\nto all other requests.\n\nRun this code now and request *127.0.0.1:7878*; you should get the HTML in\n*hello.html*. If you make any other request, such as\n*127.0.0.1:7878/something-else*, you’ll get a connection error like those you\nsaw when running the code in Listing 20-1 and Listing 20-2.\n\nNow let’s add the code in Listing 20-7 to the `else` block to return a response\nwith the status code 404, which signals that the content for the request was\nnot found. We’ll also return some HTML for a page to render in the browser\nindicating the response to the end user.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n# use std::fs;\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n# \n# fn main() {\n#     let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n# \n#     for stream in listener.incoming() {\n#         let stream = stream.unwrap();\n# \n#         handle_connection(stream);\n#     }\n# }\n# \n# fn handle_connection(mut stream: TcpStream) {\n#     let mut buffer = [0; 1024];\n#     stream.read(&mut buffer).unwrap();\n# \n#     let get = b\"GET / HTTP/1.1\\r\\n\";\n# \n#     if buffer.starts_with(get) {\n#         let contents = fs::read_to_string(\"hello.html\").unwrap();\n# \n#         let response = format!(\n#             \"HTTP/1.1 200 OK\\r\\nContent-Length: {}\\r\\n\\r\\n{}\",\n#             contents.len(),\n#             contents\n#         );\n# \n#         stream.write(response.as_bytes()).unwrap();\n#         stream.flush().unwrap();\n    // --snip--\n    } else {\n        let status_line = \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n\";\n        let contents = fs::read_to_string(\"404.html\").unwrap();\n\n        let response = format!(\"{}{}\", status_line, contents);\n\n        stream.write(response.as_bytes()).unwrap();\n        stream.flush().unwrap();\n    }\n# }\n```\n\n<span class=\"caption\">Listing 20-7: Responding with status code 404 and an\nerror page if anything other than */* was requested</span>\n\nHere, our response has a status line with status code 404 and the reason\nphrase `NOT FOUND`. We’re still not returning headers, and the body of the\nresponse will be the HTML in the file *404.html*. You’ll need to create a\n*404.html* file next to *hello.html* for the error page; again feel free to use\nany HTML you want or use the example HTML in Listing 20-8.\n\n<span class=\"filename\">Filename: 404.html</span>\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Hello!</title>\n  </head>\n  <body>\n    <h1>Oops!</h1>\n    <p>Sorry, I don\'t know what you\'re asking for.</p>\n  </body>\n</html>\n```\n\n<span class=\"caption\">Listing 20-8: Sample content for the page to send back\nwith any 404 response</span>\n\nWith these changes, run your server again. Requesting *127.0.0.1:7878*\nshould return the contents of *hello.html*, and any other request, like\n*127.0.0.1:7878/foo*, should return the error HTML from *404.html*.\n\n### A Touch of Refactoring\n\nAt the moment the `if` and `else` blocks have a lot of repetition: they’re both\nreading files and writing the contents of the files to the stream. The only\ndifferences are the status line and the filename. Let’s make the code more\nconcise by pulling out those differences into separate `if` and `else` lines\nthat will assign the values of the status line and the filename to variables;\nwe can then use those variables unconditionally in the code to read the file\nand write the response. Listing 20-9 shows the resulting code after replacing\nthe large `if` and `else` blocks.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n# use std::fs;\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n# \n# fn main() {\n#     let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n# \n#     for stream in listener.incoming() {\n#         let stream = stream.unwrap();\n# \n#         handle_connection(stream);\n#     }\n# }\n# \n// --snip--\n\nfn handle_connection(mut stream: TcpStream) {\n    // --snip--\n\n#     let mut buffer = [0; 1024];\n#     stream.read(&mut buffer).unwrap();\n# \n#     let get = b\"GET / HTTP/1.1\\r\\n\";\n# \n    let (status_line, filename) = if buffer.starts_with(get) {\n        (\"HTTP/1.1 200 OK\\r\\n\\r\\n\", \"hello.html\")\n    } else {\n        (\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n\", \"404.html\")\n    };\n\n    let contents = fs::read_to_string(filename).unwrap();\n\n    let response = format!(\"{}{}\", status_line, contents);\n\n    stream.write(response.as_bytes()).unwrap();\n    stream.flush().unwrap();\n}\n```\n\n<span class=\"caption\">Listing 20-9: Refactoring the `if` and `else` blocks to\ncontain only the code that differs between the two cases</span>\n\nNow the `if` and `else` blocks only return the appropriate values for the\nstatus line and filename in a tuple; we then use destructuring to assign these\ntwo values to `status_line` and `filename` using a pattern in the `let`\nstatement, as discussed in Chapter 18.\n\nThe previously duplicated code is now outside the `if` and `else` blocks and\nuses the `status_line` and `filename` variables. This makes it easier to see\nthe difference between the two cases, and it means we have only one place to\nupdate the code if we want to change how the file reading and response writing\nwork. The behavior of the code in Listing 20-9 will be the same as that in\nListing 20-8.\n\nAwesome! We now have a simple web server in approximately 40 lines of Rust code\nthat responds to one request with a page of content and responds to all other\nrequests with a 404 response.\n\nCurrently, our server runs in a single thread, meaning it can only serve one\nrequest at a time. Let’s examine how that can be a problem by simulating some\nslow requests. Then we’ll fix it so our server can handle multiple requests at\nonce.\n", number: Some(SectionNumber([20, 1])), sub_items: [], path: "ch20-01-single-threaded.md", parent_names: ["Final Project: Building a Multithreaded Web Server"] }), Chapter(Chapter { name: "Turning Our Single-Threaded Server into a Multithreaded Server", content: "## Turning Our Single-Threaded Server into a Multithreaded Server\n\nRight now, the server will process each request in turn, meaning it won’t\nprocess a second connection until the first is finished processing. If the\nserver received more and more requests, this serial execution would be less and\nless optimal. If the server receives a request that takes a long time to\nprocess, subsequent requests will have to wait until the long request is\nfinished, even if the new requests can be processed quickly. We’ll need to fix\nthis, but first, we’ll look at the problem in action.\n\n### Simulating a Slow Request in the Current Server Implementation\n\nWe’ll look at how a slow-processing request can affect other requests made to\nour current server implementation. Listing 20-10 implements handling a request\nto */sleep* with a simulated slow response that will cause the server to sleep\nfor 5 seconds before responding.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n# use std::fs;\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\nuse std::thread;\nuse std::time::Duration;\n// --snip--\n# \n# fn main() {\n#     let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n# \n#     for stream in listener.incoming() {\n#         let stream = stream.unwrap();\n# \n#         handle_connection(stream);\n#     }\n# }\n\nfn handle_connection(mut stream: TcpStream) {\n    // --snip--\n\n#     let mut buffer = [0; 1024];\n#     stream.read(&mut buffer).unwrap();\n# \n    let get = b\"GET / HTTP/1.1\\r\\n\";\n    let sleep = b\"GET /sleep HTTP/1.1\\r\\n\";\n\n    let (status_line, filename) = if buffer.starts_with(get) {\n        (\"HTTP/1.1 200 OK\\r\\n\\r\\n\", \"hello.html\")\n    } else if buffer.starts_with(sleep) {\n        thread::sleep(Duration::from_secs(5));\n        (\"HTTP/1.1 200 OK\\r\\n\\r\\n\", \"hello.html\")\n    } else {\n        (\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n\", \"404.html\")\n    };\n\n    // --snip--\n# \n#     let contents = fs::read_to_string(filename).unwrap();\n# \n#     let response = format!(\"{}{}\", status_line, contents);\n# \n#     stream.write(response.as_bytes()).unwrap();\n#     stream.flush().unwrap();\n}\n```\n\n<span class=\"caption\">Listing 20-10: Simulating a slow request by recognizing\n*/sleep* and sleeping for 5 seconds</span>\n\nThis code is a bit messy, but it’s good enough for simulation purposes. We\ncreated a second request `sleep`, whose data our server recognizes. We added an\n`else if` after the `if` block to check for the request to */sleep*. When that\nrequest is received, the server will sleep for 5 seconds before rendering the\nsuccessful HTML page.\n\nYou can see how primitive our server is: real libraries would handle the\nrecognition of multiple requests in a much less verbose way!\n\nStart the server using `cargo run`. Then open two browser windows: one for\n*http://127.0.0.1:7878/* and the other for *http://127.0.0.1:7878/sleep*. If\nyou enter the */* URI a few times, as before, you’ll see it respond quickly.\nBut if you enter */sleep* and then load */*, you’ll see that */* waits until\n`sleep` has slept for its full 5 seconds before loading.\n\nThere are multiple ways we could change how our web server works to avoid\nhaving more requests back up behind a slow request; the one we’ll implement is\na thread pool.\n\n### Improving Throughput with a Thread Pool\n\nA *thread pool* is a group of spawned threads that are waiting and ready to\nhandle a task. When the program receives a new task, it assigns one of the\nthreads in the pool to the task, and that thread will process the task. The\nremaining threads in the pool are available to handle any other tasks that come\nin while the first thread is processing. When the first thread is done\nprocessing its task, it’s returned to the pool of idle threads, ready to handle\na new task. A thread pool allows you to process connections concurrently,\nincreasing the throughput of your server.\n\nWe’ll limit the number of threads in the pool to a small number to protect us\nfrom Denial of Service (DoS) attacks; if we had our program create a new thread\nfor each request as it came in, someone making 10 million requests to our\nserver could create havoc by using up all our server’s resources and grinding\nthe processing of requests to a halt.\n\nRather than spawning unlimited threads, we’ll have a fixed number of threads\nwaiting in the pool. As requests come in, they’ll be sent to the pool for\nprocessing. The pool will maintain a queue of incoming requests. Each of the\nthreads in the pool will pop off a request from this queue, handle the request,\nand then ask the queue for another request. With this design, we can process\n`N` requests concurrently, where `N` is the number of threads. If each thread\nis responding to a long-running request, subsequent requests can still back up\nin the queue, but we’ve increased the number of long-running requests we can\nhandle before reaching that point.\n\nThis technique is just one of many ways to improve the throughput of a web\nserver. Other options you might explore are the fork/join model and the\nsingle-threaded async I/O model. If you’re interested in this topic, you can\nread more about other solutions and try to implement them in Rust; with a\nlow-level language like Rust, all of these options are possible.\n\nBefore we begin implementing a thread pool, let’s talk about what using the\npool should look like. When you’re trying to design code, writing the client\ninterface first can help guide your design. Write the API of the code so it’s\nstructured in the way you want to call it; then implement the functionality\nwithin that structure rather than implementing the functionality and then\ndesigning the public API.\n\nSimilar to how we used test-driven development in the project in Chapter 12,\nwe’ll use compiler-driven development here. We’ll write the code that calls the\nfunctions we want, and then we’ll look at errors from the compiler to determine\nwhat we should change next to get the code to work.\n\n#### Code Structure If We Could Spawn a Thread for Each Request\n\nFirst, let’s explore how our code might look if it did create a new thread for\nevery connection. As mentioned earlier, this isn’t our final plan due to the\nproblems with potentially spawning an unlimited number of threads, but it is a\nstarting point. Listing 20-11 shows the changes to make to `main` to spawn a\nnew thread to handle each stream within the `for` loop.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n# use std::fs;\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n# use std::thread;\n# use std::time::Duration;\n# \nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        thread::spawn(|| {\n            handle_connection(stream);\n        });\n    }\n}\n# \n# fn handle_connection(mut stream: TcpStream) {\n#     let mut buffer = [0; 1024];\n#     stream.read(&mut buffer).unwrap();\n# \n#     let get = b\"GET / HTTP/1.1\\r\\n\";\n#     let sleep = b\"GET /sleep HTTP/1.1\\r\\n\";\n# \n#     let (status_line, filename) = if buffer.starts_with(get) {\n#         (\"HTTP/1.1 200 OK\\r\\n\\r\\n\", \"hello.html\")\n#     } else if buffer.starts_with(sleep) {\n#         thread::sleep(Duration::from_secs(5));\n#         (\"HTTP/1.1 200 OK\\r\\n\\r\\n\", \"hello.html\")\n#     } else {\n#         (\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n\", \"404.html\")\n#     };\n# \n#     let contents = fs::read_to_string(filename).unwrap();\n# \n#     let response = format!(\"{}{}\", status_line, contents);\n# \n#     stream.write(response.as_bytes()).unwrap();\n#     stream.flush().unwrap();\n# }\n```\n\n<span class=\"caption\">Listing 20-11: Spawning a new thread for each\nstream</span>\n\nAs you learned in Chapter 16, `thread::spawn` will create a new thread and then\nrun the code in the closure in the new thread. If you run this code and load\n*/sleep* in your browser, then */* in two more browser tabs, you’ll indeed see\nthat the requests to */* don’t have to wait for */sleep* to finish. But as we\nmentioned, this will eventually overwhelm the system because you’d be making\nnew threads without any limit.\n\n#### Creating a Similar Interface for a Finite Number of Threads\n\nWe want our thread pool to work in a similar, familiar way so switching from\nthreads to a thread pool doesn’t require large changes to the code that uses\nour API. Listing 20-12 shows the hypothetical interface for a `ThreadPool`\nstruct we want to use instead of `thread::spawn`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n# use std::fs;\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n# use std::thread;\n# use std::time::Duration;\n# \nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n    let pool = ThreadPool::new(4);\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n}\n# \n# fn handle_connection(mut stream: TcpStream) {\n#     let mut buffer = [0; 1024];\n#     stream.read(&mut buffer).unwrap();\n# \n#     let get = b\"GET / HTTP/1.1\\r\\n\";\n#     let sleep = b\"GET /sleep HTTP/1.1\\r\\n\";\n# \n#     let (status_line, filename) = if buffer.starts_with(get) {\n#         (\"HTTP/1.1 200 OK\\r\\n\\r\\n\", \"hello.html\")\n#     } else if buffer.starts_with(sleep) {\n#         thread::sleep(Duration::from_secs(5));\n#         (\"HTTP/1.1 200 OK\\r\\n\\r\\n\", \"hello.html\")\n#     } else {\n#         (\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n\", \"404.html\")\n#     };\n# \n#     let contents = fs::read_to_string(filename).unwrap();\n# \n#     let response = format!(\"{}{}\", status_line, contents);\n# \n#     stream.write(response.as_bytes()).unwrap();\n#     stream.flush().unwrap();\n# }\n```\n\n<span class=\"caption\">Listing 20-12: Our ideal `ThreadPool` interface</span>\n\nWe use `ThreadPool::new` to create a new thread pool with a configurable number\nof threads, in this case four. Then, in the `for` loop, `pool.execute` has a\nsimilar interface as `thread::spawn` in that it takes a closure the pool should\nrun for each stream. We need to implement `pool.execute` so it takes the\nclosure and gives it to a thread in the pool to run. This code won’t yet\ncompile, but we’ll try so the compiler can guide us in how to fix it.\n\n#### Building the `ThreadPool` Struct Using Compiler Driven Development\n\nMake the changes in Listing 20-12 to *src/main.rs*, and then let’s use the\ncompiler errors from `cargo check` to drive our development. Here is the first\nerror we get:\n\n```text\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0433]: failed to resolve: use of undeclared type or module `ThreadPool`\n  --> src/main.rs:10:16\n   |\n10 |     let pool = ThreadPool::new(4);\n   |                ^^^^^^^^^^ use of undeclared type or module `ThreadPool`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\nerror: could not compile `hello`.\n\nTo learn more, run the command again with --verbose.\n```\n\nGreat! This error tells us we need a `ThreadPool` type or module, so we’ll\nbuild one now. Our `ThreadPool` implementation will be independent of the kind\nof work our web server is doing. So, let’s switch the `hello` crate from a\nbinary crate to a library crate to hold our `ThreadPool` implementation. After\nwe change to a library crate, we could also use the separate thread pool\nlibrary for any work we want to do using a thread pool, not just for serving\nweb requests.\n\nCreate a *src/lib.rs* that contains the following, which is the simplest\ndefinition of a `ThreadPool` struct that we can have for now:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub struct ThreadPool;\n```\n\nThen create a new directory, *src/bin*, and move the binary crate rooted in\n*src/main.rs* into *src/bin/main.rs*. Doing so will make the library crate the\nprimary crate in the *hello* directory; we can still run the binary in\n*src/bin/main.rs* using `cargo run`. After moving the *main.rs* file, edit it\nto bring the library crate in and bring `ThreadPool` into scope by adding the\nfollowing code to the top of *src/bin/main.rs*:\n\n<span class=\"filename\">Filename: src/bin/main.rs</span>\n\n```rust,ignore\nuse hello::ThreadPool;\n# use std::fs;\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n# use std::thread;\n# use std::time::Duration;\n# \n# fn main() {\n#     let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n#     let pool = ThreadPool::new(4);\n# \n#     for stream in listener.incoming() {\n#         let stream = stream.unwrap();\n# \n#         pool.execute(|| {\n#             handle_connection(stream);\n#         });\n#     }\n# }\n# \n# fn handle_connection(mut stream: TcpStream) {\n#     let mut buffer = [0; 1024];\n#     stream.read(&mut buffer).unwrap();\n# \n#     let get = b\"GET / HTTP/1.1\\r\\n\";\n#     let sleep = b\"GET /sleep HTTP/1.1\\r\\n\";\n# \n#     let (status_line, filename) = if buffer.starts_with(get) {\n#         (\"HTTP/1.1 200 OK\\r\\n\\r\\n\", \"hello.html\")\n#     } else if buffer.starts_with(sleep) {\n#         thread::sleep(Duration::from_secs(5));\n#         (\"HTTP/1.1 200 OK\\r\\n\\r\\n\", \"hello.html\")\n#     } else {\n#         (\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n\", \"404.html\")\n#     };\n# \n#     let contents = fs::read_to_string(filename).unwrap();\n# \n#     let response = format!(\"{}{}\", status_line, contents);\n# \n#     stream.write(response.as_bytes()).unwrap();\n#     stream.flush().unwrap();\n# }\n```\n\nThis code still won’t work, but let’s check it again to get the next error that\nwe need to address:\n\n```text\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no function or associated item named `new` found for type `hello::ThreadPool` in the current scope\n  --> src/bin/main.rs:11:28\n   |\n11 |     let pool = ThreadPool::new(4);\n   |                            ^^^ function or associated item not found in `hello::ThreadPool`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\nerror: could not compile `hello`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThis error indicates that next we need to create an associated function named\n`new` for `ThreadPool`. We also know that `new` needs to have one parameter\nthat can accept `4` as an argument and should return a `ThreadPool` instance.\nLet’s implement the simplest `new` function that will have those\ncharacteristics:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\npub struct ThreadPool;\n\nimpl ThreadPool {\n    pub fn new(size: usize) -> ThreadPool {\n        ThreadPool\n    }\n}\n# \n# fn main() {}\n```\n\nWe chose `usize` as the type of the `size` parameter, because we know that a\nnegative number of threads doesn’t make any sense. We also know we’ll use this\n4 as the number of elements in a collection of threads, which is what the\n`usize` type is for, as discussed in the [“Integer Types”][integer-types]<!--\nignore --> section of Chapter 3.\n\nLet’s check the code again:\n\n```text\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no method named `execute` found for type `hello::ThreadPool` in the current scope\n  --> src/bin/main.rs:16:14\n   |\n16 |         pool.execute(|| {\n   |              ^^^^^^^ method not found in `hello::ThreadPool`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\nerror: could not compile `hello`.\n\nTo learn more, run the command again with --verbose.\n```\n\nNow the error occurs because we don’t have an `execute` method on `ThreadPool`.\nRecall from the [“Creating a Similar Interface for a Finite Number of\nThreads”](#creating-a-similar-interface-for-a-finite-number-of-threads)<!--\nignore --> section that we decided our thread pool should have an interface\nsimilar to `thread::spawn`. In addition, we’ll implement the `execute` function\nso it takes the closure it’s given and gives it to an idle thread in the pool\nto run.\n\nWe’ll define the `execute` method on `ThreadPool` to take a closure as a\nparameter. Recall from the [“Storing Closures Using Generic Parameters and the\n`Fn` Traits”][storing-closures-using-generic-parameters-and-the-fn-traits]<!--\nignore --> section in Chapter 13 that we can take closures as parameters with\nthree different traits: `Fn`, `FnMut`, and `FnOnce`. We need to decide which\nkind of closure to use here. We know we’ll end up doing something similar to\nthe standard library `thread::spawn` implementation, so we can look at what\nbounds the signature of `thread::spawn` has on its parameter. The documentation\nshows us the following:\n\n```rust,ignore\npub fn spawn<F, T>(f: F) -> JoinHandle<T>\n    where\n        F: FnOnce() -> T + Send + \'static,\n        T: Send + \'static\n```\n\nThe `F` type parameter is the one we’re concerned with here; the `T` type\nparameter is related to the return value, and we’re not concerned with that. We\ncan see that `spawn` uses `FnOnce` as the trait bound on `F`. This is probably\nwhat we want as well, because we’ll eventually pass the argument we get in\n`execute` to `spawn`. We can be further confident that `FnOnce` is the trait we\nwant to use because the thread for running a request will only execute that\nrequest’s closure one time, which matches the `Once` in `FnOnce`.\n\nThe `F` type parameter also has the trait bound `Send` and the lifetime bound\n`\'static`, which are useful in our situation: we need `Send` to transfer the\nclosure from one thread to another and `\'static` because we don’t know how long\nthe thread will take to execute. Let’s create an `execute` method on\n`ThreadPool` that will take a generic parameter of type `F` with these bounds:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub struct ThreadPool;\n# \nimpl ThreadPool {\n    // --snip--\n#     pub fn new(size: usize) -> ThreadPool {\n#         ThreadPool\n#     }\n# \n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + \'static,\n    {\n    }\n}\n# \n# fn main() {}\n```\n\nWe still use the `()` after `FnOnce` because this `FnOnce` represents a closure\nthat takes no parameters and returns the unit type `()`. Just like function\ndefinitions, the return type can be omitted from the signature, but even if we\nhave no parameters, we still need the parentheses.\n\nAgain, this is the simplest implementation of the `execute` method: it does\nnothing, but we’re trying only to make our code compile. Let’s check it again:\n\n```text\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.24s\n```\n\nIt compiles! But note that if you try `cargo run` and make a request in the\nbrowser, you’ll see the errors in the browser that we saw at the beginning of\nthe chapter. Our library isn’t actually calling the closure passed to `execute`\nyet!\n\n> Note: A saying you might hear about languages with strict compilers, such as\n> Haskell and Rust, is “if the code compiles, it works.” But this saying is not\n> universally true. Our project compiles, but it does absolutely nothing! If we\n> were building a real, complete project, this would be a good time to start\n> writing unit tests to check that the code compiles *and* has the behavior we\n> want.\n\n#### Validating the Number of Threads in `new`\n\nWe aren’t doing anything with the parameters to `new` and `execute`. Let’s\nimplement the bodies of these functions with the behavior we want. To start,\nlet’s think about `new`. Earlier we chose an unsigned type for the `size`\nparameter, because a pool with a negative number of threads makes no sense.\nHowever, a pool with zero threads also makes no sense, yet zero is a perfectly\nvalid `usize`. We’ll add code to check that `size` is greater than zero before\nwe return a `ThreadPool` instance and have the program panic if it receives a\nzero by using the `assert!` macro, as shown in Listing 20-13.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# pub struct ThreadPool;\n# \nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        ThreadPool\n    }\n\n    // --snip--\n# \n#     pub fn execute<F>(&self, f: F)\n#     where\n#         F: FnOnce() + Send + \'static,\n#     {\n#     }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 20-13: Implementing `ThreadPool::new` to panic if\n`size` is zero</span>\n\nWe’ve added some documentation for our `ThreadPool` with doc comments. Note\nthat we followed good documentation practices by adding a section that calls\nout the situations in which our function can panic, as discussed in Chapter 14.\nTry running `cargo doc --open` and clicking the `ThreadPool` struct to see what\nthe generated docs for `new` look like!\n\nInstead of adding the `assert!` macro as we’ve done here, we could make `new`\nreturn a `Result` like we did with `Config::new` in the I/O project in Listing\n12-9. But we’ve decided in this case that trying to create a thread pool\nwithout any threads should be an unrecoverable error. If you’re feeling\nambitious, try to write a version of `new` with the following signature to\ncompare both versions:\n\n```rust,ignore\npub fn new(size: usize) -> Result<ThreadPool, PoolCreationError> {\n```\n\n#### Creating Space to Store the Threads\n\nNow that we have a way to know we have a valid number of threads to store in\nthe pool, we can create those threads and store them in the `ThreadPool` struct\nbefore returning it. But how do we “store” a thread? Let’s take another look at\nthe `thread::spawn` signature:\n\n```rust,ignore\npub fn spawn<F, T>(f: F) -> JoinHandle<T>\n    where\n        F: FnOnce() -> T + Send + \'static,\n        T: Send + \'static\n```\n\nThe `spawn` function returns a `JoinHandle<T>`, where `T` is the type that the\nclosure returns. Let’s try using `JoinHandle` too and see what happens. In our\ncase, the closures we’re passing to the thread pool will handle the connection\nand not return anything, so `T` will be the unit type `()`.\n\nThe code in Listing 20-14 will compile but doesn’t create any threads yet.\nWe’ve changed the definition of `ThreadPool` to hold a vector of\n`thread::JoinHandle<()>` instances, initialized the vector with a capacity of\n`size`, set up a `for` loop that will run some code to create the threads, and\nreturned a `ThreadPool` instance containing them.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,not_desired_behavior\nuse std::thread;\n\npub struct ThreadPool {\n    threads: Vec<thread::JoinHandle<()>>,\n}\n\nimpl ThreadPool {\n    // --snip--\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let mut threads = Vec::with_capacity(size);\n\n        for _ in 0..size {\n            // create some threads and store them in the vector\n        }\n\n        ThreadPool { threads }\n    }\n\n    // --snip--\n# \n#     pub fn execute<F>(&self, f: F)\n#     where\n#         F: FnOnce() + Send + \'static,\n#     {\n#     }\n}\n```\n\n<span class=\"caption\">Listing 20-14: Creating a vector for `ThreadPool` to hold\nthe threads</span>\n\nWe’ve brought `std::thread` into scope in the library crate, because we’re\nusing `thread::JoinHandle` as the type of the items in the vector in\n`ThreadPool`.\n\nOnce a valid size is received, our `ThreadPool` creates a new vector that can\nhold `size` items. We haven’t used the `with_capacity` function in this book\nyet, which performs the same task as `Vec::new` but with an important\ndifference: it preallocates space in the vector. Because we know we need to\nstore `size` elements in the vector, doing this allocation up front is slightly\nmore efficient than using `Vec::new`, which resizes itself as elements are\ninserted.\n\nWhen you run `cargo check` again, you’ll get a few more warnings, but it should\nsucceed.\n\n#### A `Worker` Struct Responsible for Sending Code from the `ThreadPool` to a Thread\n\nWe left a comment in the `for` loop in Listing 20-14 regarding the creation of\nthreads. Here, we’ll look at how we actually create threads. The standard\nlibrary provides `thread::spawn` as a way to create threads, and\n`thread::spawn` expects to get some code the thread should run as soon as the\nthread is created. However, in our case, we want to create the threads and have\nthem *wait* for code that we’ll send later. The standard library’s\nimplementation of threads doesn’t include any way to do that; we have to\nimplement it manually.\n\nWe’ll implement this behavior by introducing a new data structure between the\n`ThreadPool` and the threads that will manage this new behavior. We’ll call\nthis data structure `Worker`, which is a common term in pooling\nimplementations. Think of people working in the kitchen at a restaurant: the\nworkers wait until orders come in from customers, and then they’re responsible\nfor taking those orders and filling them.\n\nInstead of storing a vector of `JoinHandle<()>` instances in the thread pool,\nwe’ll store instances of the `Worker` struct. Each `Worker` will store a single\n`JoinHandle<()>` instance. Then we’ll implement a method on `Worker` that will\ntake a closure of code to run and send it to the already running thread for\nexecution. We’ll also give each worker an `id` so we can distinguish between\nthe different workers in the pool when logging or debugging.\n\nLet’s make the following changes to what happens when we create a `ThreadPool`.\nWe’ll implement the code that sends the closure to the thread after we have\n`Worker` set up in this way:\n\n1. Define a `Worker` struct that holds an `id` and a `JoinHandle<()>`.\n2. Change `ThreadPool` to hold a vector of `Worker` instances.\n3. Define a `Worker::new` function that takes an `id` number and returns a\n   `Worker` instance that holds the `id` and a thread spawned with an empty\n   closure.\n4. In `ThreadPool::new`, use the `for` loop counter to generate an `id`, create\n   a new `Worker` with that `id`, and store the worker in the vector.\n\nIf you’re up for a challenge, try implementing these changes on your own before\nlooking at the code in Listing 20-15.\n\nReady? Here is Listing 20-15 with one way to make the preceding modifications.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nuse std::thread;\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n}\n\nimpl ThreadPool {\n    // --snip--\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id));\n        }\n\n        ThreadPool { workers }\n    }\n    // --snip--\n# \n#     pub fn execute<F>(&self, f: F)\n#     where\n#         F: FnOnce() + Send + \'static,\n#     {\n#     }\n}\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n\nimpl Worker {\n    fn new(id: usize) -> Worker {\n        let thread = thread::spawn(|| {});\n\n        Worker { id, thread }\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 20-15: Modifying `ThreadPool` to hold `Worker`\ninstances instead of holding threads directly</span>\n\nWe’ve changed the name of the field on `ThreadPool` from `threads` to `workers`\nbecause it’s now holding `Worker` instances instead of `JoinHandle<()>`\ninstances. We use the counter in the `for` loop as an argument to\n`Worker::new`, and we store each new `Worker` in the vector named `workers`.\n\nExternal code (like our server in *src/bin/main.rs*) doesn’t need to know the\nimplementation details regarding using a `Worker` struct within `ThreadPool`,\nso we make the `Worker` struct and its `new` function private. The\n`Worker::new` function uses the `id` we give it and stores a `JoinHandle<()>`\ninstance that is created by spawning a new thread using an empty closure.\n\nThis code will compile and will store the number of `Worker` instances we\nspecified as an argument to `ThreadPool::new`. But we’re *still* not processing\nthe closure that we get in `execute`. Let’s look at how to do that next.\n\n#### Sending Requests to Threads via Channels\n\nNow we’ll tackle the problem that the closures given to `thread::spawn` do\nabsolutely nothing. Currently, we get the closure we want to execute in the\n`execute` method. But we need to give `thread::spawn` a closure to run when we\ncreate each `Worker` during the creation of the `ThreadPool`.\n\nWe want the `Worker` structs that we just created to fetch code to run from a\nqueue held in the `ThreadPool` and send that code to its thread to run.\n\nIn Chapter 16, you learned about *channels*—a simple way to communicate between\ntwo threads—that would be perfect for this use case. We’ll use a channel to\nfunction as the queue of jobs, and `execute` will send a job from the\n`ThreadPool` to the `Worker` instances, which will send the job to its thread.\nHere is the plan:\n\n1. The `ThreadPool` will create a channel and hold on to the sending side of\n   the channel.\n2. Each `Worker` will hold on to the receiving side of the channel.\n3. We’ll create a new `Job` struct that will hold the closures we want to send\n   down the channel.\n4. The `execute` method will send the job it wants to execute down the sending\n   side of the channel.\n5. In its thread, the `Worker` will loop over its receiving side of the channel\n   and execute the closures of any jobs it receives.\n\nLet’s start by creating a channel in `ThreadPool::new` and holding the sending\nside in the `ThreadPool` instance, as shown in Listing 20-16. The `Job` struct\ndoesn’t hold anything for now but will be the type of item we’re sending down\nthe channel.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# use std::thread;\n// --snip--\nuse std::sync::mpsc;\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\nstruct Job;\n\nimpl ThreadPool {\n    // --snip--\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id));\n        }\n\n        ThreadPool { workers, sender }\n    }\n    // --snip--\n# \n#     pub fn execute<F>(&self, f: F)\n#     where\n#         F: FnOnce() + Send + \'static,\n#     {\n#     }\n}\n# \n# struct Worker {\n#     id: usize,\n#     thread: thread::JoinHandle<()>,\n# }\n# \n# impl Worker {\n#     fn new(id: usize) -> Worker {\n#         let thread = thread::spawn(|| {});\n# \n#         Worker { id, thread }\n#     }\n# }\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 20-16: Modifying `ThreadPool` to store the\nsending end of a channel that sends `Job` instances</span>\n\nIn `ThreadPool::new`, we create our new channel and have the pool hold the\nsending end. This will successfully compile, still with warnings.\n\nLet’s try passing a receiving end of the channel into each worker as the thread\npool creates the channel. We know we want to use the receiving end in the\nthread that the workers spawn, so we’ll reference the `receiver` parameter in\nthe closure. The code in Listing 20-17 won’t quite compile yet.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n# use std::sync::mpsc;\n# use std::thread;\n# \n# pub struct ThreadPool {\n#     workers: Vec<Worker>,\n#     sender: mpsc::Sender<Job>,\n# }\n# \n# struct Job;\n# \nimpl ThreadPool {\n    // --snip--\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, receiver));\n        }\n\n        ThreadPool { workers, sender }\n    }\n    // --snip--\n# \n#     pub fn execute<F>(&self, f: F)\n#     where\n#         F: FnOnce() + Send + \'static,\n#     {\n#     }\n}\n\n// --snip--\n\n# \n# struct Worker {\n#     id: usize,\n#     thread: thread::JoinHandle<()>,\n# }\n# \nimpl Worker {\n    fn new(id: usize, receiver: mpsc::Receiver<Job>) -> Worker {\n        let thread = thread::spawn(|| {\n            receiver;\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\n<span class=\"caption\">Listing 20-17: Passing the receiving end of the channel\nto the workers</span>\n\nWe’ve made some small and straightforward changes: we pass the receiving end of\nthe channel into `Worker::new`, and then we use it inside the closure.\n\nWhen we try to check this code, we get this error:\n\n```text\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0382]: use of moved value: `receiver`\n  --> src/lib.rs:27:42\n   |\n22 |         let (sender, receiver) = mpsc::channel();\n   |                      -------- move occurs because `receiver` has type `std::sync::mpsc::Receiver<Job>`, which does not implement the `Copy` trait\n...\n27 |             workers.push(Worker::new(id, receiver));\n   |                                          ^^^^^^^^ value moved here, in previous iteration of loop\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `hello`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe code is trying to pass `receiver` to multiple `Worker` instances. This\nwon’t work, as you’ll recall from Chapter 16: the channel implementation that\nRust provides is multiple *producer*, single *consumer*. This means we can’t\njust clone the consuming end of the channel to fix this code. Even if we could,\nthat is not the technique we would want to use; instead, we want to distribute\nthe jobs across threads by sharing the single `receiver` among all the workers.\n\nAdditionally, taking a job off the channel queue involves mutating the\n`receiver`, so the threads need a safe way to share and modify `receiver`;\notherwise, we might get race conditions (as covered in Chapter 16).\n\nRecall the thread-safe smart pointers discussed in Chapter 16: to share\nownership across multiple threads and allow the threads to mutate the value, we\nneed to use `Arc<Mutex<T>>`. The `Arc` type will let multiple workers own the\nreceiver, and `Mutex` will ensure that only one worker gets a job from the\nreceiver at a time. Listing 20-18 shows the changes we need to make.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# use std::sync::mpsc;\n# use std::thread;\nuse std::sync::Arc;\nuse std::sync::Mutex;\n// --snip--\n\n# pub struct ThreadPool {\n#     workers: Vec<Worker>,\n#     sender: mpsc::Sender<Job>,\n# }\n# \n# struct Job;\n# \nimpl ThreadPool {\n    // --snip--\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    // --snip--\n# \n#     pub fn execute<F>(&self, f: F)\n#     where\n#         F: FnOnce() + Send + \'static,\n#     {\n#     }\n}\n\n// --snip--\n\n# struct Worker {\n#     id: usize,\n#     thread: thread::JoinHandle<()>,\n# }\n# \nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        // --snip--\n#         let thread = thread::spawn(|| {\n#             receiver;\n#         });\n# \n#         Worker { id, thread }\n    }\n}\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 20-18: Sharing the receiving end of the channel\namong the workers using `Arc` and `Mutex`</span>\n\nIn `ThreadPool::new`, we put the receiving end of the channel in an `Arc` and a\n`Mutex`. For each new worker, we clone the `Arc` to bump the reference count so\nthe workers can share ownership of the receiving end.\n\nWith these changes, the code compiles! We’re getting there!\n\n#### Implementing the `execute` Method\n\nLet’s finally implement the `execute` method on `ThreadPool`. We’ll also change\n`Job` from a struct to a type alias for a trait object that holds the type of\nclosure that `execute` receives. As discussed in the [“Creating Type Synonyms\nwith Type Aliases”][creating-type-synonyms-with-type-aliases]<!-- ignore -->\nsection of Chapter 19, type aliases allow us to make long types shorter. Look\nat Listing 20-19.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# use std::sync::mpsc;\n# use std::sync::Arc;\n# use std::sync::Mutex;\n# use std::thread;\n# \n# pub struct ThreadPool {\n#     workers: Vec<Worker>,\n#     sender: mpsc::Sender<Job>,\n# }\n# \n// --snip--\n\ntype Job = Box<dyn FnOnce() + Send + \'static>;\n\nimpl ThreadPool {\n    // --snip--\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n#     pub fn new(size: usize) -> ThreadPool {\n#         assert!(size > 0);\n# \n#         let (sender, receiver) = mpsc::channel();\n# \n#         let receiver = Arc::new(Mutex::new(receiver));\n# \n#         let mut workers = Vec::with_capacity(size);\n# \n#         for id in 0..size {\n#             workers.push(Worker::new(id, Arc::clone(&receiver)));\n#         }\n# \n#         ThreadPool { workers, sender }\n#     }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + \'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.send(job).unwrap();\n    }\n}\n\n// --snip--\n# \n# struct Worker {\n#     id: usize,\n#     thread: thread::JoinHandle<()>,\n# }\n# \n# impl Worker {\n#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n#         let thread = thread::spawn(|| {\n#             receiver;\n#         });\n# \n#         Worker { id, thread }\n#     }\n# }\n# \n# fn main() {}\n```\n\n<span class=\"caption\">Listing 20-19: Creating a `Job` type alias for a `Box`\nthat holds each closure and then sending the job down the channel</span>\n\nAfter creating a new `Job` instance using the closure we get in `execute`, we\nsend that job down the sending end of the channel. We’re calling `unwrap` on\n`send` for the case that sending fails. This might happen if, for example, we\nstop all our threads from executing, meaning the receiving end has stopped\nreceiving new messages. At the moment, we can’t stop our threads from\nexecuting: our threads continue executing as long as the pool exists. The\nreason we use `unwrap` is that we know the failure case won’t happen, but the\ncompiler doesn’t know that.\n\nBut we’re not quite done yet! In the worker, our closure being passed to\n`thread::spawn` still only *references* the receiving end of the channel.\nInstead, we need the closure to loop forever, asking the receiving end of the\nchannel for a job and running the job when it gets one. Let’s make the change\nshown in Listing 20-20 to `Worker::new`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# use std::sync::mpsc;\n# use std::sync::Arc;\n# use std::sync::Mutex;\n# use std::thread;\n# \n# pub struct ThreadPool {\n#     workers: Vec<Worker>,\n#     sender: mpsc::Sender<Job>,\n# }\n# \n# type Job = Box<dyn FnOnce() + Send + \'static>;\n# \n# impl ThreadPool {\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n#     pub fn new(size: usize) -> ThreadPool {\n#         assert!(size > 0);\n# \n#         let (sender, receiver) = mpsc::channel();\n# \n#         let receiver = Arc::new(Mutex::new(receiver));\n# \n#         let mut workers = Vec::with_capacity(size);\n# \n#         for id in 0..size {\n#             workers.push(Worker::new(id, Arc::clone(&receiver)));\n#         }\n# \n#         ThreadPool { workers, sender }\n#     }\n# \n#     pub fn execute<F>(&self, f: F)\n#     where\n#         F: FnOnce() + Send + \'static,\n#     {\n#         let job = Box::new(f);\n# \n#         self.sender.send(job).unwrap();\n#     }\n# }\n# \n# struct Worker {\n#     id: usize,\n#     thread: thread::JoinHandle<()>,\n# }\n# \n// --snip--\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || loop {\n            let job = receiver.lock().unwrap().recv().unwrap();\n\n            println!(\"Worker {} got a job; executing.\", id);\n\n            job();\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\n<span class=\"caption\">Listing 20-20: Receiving and executing the jobs in the\nworker’s thread</span>\n\nHere, we first call `lock` on the `receiver` to acquire the mutex, and then we\ncall `unwrap` to panic on any errors. Acquiring a lock might fail if the mutex\nis in a *poisoned* state, which can happen if some other thread panicked while\nholding the lock rather than releasing the lock. In this situation, calling\n`unwrap` to have this thread panic is the correct action to take. Feel free to\nchange this `unwrap` to an `expect` with an error message that is meaningful to\nyou.\n\nIf we get the lock on the mutex, we call `recv` to receive a `Job` from the\nchannel. A final `unwrap` moves past any errors here as well, which might occur\nif the thread holding the sending side of the channel has shut down, similar to\nhow the `send` method returns `Err` if the receiving side shuts down.\n\nThe call to `recv` blocks, so if there is no job yet, the current thread will\nwait until a job becomes available. The `Mutex<T>` ensures that only one\n`Worker` thread at a time is trying to request a job.\n\nWith the implementation of this trick, our thread pool is in a working state!\nGive it a `cargo run` and make some requests:\n\n<!-- manual-regeneration\ncd listings/ch20-web-server/listing-20-20\ncargo run\nmake some requests to 127.0.0.1:7878\nCan\'t automate because the output depends on making requests\n-->\n\n```text\n$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: field is never read: `workers`\n --> src/lib.rs:7:5\n  |\n7 |     workers: Vec<Worker>,\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(dead_code)]` on by default\n\nwarning: field is never read: `id`\n  --> src/lib.rs:48:5\n   |\n48 |     id: usize,\n   |     ^^^^^^^^^\n\nwarning: field is never read: `thread`\n  --> src/lib.rs:49:5\n   |\n49 |     thread: thread::JoinHandle<()>,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n    Finished dev [unoptimized + debuginfo] target(s) in 1.40s\n     Running `target/debug/main`\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\n```\n\nSuccess! We now have a thread pool that executes connections asynchronously.\nThere are never more than four threads created, so our system won’t get\noverloaded if the server receives a lot of requests. If we make a request to\n*/sleep*, the server will be able to serve other requests by having another\nthread run them.\n\n> Note: if you open */sleep* in multiple browser windows simultaneously, they\n> might load one at a time in 5 second intervals. Some web browsers execute\n> multiple instances of the same request sequentially for caching reasons. This\n> limitation is not caused by our web server.\n\nAfter learning about the `while let` loop in Chapter 18, you might be wondering\nwhy we didn’t write the worker thread code as shown in Listing 20-21.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,not_desired_behavior\n# use std::sync::mpsc;\n# use std::sync::Arc;\n# use std::sync::Mutex;\n# use std::thread;\n# \n# pub struct ThreadPool {\n#     workers: Vec<Worker>,\n#     sender: mpsc::Sender<Job>,\n# }\n# \n# type Job = Box<dyn FnOnce() + Send + \'static>;\n# \n# impl ThreadPool {\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n#     pub fn new(size: usize) -> ThreadPool {\n#         assert!(size > 0);\n# \n#         let (sender, receiver) = mpsc::channel();\n# \n#         let receiver = Arc::new(Mutex::new(receiver));\n# \n#         let mut workers = Vec::with_capacity(size);\n# \n#         for id in 0..size {\n#             workers.push(Worker::new(id, Arc::clone(&receiver)));\n#         }\n# \n#         ThreadPool { workers, sender }\n#     }\n# \n#     pub fn execute<F>(&self, f: F)\n#     where\n#         F: FnOnce() + Send + \'static,\n#     {\n#         let job = Box::new(f);\n# \n#         self.sender.send(job).unwrap();\n#     }\n# }\n# \n# struct Worker {\n#     id: usize,\n#     thread: thread::JoinHandle<()>,\n# }\n// --snip--\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || {\n            while let Ok(job) = receiver.lock().unwrap().recv() {\n                println!(\"Worker {} got a job; executing.\", id);\n\n                job();\n            }\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\n<span class=\"caption\">Listing 20-21: An alternative implementation of\n`Worker::new` using `while let`</span>\n\nThis code compiles and runs but doesn’t result in the desired threading\nbehavior: a slow request will still cause other requests to wait to be\nprocessed. The reason is somewhat subtle: the `Mutex` struct has no public\n`unlock` method because the ownership of the lock is based on the lifetime of\nthe `MutexGuard<T>` within the `LockResult<MutexGuard<T>>` that the `lock`\nmethod returns. At compile time, the borrow checker can then enforce the rule\nthat a resource guarded by a `Mutex` cannot be accessed unless we hold the\nlock. But this implementation can also result in the lock being held longer\nthan intended if we don’t think carefully about the lifetime of the\n`MutexGuard<T>`. Because the values in the `while let` expression remain in\nscope for the duration of the block, the lock remains held for the duration of\nthe call to `job()`, meaning other workers cannot receive jobs.\n\nBy using `loop` instead and acquiring the lock without assigning to a variable,\nthe temporary `MutexGuard` returned from the `lock` method is dropped as soon\nas the `let job` statement ends. This ensures that the lock is held during the\ncall to `recv`, but it is released before the call to `job()`, allowing\nmultiple requests to be serviced concurrently.\n\n[creating-type-synonyms-with-type-aliases]:\nch19-04-advanced-types.html#creating-type-synonyms-with-type-aliases\n[integer-types]: ch03-02-data-types.html#integer-types\n[storing-closures-using-generic-parameters-and-the-fn-traits]:\nch13-01-closures.html#storing-closures-using-generic-parameters-and-the-fn-traits\n", number: Some(SectionNumber([20, 2])), sub_items: [], path: "ch20-02-multithreaded.md", parent_names: ["Final Project: Building a Multithreaded Web Server"] }), Chapter(Chapter { name: "Graceful Shutdown and Cleanup", content: "## Graceful Shutdown and Cleanup\n\nThe code in Listing 20-20 is responding to requests asynchronously through the\nuse of a thread pool, as we intended. We get some warnings about the `workers`,\n`id`, and `thread` fields that we’re not using in a direct way that reminds us\nwe’re not cleaning up anything. When we use the less elegant <span\nclass=\"keystroke\">ctrl-c</span> method to halt the main thread, all other\nthreads are stopped immediately as well, even if they’re in the middle of\nserving a request.\n\nNow we’ll implement the `Drop` trait to call `join` on each of the threads in\nthe pool so they can finish the requests they’re working on before closing.\nThen we’ll implement a way to tell the threads they should stop accepting new\nrequests and shut down. To see this code in action, we’ll modify our server to\naccept only two requests before gracefully shutting down its thread pool.\n\n### Implementing the `Drop` Trait on `ThreadPool`\n\nLet’s start with implementing `Drop` on our thread pool. When the pool is\ndropped, our threads should all join to make sure they finish their work.\nListing 20-22 shows a first attempt at a `Drop` implementation; this code won’t\nquite work yet.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n# use std::sync::mpsc;\n# use std::sync::Arc;\n# use std::sync::Mutex;\n# use std::thread;\n# \n# pub struct ThreadPool {\n#     workers: Vec<Worker>,\n#     sender: mpsc::Sender<Job>,\n# }\n# \n# type Job = Box<dyn FnOnce() + Send + \'static>;\n# \n# impl ThreadPool {\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n#     pub fn new(size: usize) -> ThreadPool {\n#         assert!(size > 0);\n# \n#         let (sender, receiver) = mpsc::channel();\n# \n#         let receiver = Arc::new(Mutex::new(receiver));\n# \n#         let mut workers = Vec::with_capacity(size);\n# \n#         for id in 0..size {\n#             workers.push(Worker::new(id, Arc::clone(&receiver)));\n#         }\n# \n#         ThreadPool { workers, sender }\n#     }\n# \n#     pub fn execute<F>(&self, f: F)\n#     where\n#         F: FnOnce() + Send + \'static,\n#     {\n#         let job = Box::new(f);\n# \n#         self.sender.send(job).unwrap();\n#     }\n# }\n# \nimpl Drop for ThreadPool {\n    fn drop(&mut self) {\n        for worker in &mut self.workers {\n            println!(\"Shutting down worker {}\", worker.id);\n\n            worker.thread.join().unwrap();\n        }\n    }\n}\n# \n# struct Worker {\n#     id: usize,\n#     thread: thread::JoinHandle<()>,\n# }\n# \n# impl Worker {\n#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n#         let thread = thread::spawn(move || loop {\n#             let job = receiver.lock().unwrap().recv().unwrap();\n# \n#             println!(\"Worker {} got a job; executing.\", id);\n# \n#             job();\n#         });\n# \n#         Worker { id, thread }\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 20-22: Joining each thread when the thread pool\ngoes out of scope</span>\n\nFirst, we loop through each of the thread pool `workers`. We use `&mut` for\nthis because `self` is a mutable reference, and we also need to be able to\nmutate `worker`. For each worker, we print a message saying that this\nparticular worker is shutting down, and then we call `join` on that worker’s\nthread. If the call to `join` fails, we use `unwrap` to make Rust panic and go\ninto an ungraceful shutdown.\n\nHere is the error we get when we compile this code:\n\n```text\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0507]: cannot move out of `worker.thread` which is behind a mutable reference\n  --> src/lib.rs:52:13\n   |\n52 |             worker.thread.join().unwrap();\n   |             ^^^^^^^^^^^^^ move occurs because `worker.thread` has type `std::thread::JoinHandle<()>`, which does not implement the `Copy` trait\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0507`.\nerror: could not compile `hello`.\n\nTo learn more, run the command again with --verbose.\n```\n\nThe error tells us we can’t call `join` because we only have a mutable borrow\nof each `worker` and `join` takes ownership of its argument. To solve this\nissue, we need to move the thread out of the `Worker` instance that owns\n`thread` so `join` can consume the thread. We did this in Listing 17-15: if\n`Worker` holds an `Option<thread::JoinHandle<()>>` instead, we can call the\n`take` method on the `Option` to move the value out of the `Some` variant and\nleave a `None` variant in its place. In other words, a `Worker` that is running\nwill have a `Some` variant in `thread`, and when we want to clean up a\n`Worker`, we’ll replace `Some` with `None` so the `Worker` doesn’t have a\nthread to run.\n\nSo we know we want to update the definition of `Worker` like this:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n# use std::sync::mpsc;\n# use std::sync::Arc;\n# use std::sync::Mutex;\n# use std::thread;\n# \n# pub struct ThreadPool {\n#     workers: Vec<Worker>,\n#     sender: mpsc::Sender<Job>,\n# }\n# \n# type Job = Box<dyn FnOnce() + Send + \'static>;\n# \n# impl ThreadPool {\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n#     pub fn new(size: usize) -> ThreadPool {\n#         assert!(size > 0);\n# \n#         let (sender, receiver) = mpsc::channel();\n# \n#         let receiver = Arc::new(Mutex::new(receiver));\n# \n#         let mut workers = Vec::with_capacity(size);\n# \n#         for id in 0..size {\n#             workers.push(Worker::new(id, Arc::clone(&receiver)));\n#         }\n# \n#         ThreadPool { workers, sender }\n#     }\n# \n#     pub fn execute<F>(&self, f: F)\n#     where\n#         F: FnOnce() + Send + \'static,\n#     {\n#         let job = Box::new(f);\n# \n#         self.sender.send(job).unwrap();\n#     }\n# }\n# \n# impl Drop for ThreadPool {\n#     fn drop(&mut self) {\n#         for worker in &mut self.workers {\n#             println!(\"Shutting down worker {}\", worker.id);\n# \n#             worker.thread.join().unwrap();\n#         }\n#     }\n# }\n# \nstruct Worker {\n    id: usize,\n    thread: Option<thread::JoinHandle<()>>,\n}\n# \n# impl Worker {\n#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n#         let thread = thread::spawn(move || loop {\n#             let job = receiver.lock().unwrap().recv().unwrap();\n# \n#             println!(\"Worker {} got a job; executing.\", id);\n# \n#             job();\n#         });\n# \n#         Worker { id, thread }\n#     }\n# }\n```\n\nNow let’s lean on the compiler to find the other places that need to change.\nChecking this code, we get two errors:\n\n```text\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no method named `join` found for type `std::option::Option<std::thread::JoinHandle<()>>` in the current scope\n  --> src/lib.rs:52:27\n   |\n52 |             worker.thread.join().unwrap();\n   |                           ^^^^ method not found in `std::option::Option<std::thread::JoinHandle<()>>`\n\nerror[E0308]: mismatched types\n  --> src/lib.rs:72:22\n   |\n72 |         Worker { id, thread }\n   |                      ^^^^^^\n   |                      |\n   |                      expected enum `std::option::Option`, found struct `std::thread::JoinHandle`\n   |                      help: try using a variant of the expected enum: `Some(thread)`\n   |\n   = note: expected enum `std::option::Option<std::thread::JoinHandle<()>>`\n            found struct `std::thread::JoinHandle<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `hello`.\n\nTo learn more, run the command again with --verbose.\n```\n\nLet’s address the second error, which points to the code at the end of\n`Worker::new`; we need to wrap the `thread` value in `Some` when we create a\nnew `Worker`. Make the following changes to fix this error:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n# use std::sync::mpsc;\n# use std::sync::Arc;\n# use std::sync::Mutex;\n# use std::thread;\n# \n# pub struct ThreadPool {\n#     workers: Vec<Worker>,\n#     sender: mpsc::Sender<Job>,\n# }\n# \n# type Job = Box<dyn FnOnce() + Send + \'static>;\n# \n# impl ThreadPool {\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n#     pub fn new(size: usize) -> ThreadPool {\n#         assert!(size > 0);\n# \n#         let (sender, receiver) = mpsc::channel();\n# \n#         let receiver = Arc::new(Mutex::new(receiver));\n# \n#         let mut workers = Vec::with_capacity(size);\n# \n#         for id in 0..size {\n#             workers.push(Worker::new(id, Arc::clone(&receiver)));\n#         }\n# \n#         ThreadPool { workers, sender }\n#     }\n# \n#     pub fn execute<F>(&self, f: F)\n#     where\n#         F: FnOnce() + Send + \'static,\n#     {\n#         let job = Box::new(f);\n# \n#         self.sender.send(job).unwrap();\n#     }\n# }\n# \n# impl Drop for ThreadPool {\n#     fn drop(&mut self) {\n#         for worker in &mut self.workers {\n#             println!(\"Shutting down worker {}\", worker.id);\n# \n#             worker.thread.join().unwrap();\n#         }\n#     }\n# }\n# \n# struct Worker {\n#     id: usize,\n#     thread: Option<thread::JoinHandle<()>>,\n# }\n# \nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        // --snip--\n\n#         let thread = thread::spawn(move || loop {\n#             let job = receiver.lock().unwrap().recv().unwrap();\n# \n#             println!(\"Worker {} got a job; executing.\", id);\n# \n#             job();\n#         });\n# \n        Worker {\n            id,\n            thread: Some(thread),\n        }\n    }\n}\n```\n\nThe first error is in our `Drop` implementation. We mentioned earlier that we\nintended to call `take` on the `Option` value to move `thread` out of `worker`.\nThe following changes will do so:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n# use std::sync::mpsc;\n# use std::sync::Arc;\n# use std::sync::Mutex;\n# use std::thread;\n# \n# pub struct ThreadPool {\n#     workers: Vec<Worker>,\n#     sender: mpsc::Sender<Job>,\n# }\n# \n# type Job = Box<dyn FnOnce() + Send + \'static>;\n# \n# impl ThreadPool {\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n#     pub fn new(size: usize) -> ThreadPool {\n#         assert!(size > 0);\n# \n#         let (sender, receiver) = mpsc::channel();\n# \n#         let receiver = Arc::new(Mutex::new(receiver));\n# \n#         let mut workers = Vec::with_capacity(size);\n# \n#         for id in 0..size {\n#             workers.push(Worker::new(id, Arc::clone(&receiver)));\n#         }\n# \n#         ThreadPool { workers, sender }\n#     }\n# \n#     pub fn execute<F>(&self, f: F)\n#     where\n#         F: FnOnce() + Send + \'static,\n#     {\n#         let job = Box::new(f);\n# \n#         self.sender.send(job).unwrap();\n#     }\n# }\n# \nimpl Drop for ThreadPool {\n    fn drop(&mut self) {\n        for worker in &mut self.workers {\n            println!(\"Shutting down worker {}\", worker.id);\n\n            if let Some(thread) = worker.thread.take() {\n                thread.join().unwrap();\n            }\n        }\n    }\n}\n# \n# struct Worker {\n#     id: usize,\n#     thread: Option<thread::JoinHandle<()>>,\n# }\n# \n# impl Worker {\n#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n#         let thread = thread::spawn(move || loop {\n#             let job = receiver.lock().unwrap().recv().unwrap();\n# \n#             println!(\"Worker {} got a job; executing.\", id);\n# \n#             job();\n#         });\n# \n#         Worker {\n#             id,\n#             thread: Some(thread),\n#         }\n#     }\n# }\n```\n\nAs discussed in Chapter 17, the `take` method on `Option` takes the `Some`\nvariant out and leaves `None` in its place. We’re using `if let` to destructure\nthe `Some` and get the thread; then we call `join` on the thread. If a worker’s\nthread is already `None`, we know that worker has already had its thread\ncleaned up, so nothing happens in that case.\n\n### Signaling to the Threads to Stop Listening for Jobs\n\nWith all the changes we’ve made, our code compiles without any warnings. But\nthe bad news is this code doesn’t function the way we want it to yet. The key\nis the logic in the closures run by the threads of the `Worker` instances: at\nthe moment, we call `join`, but that won’t shut down the threads because they\n`loop` forever looking for jobs. If we try to drop our `ThreadPool` with our\ncurrent implementation of `drop`, the main thread will block forever waiting\nfor the first thread to finish.\n\nTo fix this problem, we’ll modify the threads so they listen for either a `Job`\nto run or a signal that they should stop listening and exit the infinite loop.\nInstead of `Job` instances, our channel will send one of these two enum\nvariants.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n# use std::sync::mpsc;\n# use std::sync::Arc;\n# use std::sync::Mutex;\n# use std::thread;\n# \n# pub struct ThreadPool {\n#     workers: Vec<Worker>,\n#     sender: mpsc::Sender<Job>,\n# }\n# \n# type Job = Box<dyn FnOnce() + Send + \'static>;\n# \nenum Message {\n    NewJob(Job),\n    Terminate,\n}\n# \n# impl ThreadPool {\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n#     pub fn new(size: usize) -> ThreadPool {\n#         assert!(size > 0);\n# \n#         let (sender, receiver) = mpsc::channel();\n# \n#         let receiver = Arc::new(Mutex::new(receiver));\n# \n#         let mut workers = Vec::with_capacity(size);\n# \n#         for id in 0..size {\n#             workers.push(Worker::new(id, Arc::clone(&receiver)));\n#         }\n# \n#         ThreadPool { workers, sender }\n#     }\n# \n#     pub fn execute<F>(&self, f: F)\n#     where\n#         F: FnOnce() + Send + \'static,\n#     {\n#         let job = Box::new(f);\n# \n#         self.sender.send(job).unwrap();\n#     }\n# }\n# \n# impl Drop for ThreadPool {\n#     fn drop(&mut self) {\n#         for worker in &mut self.workers {\n#             println!(\"Shutting down worker {}\", worker.id);\n# \n#             if let Some(thread) = worker.thread.take() {\n#                 thread.join().unwrap();\n#             }\n#         }\n#     }\n# }\n# \n# struct Worker {\n#     id: usize,\n#     thread: Option<thread::JoinHandle<()>>,\n# }\n# \n# impl Worker {\n#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n#         let thread = thread::spawn(move || loop {\n#             let job = receiver.lock().unwrap().recv().unwrap();\n# \n#             println!(\"Worker {} got a job; executing.\", id);\n# \n#             job();\n#         });\n# \n#         Worker {\n#             id,\n#             thread: Some(thread),\n#         }\n#     }\n# }\n# \n# fn main() {}\n```\n\nThis `Message` enum will either be a `NewJob` variant that holds the `Job` the\nthread should run, or it will be a `Terminate` variant that will cause the\nthread to exit its loop and stop.\n\nWe need to adjust the channel to use values of type `Message` rather than type\n`Job`, as shown in Listing 20-23.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n# use std::sync::mpsc;\n# use std::sync::Arc;\n# use std::sync::Mutex;\n# use std::thread;\n# \npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Message>,\n}\n\n// --snip--\n\n# type Job = Box<dyn FnOnce() + Send + \'static>;\n# \n# enum Message {\n#     NewJob(Job),\n#     Terminate,\n# }\n# \nimpl ThreadPool {\n    // --snip--\n\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n#     pub fn new(size: usize) -> ThreadPool {\n#         assert!(size > 0);\n# \n#         let (sender, receiver) = mpsc::channel();\n# \n#         let receiver = Arc::new(Mutex::new(receiver));\n# \n#         let mut workers = Vec::with_capacity(size);\n# \n#         for id in 0..size {\n#             workers.push(Worker::new(id, Arc::clone(&receiver)));\n#         }\n# \n#         ThreadPool { workers, sender }\n#     }\n# \n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + \'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.send(Message::NewJob(job)).unwrap();\n    }\n}\n\n// --snip--\n\n# impl Drop for ThreadPool {\n#     fn drop(&mut self) {\n#         for worker in &mut self.workers {\n#             println!(\"Shutting down worker {}\", worker.id);\n# \n#             if let Some(thread) = worker.thread.take() {\n#                 thread.join().unwrap();\n#             }\n#         }\n#     }\n# }\n# \n# struct Worker {\n#     id: usize,\n#     thread: Option<thread::JoinHandle<()>>,\n# }\n# \nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) -> Worker {\n        let thread = thread::spawn(move || loop {\n            let message = receiver.lock().unwrap().recv().unwrap();\n\n            match message {\n                Message::NewJob(job) => {\n                    println!(\"Worker {} got a job; executing.\", id);\n\n                    job();\n                }\n                Message::Terminate => {\n                    println!(\"Worker {} was told to terminate.\", id);\n\n                    break;\n                }\n            }\n        });\n\n        Worker {\n            id,\n            thread: Some(thread),\n        }\n    }\n}\n```\n\n<span class=\"caption\">Listing 20-23: Sending and receiving `Message` values and\nexiting the loop if a `Worker` receives `Message::Terminate`</span>\n\nTo incorporate the `Message` enum, we need to change `Job` to `Message` in two\nplaces: the definition of `ThreadPool` and the signature of `Worker::new`. The\n`execute` method of `ThreadPool` needs to send jobs wrapped in the\n`Message::NewJob` variant. Then, in `Worker::new` where a `Message` is received\nfrom the channel, the job will be processed if the `NewJob` variant is\nreceived, and the thread will break out of the loop if the `Terminate` variant\nis received.\n\nWith these changes, the code will compile and continue to function in the same\nway as it did after Listing 20-20. But we’ll get a warning because we aren’t\ncreating any messages of the `Terminate` variety. Let’s fix this warning by\nchanging our `Drop` implementation to look like Listing 20-24.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n# use std::sync::mpsc;\n# use std::sync::Arc;\n# use std::sync::Mutex;\n# use std::thread;\n# \n# pub struct ThreadPool {\n#     workers: Vec<Worker>,\n#     sender: mpsc::Sender<Message>,\n# }\n# \n# type Job = Box<dyn FnOnce() + Send + \'static>;\n# \n# enum Message {\n#     NewJob(Job),\n#     Terminate,\n# }\n# \n# impl ThreadPool {\n#     /// Create a new ThreadPool.\n#     ///\n#     /// The size is the number of threads in the pool.\n#     ///\n#     /// # Panics\n#     ///\n#     /// The `new` function will panic if the size is zero.\n#     pub fn new(size: usize) -> ThreadPool {\n#         assert!(size > 0);\n# \n#         let (sender, receiver) = mpsc::channel();\n# \n#         let receiver = Arc::new(Mutex::new(receiver));\n# \n#         let mut workers = Vec::with_capacity(size);\n# \n#         for id in 0..size {\n#             workers.push(Worker::new(id, Arc::clone(&receiver)));\n#         }\n# \n#         ThreadPool { workers, sender }\n#     }\n# \n#     pub fn execute<F>(&self, f: F)\n#     where\n#         F: FnOnce() + Send + \'static,\n#     {\n#         let job = Box::new(f);\n# \n#         self.sender.send(Message::NewJob(job)).unwrap();\n#     }\n# }\n# \nimpl Drop for ThreadPool {\n    fn drop(&mut self) {\n        println!(\"Sending terminate message to all workers.\");\n\n        for _ in &self.workers {\n            self.sender.send(Message::Terminate).unwrap();\n        }\n\n        println!(\"Shutting down all workers.\");\n\n        for worker in &mut self.workers {\n            println!(\"Shutting down worker {}\", worker.id);\n\n            if let Some(thread) = worker.thread.take() {\n                thread.join().unwrap();\n            }\n        }\n    }\n}\n# \n# struct Worker {\n#     id: usize,\n#     thread: Option<thread::JoinHandle<()>>,\n# }\n# \n# impl Worker {\n#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) -> Worker {\n#         let thread = thread::spawn(move || loop {\n#             let message = receiver.lock().unwrap().recv().unwrap();\n# \n#             match message {\n#                 Message::NewJob(job) => {\n#                     println!(\"Worker {} got a job; executing.\", id);\n# \n#                     job();\n#                 }\n#                 Message::Terminate => {\n#                     println!(\"Worker {} was told to terminate.\", id);\n# \n#                     break;\n#                 }\n#             }\n#         });\n# \n#         Worker {\n#             id,\n#             thread: Some(thread),\n#         }\n#     }\n# }\n```\n\n<span class=\"caption\">Listing 20-24: Sending `Message::Terminate` to the\nworkers before calling `join` on each worker thread</span>\n\nWe’re now iterating over the workers twice: once to send one `Terminate`\nmessage for each worker and once to call `join` on each worker’s thread. If we\ntried to send a message and `join` immediately in the same loop, we couldn’t\nguarantee that the worker in the current iteration would be the one to get the\nmessage from the channel.\n\nTo better understand why we need two separate loops, imagine a scenario with\ntwo workers. If we used a single loop to iterate through each worker, on the\nfirst iteration a terminate message would be sent down the channel and `join`\ncalled on the first worker’s thread. If that first worker was busy processing a\nrequest at that moment, the second worker would pick up the terminate message\nfrom the channel and shut down. We would be left waiting on the first worker to\nshut down, but it never would because the second thread picked up the terminate\nmessage. Deadlock!\n\nTo prevent this scenario, we first put all of our `Terminate` messages on the\nchannel in one loop; then we join on all the threads in another loop. Each\nworker will stop receiving requests on the channel once it gets a terminate\nmessage. So, we can be sure that if we send the same number of terminate\nmessages as there are workers, each worker will receive a terminate message\nbefore `join` is called on its thread.\n\nTo see this code in action, let’s modify `main` to accept only two requests\nbefore gracefully shutting down the server, as shown in Listing 20-25.\n\n<span class=\"filename\">Filename: src/bin/main.rs</span>\n\n```rust,ignore\n# use hello::ThreadPool;\n# use std::fs;\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n# use std::thread;\n# use std::time::Duration;\n# \nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n    let pool = ThreadPool::new(4);\n\n    for stream in listener.incoming().take(2) {\n        let stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n\n    println!(\"Shutting down.\");\n}\n# \n# fn handle_connection(mut stream: TcpStream) {\n#     let mut buffer = [0; 1024];\n#     stream.read(&mut buffer).unwrap();\n# \n#     let get = b\"GET / HTTP/1.1\\r\\n\";\n#     let sleep = b\"GET /sleep HTTP/1.1\\r\\n\";\n# \n#     let (status_line, filename) = if buffer.starts_with(get) {\n#         (\"HTTP/1.1 200 OK\\r\\n\\r\\n\", \"hello.html\")\n#     } else if buffer.starts_with(sleep) {\n#         thread::sleep(Duration::from_secs(5));\n#         (\"HTTP/1.1 200 OK\\r\\n\\r\\n\", \"hello.html\")\n#     } else {\n#         (\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n\", \"404.html\")\n#     };\n# \n#     let contents = fs::read_to_string(filename).unwrap();\n# \n#     let response = format!(\"{}{}\", status_line, contents);\n# \n#     stream.write(response.as_bytes()).unwrap();\n#     stream.flush().unwrap();\n# }\n```\n\n<span class=\"caption\">Listing 20-25: Shut down the server after serving two\nrequests by exiting the loop</span>\n\nYou wouldn’t want a real-world web server to shut down after serving only two\nrequests. This code just demonstrates that the graceful shutdown and cleanup is\nin working order.\n\nThe `take` method is defined in the `Iterator` trait and limits the iteration\nto the first two items at most. The `ThreadPool` will go out of scope at the\nend of `main`, and the `drop` implementation will run.\n\nStart the server with `cargo run`, and make three requests. The third request\nshould error, and in your terminal you should see output similar to this:\n\n<!-- manual-regeneration\ncd listings/ch20-web-server/listing-20-25\ncargo run\ncurl http://127.0.0.1:7878\ncurl http://127.0.0.1:7878\ncurl http://127.0.0.1:7878\nthird request will error because server will have shut down\ncopy output below\nCan\'t automate because the output depends on making requests\n-->\n\n```text\n$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.0s\n     Running `target/debug/main`\nWorker 0 got a job; executing.\nWorker 3 got a job; executing.\nShutting down.\nSending terminate message to all workers.\nShutting down all workers.\nShutting down worker 0\nWorker 1 was told to terminate.\nWorker 2 was told to terminate.\nWorker 0 was told to terminate.\nWorker 3 was told to terminate.\nShutting down worker 1\nShutting down worker 2\nShutting down worker 3\n```\n\nYou might see a different ordering of workers and messages printed. We can see\nhow this code works from the messages: workers 0 and 3 got the first two\nrequests, and then on the third request, the server stopped accepting\nconnections. When the `ThreadPool` goes out of scope at the end of `main`, its\n`Drop` implementation kicks in, and the pool tells all workers to terminate.\nThe workers each print a message when they see the terminate message, and then\nthe thread pool calls `join` to shut down each worker thread.\n\nNotice one interesting aspect of this particular execution: the `ThreadPool`\nsent the terminate messages down the channel, and before any worker received\nthe messages, we tried to join worker 0. Worker 0 had not yet received the\nterminate message, so the main thread blocked waiting for worker 0 to finish.\nIn the meantime, each of the workers received the termination messages. When\nworker 0 finished, the main thread waited for the rest of the workers to\nfinish. At that point, they had all received the termination message and were\nable to shut down.\n\nCongrats! We’ve now completed our project; we have a basic web server that uses\na thread pool to respond asynchronously. We’re able to perform a graceful\nshutdown of the server, which cleans up all the threads in the pool.\n\nHere’s the full code for reference:\n\n<span class=\"filename\">Filename: src/bin/main.rs</span>\n\n```rust,ignore\nuse hello::ThreadPool;\nuse std::fs;\nuse std::io::prelude::*;\nuse std::net::TcpListener;\nuse std::net::TcpStream;\nuse std::thread;\nuse std::time::Duration;\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n    let pool = ThreadPool::new(4);\n\n    for stream in listener.incoming().take(2) {\n        let stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n\n    println!(\"Shutting down.\");\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let mut buffer = [0; 1024];\n    stream.read(&mut buffer).unwrap();\n\n    let get = b\"GET / HTTP/1.1\\r\\n\";\n    let sleep = b\"GET /sleep HTTP/1.1\\r\\n\";\n\n    let (status_line, filename) = if buffer.starts_with(get) {\n        (\"HTTP/1.1 200 OK\\r\\n\\r\\n\", \"hello.html\")\n    } else if buffer.starts_with(sleep) {\n        thread::sleep(Duration::from_secs(5));\n        (\"HTTP/1.1 200 OK\\r\\n\\r\\n\", \"hello.html\")\n    } else {\n        (\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n\", \"404.html\")\n    };\n\n    let contents = fs::read_to_string(filename).unwrap();\n\n    let response = format!(\"{}{}\", status_line, contents);\n\n    stream.write(response.as_bytes()).unwrap();\n    stream.flush().unwrap();\n}\n```\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\nuse std::sync::mpsc;\nuse std::sync::Arc;\nuse std::sync::Mutex;\nuse std::thread;\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Message>,\n}\n\ntype Job = Box<dyn FnOnce() + Send + \'static>;\n\nenum Message {\n    NewJob(Job),\n    Terminate,\n}\n\nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + \'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.send(Message::NewJob(job)).unwrap();\n    }\n}\n\nimpl Drop for ThreadPool {\n    fn drop(&mut self) {\n        println!(\"Sending terminate message to all workers.\");\n\n        for _ in &self.workers {\n            self.sender.send(Message::Terminate).unwrap();\n        }\n\n        println!(\"Shutting down all workers.\");\n\n        for worker in &mut self.workers {\n            println!(\"Shutting down worker {}\", worker.id);\n\n            if let Some(thread) = worker.thread.take() {\n                thread.join().unwrap();\n            }\n        }\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: Option<thread::JoinHandle<()>>,\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) -> Worker {\n        let thread = thread::spawn(move || loop {\n            let message = receiver.lock().unwrap().recv().unwrap();\n\n            match message {\n                Message::NewJob(job) => {\n                    println!(\"Worker {} got a job; executing.\", id);\n\n                    job();\n                }\n                Message::Terminate => {\n                    println!(\"Worker {} was told to terminate.\", id);\n\n                    break;\n                }\n            }\n        });\n\n        Worker {\n            id,\n            thread: Some(thread),\n        }\n    }\n}\n# \n# fn main() {}\n```\n\nWe could do more here! If you want to continue enhancing this project, here are\nsome ideas:\n\n* Add more documentation to `ThreadPool` and its public methods.\n* Add tests of the library’s functionality.\n* Change calls to `unwrap` to more robust error handling.\n* Use `ThreadPool` to perform some task other than serving web requests.\n* Find a thread pool crate on [crates.io](https://crates.io/) and implement a\n  similar web server using the crate instead. Then compare its API and\n  robustness to the thread pool we implemented.\n\n## Summary\n\nWell done! You’ve made it to the end of the book! We want to thank you for\njoining us on this tour of Rust. You’re now ready to implement your own Rust\nprojects and help with other peoples’ projects. Keep in mind that there is a\nwelcoming community of other Rustaceans who would love to help you with any\nchallenges you encounter on your Rust journey.\n", number: Some(SectionNumber([20, 3])), sub_items: [], path: "ch20-03-graceful-shutdown-and-cleanup.md", parent_names: ["Final Project: Building a Multithreaded Web Server"] })], path: "ch20-00-final-project-a-web-server.md", parent_names: [] }), Chapter(Chapter { name: "Appendix", content: "# Appendix\n\nThe following sections contain reference material you may find useful in your\nRust journey.\n", number: Some(SectionNumber([21])), sub_items: [Chapter(Chapter { name: "A - Keywords", content: "## Appendix A: Keywords\n\nThe following list contains keywords that are reserved for current or future\nuse by the Rust language. As such, they cannot be used as identifiers (except\nas raw identifiers as we’ll discuss in the “[Raw\nIdentifiers][raw-identifiers]<!-- ignore -->” section), including names of\nfunctions, variables, parameters, struct fields, modules, crates, constants,\nmacros, static values, attributes, types, traits, or lifetimes.\n\n[raw-identifiers]: #raw-identifiers\n\n### Keywords Currently in Use\n\nThe following keywords currently have the functionality described.\n\n* `as` - perform primitive casting, disambiguate the specific trait containing\n  an item, or rename items in `use` and `extern crate` statements\n* `async` -  return a `Future` instead of blocking the current thread\n* `await` - suspend execution until the result of a `Future` is ready\n* `break` - exit a loop immediately\n* `const` - define constant items or constant raw pointers\n* `continue` - continue to the next loop iteration\n* `crate` - link an external crate or a macro variable representing the crate in\n  which the macro is defined\n* `dyn` - dynamic dispatch to a trait object\n* `else` - fallback for `if` and `if let` control flow constructs\n* `enum` - define an enumeration\n* `extern` - link an external crate, function, or variable\n* `false` - Boolean false literal\n* `fn` - define a function or the function pointer type\n* `for` - loop over items from an iterator, implement a trait, or specify a\n  higher-ranked lifetime\n* `if` - branch based on the result of a conditional expression\n* `impl` - implement inherent or trait functionality\n* `in` - part of `for` loop syntax\n* `let` - bind a variable\n* `loop` - loop unconditionally\n* `match` - match a value to patterns\n* `mod` - define a module\n* `move` - make a closure take ownership of all its captures\n* `mut` - denote mutability in references, raw pointers, or pattern bindings\n* `pub` - denote public visibility in struct fields, `impl` blocks, or modules\n* `ref` - bind by reference\n* `return` - return from function\n* `Self` - a type alias for the type we are defining or implementing\n* `self` - method subject or current module\n* `static` - global variable or lifetime lasting the entire program execution\n* `struct` - define a structure\n* `super` - parent module of the current module\n* `trait` - define a trait\n* `true` - Boolean true literal\n* `type` - define a type alias or associated type\n* `union` - define a [union] and is only a keyword when used in a union declaration\n* `unsafe` - denote unsafe code, functions, traits, or implementations\n* `use` - bring symbols into scope\n* `where` - denote clauses that constrain a type\n* `while` - loop conditionally based on the result of an expression\n\n[union]: ../reference/items/unions.html\n\n### Keywords Reserved for Future Use\n\nThe following keywords do not have any functionality but are reserved by Rust\nfor potential future use.\n\n* `abstract`\n* `become`\n* `box`\n* `do`\n* `final`\n* `macro`\n* `override`\n* `priv`\n* `try`\n* `typeof`\n* `unsized`\n* `virtual`\n* `yield`\n\n### Raw Identifiers\n\n*Raw identifiers* are the syntax that lets you use keywords where they wouldn’t\nnormally be allowed. You use a raw identifier by prefixing a keyword with `r#`.\n\nFor example, `match` is a keyword. If you try to compile the following function\nthat uses `match` as its name:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn match(needle: &str, haystack: &str) -> bool {\n    haystack.contains(needle)\n}\n```\n\nyou’ll get this error:\n\n```text\nerror: expected identifier, found keyword `match`\n --> src/main.rs:4:4\n  |\n4 | fn match(needle: &str, haystack: &str) -> bool {\n  |    ^^^^^ expected identifier, found keyword\n```\n\nThe error shows that you can’t use the keyword `match` as the function\nidentifier. To use `match` as a function name, you need to use the raw\nidentifier syntax, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn r#match(needle: &str, haystack: &str) -> bool {\n    haystack.contains(needle)\n}\n\nfn main() {\n    assert!(r#match(\"foo\", \"foobar\"));\n}\n```\n\nThis code will compile without any errors. Note the `r#` prefix on the function\nname in its definition as well as where the function is called in `main`.\n\nRaw identifiers allow you to use any word you choose as an identifier, even if\nthat word happens to be a reserved keyword. In addition, raw identifiers allow\nyou to use libraries written in a different Rust edition than your crate uses.\nFor example, `try` isn’t a keyword in the 2015 edition but is in the 2018\nedition. If you depend on a library that’s written using the 2015 edition and\nhas a `try` function, you’ll need to use the raw identifier syntax, `r#try` in\nthis case, to call that function from your 2018 edition code. See [Appendix\nE][appendix-e]<!-- ignore --> for more information on editions.\n\n[appendix-e]: appendix-05-editions.html\n", number: Some(SectionNumber([21, 1])), sub_items: [], path: "appendix-01-keywords.md", parent_names: ["Appendix"] }), Chapter(Chapter { name: "B - Operators and Symbols", content: "## Appendix B: Operators and Symbols\n\nThis appendix contains a glossary of Rust’s syntax, including operators and\nother symbols that appear by themselves or in the context of paths, generics,\ntrait bounds, macros, attributes, comments, tuples, and brackets.\n\n### Operators\n\nTable B-1 contains the operators in Rust, an example of how the operator would\nappear in context, a short explanation, and whether that operator is\noverloadable. If an operator is overloadable, the relevant trait to use to\noverload that operator is listed.\n\n<span class=\"caption\">Table B-1: Operators</span>\n\n| Operator | Example | Explanation | Overloadable? |\n|----------|---------|-------------|---------------|\n| `!` | `ident!(...)`, `ident!{...}`, `ident![...]` | Macro expansion | |\n| `!` | `!expr` | Bitwise or logical complement | `Not` |\n| `!=` | `var != expr` | Nonequality comparison | `PartialEq` |\n| `%` | `expr % expr` | Arithmetic remainder | `Rem` |\n| `%=` | `var %= expr` | Arithmetic remainder and assignment | `RemAssign` |\n| `&` | `&expr`, `&mut expr` | Borrow | |\n| `&` | `&type`, `&mut type`, `&\'a type`, `&\'a mut type` | Borrowed pointer type | |\n| `&` | `expr & expr` | Bitwise AND | `BitAnd` |\n| `&=` | `var &= expr` | Bitwise AND and assignment | `BitAndAssign` |\n| `&&` | `expr && expr` | Short-circuiting logical AND | |\n| `*` | `expr * expr` | Arithmetic multiplication | `Mul` |\n| `*=` | `var *= expr` | Arithmetic multiplication and assignment | `MulAssign` |\n| `*` | `*expr` | Dereference | |\n| `*` | `*const type`, `*mut type` | Raw pointer | |\n| `+` | `trait + trait`, `\'a + trait` | Compound type constraint | |\n| `+` | `expr + expr` | Arithmetic addition | `Add` |\n| `+=` | `var += expr` | Arithmetic addition and assignment | `AddAssign` |\n| `,` | `expr, expr` | Argument and element separator | |\n| `-` | `- expr` | Arithmetic negation | `Neg` |\n| `-` | `expr - expr` | Arithmetic subtraction | `Sub` |\n| `-=` | `var -= expr` | Arithmetic subtraction and assignment | `SubAssign` |\n| `->` | `fn(...) -> type`, <code>&vert;...&vert; -> type</code> | Function and closure return type | |\n| `.` | `expr.ident` | Member access | |\n| `..` | `..`, `expr..`, `..expr`, `expr..expr` | Right-exclusive range literal | |\n| `..=` | `..=expr`, `expr..=expr` | Right-inclusive range literal | |\n| `..` | `..expr` | Struct literal update syntax | |\n| `..` | `variant(x, ..)`, `struct_type { x, .. }` | “And the rest” pattern binding | |\n| `...` | `expr...expr` | In a pattern: inclusive range pattern | |\n| `/` | `expr / expr` | Arithmetic division | `Div` |\n| `/=` | `var /= expr` | Arithmetic division and assignment | `DivAssign` |\n| `:` | `pat: type`, `ident: type` | Constraints | |\n| `:` | `ident: expr` | Struct field initializer | |\n| `:` | `\'a: loop {...}` | Loop label | |\n| `;` | `expr;` | Statement and item terminator | |\n| `;` | `[...; len]` | Part of fixed-size array syntax | |\n| `<<` | `expr << expr` | Left-shift | `Shl` |\n| `<<=` | `var <<= expr` | Left-shift and assignment | `ShlAssign` |\n| `<` | `expr < expr` | Less than comparison | `PartialOrd` |\n| `<=` | `expr <= expr` | Less than or equal to comparison | `PartialOrd` |\n| `=` | `var = expr`, `ident = type` | Assignment/equivalence | |\n| `==` | `expr == expr` | Equality comparison | `PartialEq` |\n| `=>` | `pat => expr` | Part of match arm syntax | |\n| `>` | `expr > expr` | Greater than comparison | `PartialOrd` |\n| `>=` | `expr >= expr` | Greater than or equal to comparison | `PartialOrd` |\n| `>>` | `expr >> expr` | Right-shift | `Shr` |\n| `>>=` | `var >>= expr` | Right-shift and assignment | `ShrAssign` |\n| `@` | `ident @ pat` | Pattern binding | |\n| `^` | `expr ^ expr` | Bitwise exclusive OR | `BitXor` |\n| `^=` | `var ^= expr` | Bitwise exclusive OR and assignment | `BitXorAssign` |\n| <code>&vert;</code> | <code>pat &vert; pat</code> | Pattern alternatives | |\n| <code>&vert;</code> | <code>expr &vert; expr</code> | Bitwise OR | `BitOr` |\n| <code>&vert;=</code> | <code>var &vert;= expr</code> | Bitwise OR and assignment | `BitOrAssign` |\n| <code>&vert;&vert;</code> | <code>expr &vert;&vert; expr</code> | Short-circuiting logical OR | |\n| `?` | `expr?` | Error propagation | |\n\n### Non-operator Symbols\n\nThe following list contains all non-letters that don’t function as operators;\nthat is, they don’t behave like a function or method call.\n\nTable B-2 shows symbols that appear on their own and are valid in a variety of\nlocations.\n\n<span class=\"caption\">Table B-2: Stand-Alone Syntax</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `\'ident` | Named lifetime or loop label |\n| `...u8`, `...i32`, `...f64`, `...usize`, etc. | Numeric literal of specific type |\n| `\"...\"` | String literal |\n| `r\"...\"`, `r#\"...\"#`, `r##\"...\"##`, etc. | Raw string literal, escape characters not processed |\n| `b\"...\"` | Byte string literal; constructs a `[u8]` instead of a string |\n| `br\"...\"`, `br#\"...\"#`, `br##\"...\"##`, etc. | Raw byte string literal, combination of raw and byte string literal |\n| `\'...\'` | Character literal |\n| `b\'...\'` | ASCII byte literal |\n| <code>&vert;...&vert; expr</code> | Closure |\n| `!` | Always empty bottom type for diverging functions |\n| `_` | “Ignored” pattern binding; also used to make integer literals readable |\n\nTable B-3 shows symbols that appear in the context of a path through the module\nhierarchy to an item.\n\n<span class=\"caption\">Table B-3: Path-Related Syntax</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `ident::ident` | Namespace path |\n| `::path` | Path relative to the crate root (i.e., an explicitly absolute path) |\n| `self::path` | Path relative to the current module (i.e., an explicitly relative path).\n| `super::path` | Path relative to the parent of the current module |\n| `type::ident`, `<type as trait>::ident` | Associated constants, functions, and types |\n| `<type>::...` | Associated item for a type that cannot be directly named (e.g., `<&T>::...`, `<[T]>::...`, etc.) |\n| `trait::method(...)` | Disambiguating a method call by naming the trait that defines it |\n| `type::method(...)` | Disambiguating a method call by naming the type for which it’s defined |\n| `<type as trait>::method(...)` | Disambiguating a method call by naming the trait and type |\n\nTable B-4 shows symbols that appear in the context of using generic type\nparameters.\n\n<span class=\"caption\">Table B-4: Generics</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `path<...>` | Specifies parameters to generic type in a type (e.g., `Vec<u8>`) |\n| `path::<...>`, `method::<...>` | Specifies parameters to generic type, function, or method in an expression; often referred to as turbofish (e.g., `\"42\".parse::<i32>()`) |\n| `fn ident<...> ...` | Define generic function |\n| `struct ident<...> ...` | Define generic structure |\n| `enum ident<...> ...` | Define generic enumeration |\n| `impl<...> ...` | Define generic implementation |\n| `for<...> type` | Higher-ranked lifetime bounds |\n| `type<ident=type>` | A generic type where one or more associated types have specific assignments (e.g., `Iterator<Item=T>`) |\n\nTable B-5 shows symbols that appear in the context of constraining generic type\nparameters with trait bounds.\n\n<span class=\"caption\">Table B-5: Trait Bound Constraints</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `T: U` | Generic parameter `T` constrained to types that implement `U` |\n| `T: \'a` | Generic type `T` must outlive lifetime `\'a` (meaning the type cannot transitively contain any references with lifetimes shorter than `\'a`) |\n| `T : \'static` | Generic type `T` contains no borrowed references other than `\'static` ones |\n| `\'b: \'a` | Generic lifetime `\'b` must outlive lifetime `\'a` |\n| `T: ?Sized` | Allow generic type parameter to be a dynamically sized type |\n| `\'a + trait`, `trait + trait` | Compound type constraint |\n\nTable B-6 shows symbols that appear in the context of calling or defining\nmacros and specifying attributes on an item.\n\n<span class=\"caption\">Table B-6: Macros and Attributes</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `#[meta]` | Outer attribute |\n| `#![meta]` | Inner attribute |\n| `$ident` | Macro substitution |\n| `$ident:kind` | Macro capture |\n| `$(…)…` | Macro repetition |\n| `ident!(...)`, `ident!{...}`, `ident![...]` | Macro invocation |\n\nTable B-7 shows symbols that create comments.\n\n<span class=\"caption\">Table B-7: Comments</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `//` | Line comment |\n| `//!` | Inner line doc comment |\n| `///` | Outer line doc comment |\n| `/*...*/` | Block comment |\n| `/*!...*/` | Inner block doc comment |\n| `/**...*/` | Outer block doc comment |\n\nTable B-8 shows symbols that appear in the context of using tuples.\n\n<span class=\"caption\">Table B-8: Tuples</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `()` | Empty tuple (aka unit), both literal and type |\n| `(expr)` | Parenthesized expression |\n| `(expr,)` | Single-element tuple expression |\n| `(type,)` | Single-element tuple type |\n| `(expr, ...)` | Tuple expression |\n| `(type, ...)` | Tuple type |\n| `expr(expr, ...)` | Function call expression; also used to initialize tuple `struct`s and tuple `enum` variants |\n| `expr.0`, `expr.1`, etc. | Tuple indexing |\n\nTable B-9 shows the contexts in which curly braces are used.\n\n<span class=\"caption\">Table B-9: Curly Brackets</span>\n\n| Context | Explanation |\n|---------|-------------|\n| `{...}` | Block expression |\n| `Type {...}` | `struct` literal |\n\nTable B-10 shows the contexts in which square brackets are used.\n\n<span class=\"caption\">Table B-10: Square Brackets</span>\n\n| Context | Explanation |\n|---------|-------------|\n| `[...]` | Array literal |\n| `[expr; len]` | Array literal containing `len` copies of `expr` |\n| `[type; len]` | Array type containing `len` instances of `type` |\n| `expr[expr]` | Collection indexing. Overloadable (`Index`, `IndexMut`) |\n| `expr[..]`, `expr[a..]`, `expr[..b]`, `expr[a..b]` | Collection indexing pretending to be collection slicing, using `Range`, `RangeFrom`, `RangeTo`, or `RangeFull` as the “index” |\n", number: Some(SectionNumber([21, 2])), sub_items: [], path: "appendix-02-operators.md", parent_names: ["Appendix"] }), Chapter(Chapter { name: "C - Derivable Traits", content: "## Appendix C: Derivable Traits\n\nIn various places in the book, we’ve discussed the `derive` attribute, which\nyou can apply to a struct or enum definition. The `derive` attribute generates\ncode that will implement a trait with its own default implementation on the\ntype you’ve annotated with the `derive` syntax.\n\nIn this appendix, we provide a reference of all the traits in the standard\nlibrary that you can use with `derive`. Each section covers:\n\n* What operators and methods deriving this trait will enable\n* What the implementation of the trait provided by `derive` does\n* What implementing the trait signifies about the type\n* The conditions in which you’re allowed or not allowed to implement the trait\n* Examples of operations that require the trait\n\nIf you want different behavior from that provided by the `derive` attribute,\nconsult the [standard library documentation](../std/index.html)<!-- ignore -->\nfor each trait for details of how to manually implement them.\n\nThe rest of the traits defined in the standard library can’t be implemented on\nyour types using `derive`. These traits don’t have sensible default behavior,\nso it’s up to you to implement them in the way that makes sense for what you’re\ntrying to accomplish.\n\nAn example of a trait that can’t be derived is `Display`, which handles\nformatting for end users. You should always consider the appropriate way to\ndisplay a type to an end user. What parts of the type should an end user be\nallowed to see? What parts would they find relevant? What format of the data\nwould be most relevant to them? The Rust compiler doesn’t have this insight, so\nit can’t provide appropriate default behavior for you.\n\nThe list of derivable traits provided in this appendix is not comprehensive:\nlibraries can implement `derive` for their own traits, making the list of\ntraits you can use `derive` with truly open-ended. Implementing `derive`\ninvolves using a procedural macro, which is covered in the\n[“Macros”][macros]<!-- ignore --> section of Chapter 19.\n\n### `Debug` for Programmer Output\n\nThe `Debug` trait enables debug formatting in format strings, which you\nindicate by adding `:?` within `{}` placeholders.\n\nThe `Debug` trait allows you to print instances of a type for debugging\npurposes, so you and other programmers using your type can inspect an instance\nat a particular point in a program’s execution.\n\nThe `Debug` trait is required, for example, in use of the `assert_eq!` macro.\nThis macro prints the values of instances given as arguments if the equality\nassertion fails so programmers can see why the two instances weren’t equal.\n\n### `PartialEq` and `Eq` for Equality Comparisons\n\nThe `PartialEq` trait allows you to compare instances of a type to check for\nequality and enables use of the `==` and `!=` operators.\n\nDeriving `PartialEq` implements the `eq` method. When `PartialEq` is derived on\nstructs, two instances are equal only if *all* fields are equal, and the\ninstances are not equal if any fields are not equal. When derived on enums,\neach variant is equal to itself and not equal to the other variants.\n\nThe `PartialEq` trait is required, for example, with the use of the\n`assert_eq!` macro, which needs to be able to compare two instances of a type\nfor equality.\n\nThe `Eq` trait has no methods. Its purpose is to signal that for every value of\nthe annotated type, the value is equal to itself. The `Eq` trait can only be\napplied to types that also implement `PartialEq`, although not all types that\nimplement `PartialEq` can implement `Eq`. One example of this is floating point\nnumber types: the implementation of floating point numbers states that two\ninstances of the not-a-number (`NaN`) value are not equal to each other.\n\nAn example of when `Eq` is required is for keys in a `HashMap<K, V>` so the\n`HashMap<K, V>` can tell whether two keys are the same.\n\n### `PartialOrd` and `Ord` for Ordering Comparisons\n\nThe `PartialOrd` trait allows you to compare instances of a type for sorting\npurposes. A type that implements `PartialOrd` can be used with the `<`, `>`,\n`<=`, and `>=` operators. You can only apply the `PartialOrd` trait to types\nthat also implement `PartialEq`.\n\nDeriving `PartialOrd` implements the `partial_cmp` method, which returns an\n`Option<Ordering>` that will be `None` when the values given don’t produce an\nordering. An example of a value that doesn’t produce an ordering, even though\nmost values of that type can be compared, is the not-a-number (`NaN`) floating\npoint value. Calling `partial_cmp` with any floating point number and the `NaN`\nfloating point value will return `None`.\n\nWhen derived on structs, `PartialOrd` compares two instances by comparing the\nvalue in each field in the order in which the fields appear in the struct\ndefinition. When derived on enums, variants of the enum declared earlier in the\nenum definition are considered less than the variants listed later.\n\nThe `PartialOrd` trait is required, for example, for the `gen_range` method\nfrom the `rand` crate that generates a random value in the range specified by a\nlow value and a high value.\n\nThe `Ord` trait allows you to know that for any two values of the annotated\ntype, a valid ordering will exist. The `Ord` trait implements the `cmp` method,\nwhich returns an `Ordering` rather than an `Option<Ordering>` because a valid\nordering will always be possible. You can only apply the `Ord` trait to types\nthat also implement `PartialOrd` and `Eq` (and `Eq` requires `PartialEq`). When\nderived on structs and enums, `cmp` behaves the same way as the derived\nimplementation for `partial_cmp` does with `PartialOrd`.\n\nAn example of when `Ord` is required is when storing values in a `BTreeSet<T>`,\na data structure that stores data based on the sort order of the values.\n\n### `Clone` and `Copy` for Duplicating Values\n\nThe `Clone` trait allows you to explicitly create a deep copy of a value, and\nthe duplication process might involve running arbitrary code and copying heap\ndata. See the [“Ways Variables and Data Interact:\nClone”][ways-variables-and-data-interact-clone]<!-- ignore --> section in\nChapter 4 for more information on `Clone`.\n\nDeriving `Clone` implements the `clone` method, which when implemented for the\nwhole type, calls `clone` on each of the parts of the type. This means all the\nfields or values in the type must also implement `Clone` to derive `Clone`.\n\nAn example of when `Clone` is required is when calling the `to_vec` method on a\nslice. The slice doesn’t own the type instances it contains, but the vector\nreturned from `to_vec` will need to own its instances, so `to_vec` calls\n`clone` on each item. Thus, the type stored in the slice must implement `Clone`.\n\nThe `Copy` trait allows you to duplicate a value by only copying bits stored on\nthe stack; no arbitrary code is necessary. See the [“Stack-Only Data:\nCopy”][stack-only-data-copy]<!-- ignore --> section in Chapter 4 for more\ninformation on `Copy`.\n\nThe `Copy` trait doesn’t define any methods to prevent programmers from\noverloading those methods and violating the assumption that no arbitrary code\nis being run. That way, all programmers can assume that copying a value will be\nvery fast.\n\nYou can derive `Copy` on any type whose parts all implement `Copy`. You can\nonly apply the `Copy` trait to types that also implement `Clone`, because a\ntype that implements `Copy` has a trivial implementation of `Clone` that\nperforms the same task as `Copy`.\n\nThe `Copy` trait is rarely required; types that implement `Copy` have\noptimizations available, meaning you don’t have to call `clone`, which makes\nthe code more concise.\n\nEverything possible with `Copy` you can also accomplish with `Clone`, but the\ncode might be slower or have to use `clone` in places.\n\n### `Hash` for Mapping a Value to a Value of Fixed Size\n\nThe `Hash` trait allows you to take an instance of a type of arbitrary size and\nmap that instance to a value of fixed size using a hash function. Deriving\n`Hash` implements the `hash` method. The derived implementation of the `hash`\nmethod combines the result of calling `hash` on each of the parts of the type,\nmeaning all fields or values must also implement `Hash` to derive `Hash`.\n\nAn example of when `Hash` is required is in storing keys in a `HashMap<K, V>`\nto store data efficiently.\n\n### `Default` for Default Values\n\nThe `Default` trait allows you to create a default value for a type. Deriving\n`Default` implements the `default` function. The derived implementation of the\n`default` function calls the `default` function on each part of the type,\nmeaning all fields or values in the type must also implement `Default` to\nderive `Default`.\n\nThe `Default::default` function is commonly used in combination with the struct\nupdate syntax discussed in the [“Creating Instances From Other Instances With\nStruct Update\nSyntax”][creating-instances-from-other-instances-with-struct-update-syntax]<!-- ignore -->\nsection in Chapter 5. You can customize a few fields of a struct and then\nset and use a default value for the rest of the fields by using\n`..Default::default()`.\n\nThe `Default` trait is required when you use the method `unwrap_or_default` on\n`Option<T>` instances, for example. If the `Option<T>` is `None`, the method\n`unwrap_or_default` will return the result of `Default::default` for the type\n`T` stored in the `Option<T>`.\n\n[creating-instances-from-other-instances-with-struct-update-syntax]:\nch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax\n[stack-only-data-copy]:\nch04-01-what-is-ownership.html#stack-only-data-copy\n[ways-variables-and-data-interact-clone]:\nch04-01-what-is-ownership.html#ways-variables-and-data-interact-clone\n[macros]: ch19-06-macros.html#macros\n", number: Some(SectionNumber([21, 3])), sub_items: [], path: "appendix-03-derivable-traits.md", parent_names: ["Appendix"] }), Chapter(Chapter { name: "D - Useful Development Tools", content: "## Appendix D - Useful Development Tools\n\nIn this appendix, we talk about some useful development tools that the Rust\nproject provides. We’ll look at automatic formatting, quick ways to apply\nwarning fixes, a linter, and integrating with IDEs.\n\n### Automatic Formatting with `rustfmt`\n\nThe `rustfmt` tool\u{a0}reformats your code according to the community code style.\nMany collaborative projects use `rustfmt` to prevent arguments about which\nstyle to use when writing Rust: everyone formats their code using the tool.\n\nTo install `rustfmt`, enter the following:\n\n```text\n$ rustup component add rustfmt\n```\n\nThis command gives you `rustfmt` and `cargo-fmt`, similar to how Rust gives you\nboth `rustc` and `cargo`. To format any Cargo project, enter the following:\n\n```text\n$ cargo fmt\n```\n\nRunning this command reformats all the Rust code in the current crate. This\nshould only change the code style, not the code semantics. For more information\non `rustfmt`, see [its documentation][rustfmt].\n\n[rustfmt]: https://github.com/rust-lang/rustfmt\n\n### Fix Your Code with `rustfix`\n\nThe rustfix tool is included with Rust installations and can automatically fix\nsome compiler warnings. If you’ve written code in Rust, you’ve probably seen\ncompiler warnings. For example, consider this code:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn do_something() {}\n\nfn main() {\n    for i in 0..100 {\n        do_something();\n    }\n}\n```\n\nHere, we’re calling the `do_something` function 100 times, but we never use the\nvariable `i` in the body of the `for` loop. Rust warns us about that:\n\n```text\n$ cargo build\n   Compiling myprogram v0.1.0 (file:///projects/myprogram)\nwarning: unused variable: `i`\n --> src/main.rs:4:9\n  |\n4 |     for i in 1..100 {\n  |         ^ help: consider using `_i` instead\n  |\n  = note: #[warn(unused_variables)] on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.50s\n```\n\nThe warning suggests that we use `_i` as a name instead: the underscore\nindicates that we intend for this variable to be unused. We can automatically\napply that suggestion using the `rustfix` tool by running the command `cargo\nfix`:\n\n```text\n$ cargo fix\n    Checking myprogram v0.1.0 (file:///projects/myprogram)\n      Fixing src/main.rs (1 fix)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.59s\n```\n\nWhen we look at *src/main.rs* again, we’ll see that `cargo fix` has changed the\ncode:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn do_something() {}\n\nfn main() {\n    for _i in 0..100 {\n        do_something();\n    }\n}\n```\n\nThe `for` loop variable is now named `_i`, and the warning no longer appears.\n\nYou can also use the `cargo fix` command to transition your code between\ndifferent Rust editions. Editions are covered in Appendix E.\n\n### More Lints with Clippy\n\nThe Clippy tool is a collection of lints to analyze your code so you can catch\ncommon mistakes and improve your Rust code.\n\nTo install Clippy, enter the following:\n\n```text\n$ rustup component add clippy\n```\n\nTo run Clippy’s lints on any Cargo project, enter the following:\n\n```text\n$ cargo clippy\n```\n\nFor example, say you write a program that uses an approximation of a\nmathematical constant, such as pi, as this program does:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x = 3.1415;\n    let r = 8.0;\n    println!(\"the area of the circle is {}\", x * r * r);\n}\n```\n\nRunning `cargo clippy` on this project results in this error:\n\n```text\nerror: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly\n --> src/main.rs:2:13\n  |\n2 |     let x = 3.1415;\n  |             ^^^^^^\n  |\n  = note: #[deny(clippy::approx_constant)] on by default\n  = help: for further information visit https://rust-lang-nursery.github.io/rust-clippy/master/index.html#approx_constant\n```\n\nThis error lets you know that Rust has this constant defined more precisely and\nthat your program would be more correct if you used the constant instead. You\nwould then change your code to use the `PI` constant. The following code\ndoesn’t result in any errors or warnings from Clippy:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x = std::f64::consts::PI;\n    let r = 8.0;\n    println!(\"the area of the circle is {}\", x * r * r);\n}\n```\n\nFor more information on Clippy, see [its documentation][clippy].\n\n[clippy]: https://github.com/rust-lang/rust-clippy\n\n### IDE Integration Using the Rust Language Server\n\nTo help IDE integration, the Rust project distributes the *Rust Language\nServer* (`rls`). This tool speaks the [Language Server\nProtocol][lsp], which is a specification for IDEs and programming\nlanguages to communicate with each other. Different clients can use the `rls`,\nsuch as [the Rust plug-in for Visual Studio Code][vscode].\n\n[lsp]: http://langserver.org/\n[vscode]: https://marketplace.visualstudio.com/items?itemName=rust-lang.rust\n\nTo install the `rls`, enter the following:\n\n```text\n$ rustup component add rls\n```\n\nThen install the language server support in your particular IDE; you’ll gain\nabilities such as autocompletion, jump to definition, and inline errors.\n\nFor more information on the `rls`, see [its documentation][rls].\n\n[rls]: https://github.com/rust-lang/rls\n", number: Some(SectionNumber([21, 4])), sub_items: [], path: "appendix-04-useful-development-tools.md", parent_names: ["Appendix"] }), Chapter(Chapter { name: "E - Editions", content: "## Appendix E - Editions\n\nIn Chapter 1, you saw that `cargo new` adds a bit of metadata to your\n*Cargo.toml* file about an edition. This appendix talks about what that means!\n\nThe Rust language and compiler have a six-week release cycle, meaning users get\na constant stream of new features. Other programming languages release larger\nchanges less often; Rust releases smaller updates more frequently. After a\nwhile, all of these tiny changes add up. But from release to release, it can be\ndifficult to look back and say, “Wow, between Rust 1.10 and Rust 1.31, Rust has\nchanged a lot!”\n\nEvery two or three years, the Rust team produces a new Rust *edition*. Each\nedition brings together the features that have landed into a clear package with\nfully updated documentation and tooling. New editions ship as part of the usual\nsix-week release process.\n\nEditions serve different purposes for different people:\n\n* For active Rust users, a new edition brings together incremental changes into\n  an easy-to-understand package.\n* For non-users, a new edition signals that some major advancements have\n  landed, which might make Rust worth another look.\n* For those developing Rust, a new edition provides a rallying point for the\n  project as a whole.\n\nAt the time of this writing, two Rust editions are available: Rust 2015 and\nRust 2018. This book is written using Rust 2018 edition idioms.\n\nThe `edition` key in *Cargo.toml* indicates which edition the compiler should\nuse for your code. If the key doesn’t exist, Rust uses `2015` as the edition\nvalue for backward compatibility reasons.\n\nEach project can opt in to an edition other than the default 2015 edition.\nEditions can contain incompatible changes, such as including a new keyword that\nconflicts with identifiers in code. However, unless you opt in to those\nchanges, your code will continue to compile even as you upgrade the Rust\ncompiler version you use.\n\nAll Rust compiler versions support any edition that existed prior to that\ncompiler’s release, and they can link crates of any supported editions\ntogether. Edition changes only affect the way the compiler initially parses\ncode. Therefore, if you’re using Rust 2015 and one of your dependencies uses\nRust 2018, your project will compile and be able to use that dependency. The\nopposite situation, where your project uses Rust 2018 and a dependency uses\nRust 2015, works as well.\n\nTo be clear: most features will be available on all editions. Developers using\nany Rust edition will continue to see improvements as new stable releases are\nmade. However, in some cases, mainly when new keywords are added, some new\nfeatures might only be available in later editions. You will need to switch\neditions if you want to take advantage of such features.\n\nFor more details, the [*Edition\nGuide*](https://doc.rust-lang.org/stable/edition-guide/) is a complete book\nabout editions that enumerates the differences between editions and explains\nhow to automatically upgrade your code to a new edition via `cargo fix`.\n", number: Some(SectionNumber([21, 5])), sub_items: [], path: "appendix-05-editions.md", parent_names: ["Appendix"] }), Chapter(Chapter { name: "F - Translations of the Book", content: "## Appendix F: Translations of the Book\n\nFor resources in languages other than English. Most are still in progress; see\n[the Translations label][label] to help or let us know about a new translation!\n\n[label]: https://github.com/rust-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations\n\n- [Português](https://github.com/rust-br/rust-book-pt-br) (BR)\n- [Português](https://github.com/nunojesus/rust-book-pt-pt) (PT)\n- [简体中文](https://github.com/KaiserY/trpl-zh-cn)\n- [Українська](https://github.com/pavloslav/rust-book-uk-ua)\n- [Español](https://github.com/thecodix/book), [alternate](https://github.com/ManRR/rust-book-es)\n- [Italiano](https://github.com/AgeOfWar/rust-book-it)\n- [Русский](https://github.com/ruRust/rust_book_2ed)\n- [한국어](https://github.com/rinthel/rust-lang-book-ko)\n- [日本語](https://github.com/rust-lang-ja/book-ja)\n- [Français](https://github.com/Jimskapt/rust-book-fr)\n- [Polski](https://github.com/paytchoo/book-pl)\n- [עברית](https://github.com/idanmel/rust-book-heb)\n- [Cebuano](https://github.com/agentzero1/book)\n- [Tagalog](https://github.com/josephace135/book)\n- [Esperanto](https://github.com/psychoslave/Rust-libro)\n- [ελληνική](https://github.com/TChatzigiannakis/rust-book-greek)\n- [Svenska](https://github.com/sebras/book)\n- [Farsi](https://github.com/pomokhtari/rust-book-fa)\n", number: Some(SectionNumber([21, 6])), sub_items: [], path: "appendix-06-translation.md", parent_names: ["Appendix"] }), Chapter(Chapter { name: "G - How Rust is Made and “Nightly Rust”", content: "## Appendix G - How Rust is Made and “Nightly Rust”\n\nThis appendix is about how Rust is made and how that affects you as a Rust\ndeveloper.\n\n### Stability Without Stagnation\n\nAs a language, Rust cares a *lot* about the stability of your code. We want\nRust to be a rock-solid foundation you can build on, and if things were\nconstantly changing, that would be impossible. At the same time, if we can’t\nexperiment with new features, we may not find out important flaws until after\ntheir release, when we can no longer change things.\n\nOur solution to this problem is what we call “stability without stagnation”,\nand our guiding principle is this: you should never have to fear upgrading to a\nnew version of stable Rust. Each upgrade should be painless, but should also\nbring you new features, fewer bugs, and faster compile times.\n\n### Choo, Choo! Release Channels and Riding the Trains\n\nRust development operates on a *train schedule*. That is, all development is\ndone on the `master` branch of the Rust repository. Releases follow a software\nrelease train model, which has been used by Cisco IOS and other software\nprojects. There are three *release channels* for Rust:\n\n* Nightly\n* Beta\n* Stable\n\nMost Rust developers primarily use the stable channel, but those who want to\ntry out experimental new features may use nightly or beta.\n\nHere’s an example of how the development and release process works: let’s\nassume that the Rust team is working on the release of Rust 1.5. That release\nhappened in December of 2015, but it will provide us with realistic version\nnumbers. A new feature is added to Rust: a new commit lands on the `master`\nbranch. Each night, a new nightly version of Rust is produced. Every day is a\nrelease day, and these releases are created by our release infrastructure\nautomatically. So as time passes, our releases look like this, once a night:\n\n```text\nnightly: * - - * - - *\n```\n\nEvery six weeks, it’s time to prepare a new release! The `beta` branch of the\nRust repository branches off from the `master` branch used by nightly. Now,\nthere are two releases:\n\n```text\nnightly: * - - * - - *\n                     |\nbeta:                *\n```\n\nMost Rust users do not use beta releases actively, but test against beta in\ntheir CI system to help Rust discover possible regressions. In the meantime,\nthere’s still a nightly release every night:\n\n```text\nnightly: * - - * - - * - - * - - *\n                     |\nbeta:                *\n```\n\nLet’s say a regression is found. Good thing we had some time to test the beta\nrelease before the regression snuck into a stable release! The fix is applied\nto `master`, so that nightly is fixed, and then the fix is backported to the\n`beta` branch, and a new release of beta is produced:\n\n```text\nnightly: * - - * - - * - - * - - * - - *\n                     |\nbeta:                * - - - - - - - - *\n```\n\nSix weeks after the first beta was created, it’s time for a stable release! The\n`stable` branch is produced from the `beta` branch:\n\n```text\nnightly: * - - * - - * - - * - - * - - * - * - *\n                     |\nbeta:                * - - - - - - - - *\n                                       |\nstable:                                *\n```\n\nHooray! Rust 1.5 is done! However, we’ve forgotten one thing: because the six\nweeks have gone by, we also need a new beta of the *next* version of Rust, 1.6.\nSo after `stable` branches off of `beta`, the next version of `beta` branches\noff of `nightly` again:\n\n```text\nnightly: * - - * - - * - - * - - * - - * - * - *\n                     |                         |\nbeta:                * - - - - - - - - *       *\n                                       |\nstable:                                *\n```\n\nThis is called the “train model” because every six weeks, a release “leaves the\nstation”, but still has to take a journey through the beta channel before it\narrives as a stable release.\n\nRust releases every six weeks, like clockwork. If you know the date of one Rust\nrelease, you can know the date of the next one: it’s six weeks later. A nice\naspect of having releases scheduled every six weeks is that the next train is\ncoming soon. If a feature happens to miss a particular release, there’s no need\nto worry: another one is happening in a short time! This helps reduce pressure\nto sneak possibly unpolished features in close to the release deadline.\n\nThanks to this process, you can always check out the next build of Rust and\nverify for yourself that it’s easy to upgrade to: if a beta release doesn’t\nwork as expected, you can report it to the team and get it fixed before the\nnext stable release happens! Breakage in a beta release is relatively rare, but\n`rustc` is still a piece of software, and bugs do exist.\n\n### Unstable Features\n\nThere’s one more catch with this release model: unstable features. Rust uses a\ntechnique called “feature flags” to determine what features are enabled in a\ngiven release. If a new feature is under active development, it lands on\n`master`, and therefore, in nightly, but behind a *feature flag*. If you, as a\nuser, wish to try out the work-in-progress feature, you can, but you must be\nusing a nightly release of Rust and annotate your source code with the\nappropriate flag to opt in.\n\nIf you’re using a beta or stable release of Rust, you can’t use any feature\nflags. This is the key that allows us to get practical use with new features\nbefore we declare them stable forever. Those who wish to opt into the bleeding\nedge can do so, and those who want a rock-solid experience can stick with\nstable and know that their code won’t break. Stability without stagnation.\n\nThis book only contains information about stable features, as in-progress\nfeatures are still changing, and surely they’ll be different between when this\nbook was written and when they get enabled in stable builds. You can find\ndocumentation for nightly-only features online.\n\n### Rustup and the Role of Rust Nightly\n\nRustup makes it easy to change between different release channels of Rust, on a\nglobal or per-project basis. By default, you’ll have stable Rust installed. To\ninstall nightly, for example:\n\n```text\n$ rustup toolchain install nightly\n```\n\nYou can see all of the *toolchains* (releases of Rust and associated\ncomponents) you have installed with `rustup` as well. Here’s an example on one\nof your authors’ Windows computer:\n\n```powershell\n> rustup toolchain list\nstable-x86_64-pc-windows-msvc (default)\nbeta-x86_64-pc-windows-msvc\nnightly-x86_64-pc-windows-msvc\n```\n\nAs you can see, the stable toolchain is the default. Most Rust users use stable\nmost of the time. You might want to use stable most of the time, but use\nnightly on a specific project, because you care about a cutting-edge feature.\nTo do so, you can use `rustup override` in that project’s directory to set the\nnightly toolchain as the one `rustup` should use when you’re in that directory:\n\n```text\n$ cd ~/projects/needs-nightly\n$ rustup override set nightly\n```\n\nNow, every time you call `rustc` or `cargo` inside of\n*~/projects/needs-nightly*, `rustup` will make sure that you are using nightly\nRust, rather than your default of stable Rust. This comes in handy when you\nhave a lot of Rust projects!\n\n### The RFC Process and Teams\n\nSo how do you learn about these new features? Rust’s development model follows\na *Request For Comments (RFC) process*. If you’d like an improvement in Rust,\nyou can write up a proposal, called an RFC.\n\nAnyone can write RFCs to improve Rust, and the proposals are reviewed and\ndiscussed by the Rust team, which is comprised of many topic subteams. There’s\na full list of the teams [on Rust’s\nwebsite](https://www.rust-lang.org/governance), which includes teams for\neach area of the project: language design, compiler implementation,\ninfrastructure, documentation, and more. The appropriate team reads the\nproposal and the comments, writes some comments of their own, and eventually,\nthere’s consensus to accept or reject the feature.\n\nIf the feature is accepted, an issue is opened on the Rust repository, and\nsomeone can implement it. The person who implements it very well may not be the\nperson who proposed the feature in the first place! When the implementation is\nready, it lands on the `master` branch behind a feature gate, as we discussed\nin the [“Unstable Features”](#unstable-features)<!-- ignore --> section.\n\nAfter some time, once Rust developers who use nightly releases have been able\nto try out the new feature, team members will discuss the feature, how it’s\nworked out on nightly, and decide if it should make it into stable Rust or not.\nIf the decision is to move forward, the feature gate is removed, and the\nfeature is now considered stable! It rides the trains into a new stable release\nof Rust.\n", number: Some(SectionNumber([21, 7])), sub_items: [], path: "appendix-07-nightly-rust.md", parent_names: ["Appendix"] })], path: "appendix-00.md", parent_names: [] })], __non_exhaustive: () }, config: Config { book: BookConfig { title: Some("The Rust Programming Language"), authors: [], description: None, src: "src", multilingual: false, language: Some("en") }, build: BuildConfig { build_dir: "book", create_missing: true, use_default_preprocessors: true }, rest: Table({"output": Table({"html": Table({"additional-css": Array([String("ferris.css"), String("theme/2018-edition.css")]), "additional-js": Array([String("ferris.js")])}), "latex": Table({})}), "rust": Table({})}) }, destination: "/Users/beckmanl/Documents/code/mdbook-latex/tests/book/book/latex", __non_exhaustive: () }
